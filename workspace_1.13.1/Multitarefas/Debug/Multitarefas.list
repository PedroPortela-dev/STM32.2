
Multitarefas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052b0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005440  08005440  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005440  08005440  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005440  08005440  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005440  08005440  00015440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005444  08005444  00015444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001de0  20000010  08005458  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001df0  08005458  00021df0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018c31  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003611  00000000  00000000  00038cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001588  00000000  00000000  0003c2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010be  00000000  00000000  0003d848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003d6c  00000000  00000000  0003e906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a0a8  00000000  00000000  00042672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2bba  00000000  00000000  0005c71a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004dac  00000000  00000000  000ff2d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00104080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005358 	.word	0x08005358

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08005358 	.word	0x08005358

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


HAL_Init();
 8000236:	f000 fc7f 	bl	8000b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023a:	f000 f843 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023e:	f000 f9bf 	bl	80005c0 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000242:	f000 f8a5 	bl	8000390 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000246:	f000 f8e3 	bl	8000410 <MX_SPI2_Init>
  MX_TSC_Init();
 800024a:	f000 f91f 	bl	800048c <MX_TSC_Init>
  MX_USB_PCD_Init();
 800024e:	f000 f991 	bl	8000574 <MX_USB_PCD_Init>
  MX_USART3_UART_Init();
 8000252:	f000 f95f 	bl	8000514 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000256:	f002 fe31 	bl	8002ebc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Blink01 */
  Blink01Handle = osThreadNew(StartBlink01, NULL, &Blink01_attributes);
 800025a:	4a13      	ldr	r2, [pc, #76]	; (80002a8 <main+0x78>)
 800025c:	4b13      	ldr	r3, [pc, #76]	; (80002ac <main+0x7c>)
 800025e:	2100      	movs	r1, #0
 8000260:	0018      	movs	r0, r3
 8000262:	f002 fe85 	bl	8002f70 <osThreadNew>
 8000266:	0002      	movs	r2, r0
 8000268:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <main+0x80>)
 800026a:	601a      	str	r2, [r3, #0]

  /* creation of Bink02 */
  Bink02Handle = osThreadNew(StartBlink02, NULL, &Bink02_attributes);
 800026c:	4a11      	ldr	r2, [pc, #68]	; (80002b4 <main+0x84>)
 800026e:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <main+0x88>)
 8000270:	2100      	movs	r1, #0
 8000272:	0018      	movs	r0, r3
 8000274:	f002 fe7c 	bl	8002f70 <osThreadNew>
 8000278:	0002      	movs	r2, r0
 800027a:	4b10      	ldr	r3, [pc, #64]	; (80002bc <main+0x8c>)
 800027c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800027e:	f002 fe49 	bl	8002f14 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t buf[12];
  while (1)
  {
	 HAL_UART_Receive(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	0018      	movs	r0, r3
 8000286:	f7ff ff3f 	bl	8000108 <strlen>
 800028a:	0003      	movs	r3, r0
 800028c:	b29a      	uxth	r2, r3
 800028e:	2301      	movs	r3, #1
 8000290:	425b      	negs	r3, r3
 8000292:	1d39      	adds	r1, r7, #4
 8000294:	480a      	ldr	r0, [pc, #40]	; (80002c0 <main+0x90>)
 8000296:	f002 f935 	bl	8002504 <HAL_UART_Receive>
	 HAL_Delay(500);
 800029a:	23fa      	movs	r3, #250	; 0xfa
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	0018      	movs	r0, r3
 80002a0:	f000 fcae 	bl	8000c00 <HAL_Delay>
	 HAL_UART_Receive(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80002a4:	e7ed      	b.n	8000282 <main+0x52>
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	08005398 	.word	0x08005398
 80002ac:	080006b9 	.word	0x080006b9
 80002b0:	200004a4 	.word	0x200004a4
 80002b4:	080053bc 	.word	0x080053bc
 80002b8:	080006dd 	.word	0x080006dd
 80002bc:	200004a8 	.word	0x200004a8
 80002c0:	20000128 	.word	0x20000128

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b590      	push	{r4, r7, lr}
 80002c6:	b099      	sub	sp, #100	; 0x64
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	242c      	movs	r4, #44	; 0x2c
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	0018      	movs	r0, r3
 80002d0:	2334      	movs	r3, #52	; 0x34
 80002d2:	001a      	movs	r2, r3
 80002d4:	2100      	movs	r1, #0
 80002d6:	f005 f809 	bl	80052ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002da:	231c      	movs	r3, #28
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	0018      	movs	r0, r3
 80002e0:	2310      	movs	r3, #16
 80002e2:	001a      	movs	r2, r3
 80002e4:	2100      	movs	r1, #0
 80002e6:	f005 f801 	bl	80052ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ea:	003b      	movs	r3, r7
 80002ec:	0018      	movs	r0, r3
 80002ee:	231c      	movs	r3, #28
 80002f0:	001a      	movs	r2, r3
 80002f2:	2100      	movs	r1, #0
 80002f4:	f004 fffa 	bl	80052ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80002f8:	0021      	movs	r1, r4
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2222      	movs	r2, #34	; 0x22
 80002fe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2201      	movs	r2, #1
 8000304:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2201      	movs	r2, #1
 800030a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2210      	movs	r2, #16
 8000310:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2202      	movs	r2, #2
 8000316:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2280      	movs	r2, #128	; 0x80
 800031c:	0212      	lsls	r2, r2, #8
 800031e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2280      	movs	r2, #128	; 0x80
 8000324:	0352      	lsls	r2, r2, #13
 8000326:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2200      	movs	r2, #0
 800032c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032e:	187b      	adds	r3, r7, r1
 8000330:	0018      	movs	r0, r3
 8000332:	f001 f945 	bl	80015c0 <HAL_RCC_OscConfig>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800033a:	f000 f9e1 	bl	8000700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033e:	211c      	movs	r1, #28
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2207      	movs	r2, #7
 8000344:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000346:	187b      	adds	r3, r7, r1
 8000348:	2202      	movs	r2, #2
 800034a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034c:	187b      	adds	r3, r7, r1
 800034e:	2200      	movs	r2, #0
 8000350:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000352:	187b      	adds	r3, r7, r1
 8000354:	2200      	movs	r2, #0
 8000356:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000358:	187b      	adds	r3, r7, r1
 800035a:	2101      	movs	r1, #1
 800035c:	0018      	movs	r0, r3
 800035e:	f001 fcb5 	bl	8001ccc <HAL_RCC_ClockConfig>
 8000362:	1e03      	subs	r3, r0, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000366:	f000 f9cb 	bl	8000700 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800036a:	003b      	movs	r3, r7
 800036c:	2280      	movs	r2, #128	; 0x80
 800036e:	0292      	lsls	r2, r2, #10
 8000370:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000372:	003b      	movs	r3, r7
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000378:	003b      	movs	r3, r7
 800037a:	0018      	movs	r0, r3
 800037c:	f001 fe12 	bl	8001fa4 <HAL_RCCEx_PeriphCLKConfig>
 8000380:	1e03      	subs	r3, r0, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000384:	f000 f9bc 	bl	8000700 <Error_Handler>
  }
}
 8000388:	46c0      	nop			; (mov r8, r8)
 800038a:	46bd      	mov	sp, r7
 800038c:	b019      	add	sp, #100	; 0x64
 800038e:	bd90      	pop	{r4, r7, pc}

08000390 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000394:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <MX_I2C2_Init+0x74>)
 8000396:	4a1c      	ldr	r2, [pc, #112]	; (8000408 <MX_I2C2_Init+0x78>)
 8000398:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800039a:	4b1a      	ldr	r3, [pc, #104]	; (8000404 <MX_I2C2_Init+0x74>)
 800039c:	4a1b      	ldr	r2, [pc, #108]	; (800040c <MX_I2C2_Init+0x7c>)
 800039e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80003a0:	4b18      	ldr	r3, [pc, #96]	; (8000404 <MX_I2C2_Init+0x74>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003a6:	4b17      	ldr	r3, [pc, #92]	; (8000404 <MX_I2C2_Init+0x74>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003ac:	4b15      	ldr	r3, [pc, #84]	; (8000404 <MX_I2C2_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80003b2:	4b14      	ldr	r3, [pc, #80]	; (8000404 <MX_I2C2_Init+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003b8:	4b12      	ldr	r3, [pc, #72]	; (8000404 <MX_I2C2_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003be:	4b11      	ldr	r3, [pc, #68]	; (8000404 <MX_I2C2_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c4:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <MX_I2C2_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <MX_I2C2_Init+0x74>)
 80003cc:	0018      	movs	r0, r3
 80003ce:	f000 fe9f 	bl	8001110 <HAL_I2C_Init>
 80003d2:	1e03      	subs	r3, r0, #0
 80003d4:	d001      	beq.n	80003da <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80003d6:	f000 f993 	bl	8000700 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003da:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <MX_I2C2_Init+0x74>)
 80003dc:	2100      	movs	r1, #0
 80003de:	0018      	movs	r0, r3
 80003e0:	f000 ff2c 	bl	800123c <HAL_I2CEx_ConfigAnalogFilter>
 80003e4:	1e03      	subs	r3, r0, #0
 80003e6:	d001      	beq.n	80003ec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80003e8:	f000 f98a 	bl	8000700 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003ec:	4b05      	ldr	r3, [pc, #20]	; (8000404 <MX_I2C2_Init+0x74>)
 80003ee:	2100      	movs	r1, #0
 80003f0:	0018      	movs	r0, r3
 80003f2:	f000 ff6f 	bl	80012d4 <HAL_I2CEx_ConfigDigitalFilter>
 80003f6:	1e03      	subs	r3, r0, #0
 80003f8:	d001      	beq.n	80003fe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003fa:	f000 f981 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	2000002c 	.word	0x2000002c
 8000408:	40005800 	.word	0x40005800
 800040c:	20303e5d 	.word	0x20303e5d

08000410 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <MX_SPI2_Init+0x74>)
 8000416:	4a1c      	ldr	r2, [pc, #112]	; (8000488 <MX_SPI2_Init+0x78>)
 8000418:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800041a:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <MX_SPI2_Init+0x74>)
 800041c:	2282      	movs	r2, #130	; 0x82
 800041e:	0052      	lsls	r2, r2, #1
 8000420:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000422:	4b18      	ldr	r3, [pc, #96]	; (8000484 <MX_SPI2_Init+0x74>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000428:	4b16      	ldr	r3, [pc, #88]	; (8000484 <MX_SPI2_Init+0x74>)
 800042a:	22c0      	movs	r2, #192	; 0xc0
 800042c:	0092      	lsls	r2, r2, #2
 800042e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <MX_SPI2_Init+0x74>)
 8000432:	2200      	movs	r2, #0
 8000434:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000436:	4b13      	ldr	r3, [pc, #76]	; (8000484 <MX_SPI2_Init+0x74>)
 8000438:	2200      	movs	r2, #0
 800043a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <MX_SPI2_Init+0x74>)
 800043e:	2280      	movs	r2, #128	; 0x80
 8000440:	0092      	lsls	r2, r2, #2
 8000442:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <MX_SPI2_Init+0x74>)
 8000446:	2208      	movs	r2, #8
 8000448:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <MX_SPI2_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <MX_SPI2_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <MX_SPI2_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <MX_SPI2_Init+0x74>)
 800045e:	2207      	movs	r2, #7
 8000460:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <MX_SPI2_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <MX_SPI2_Init+0x74>)
 800046a:	2208      	movs	r2, #8
 800046c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800046e:	4b05      	ldr	r3, [pc, #20]	; (8000484 <MX_SPI2_Init+0x74>)
 8000470:	0018      	movs	r0, r3
 8000472:	f001 fe95 	bl	80021a0 <HAL_SPI_Init>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800047a:	f000 f941 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000080 	.word	0x20000080
 8000488:	40003800 	.word	0x40003800

0800048c <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8000490:	4b1e      	ldr	r3, [pc, #120]	; (800050c <MX_TSC_Init+0x80>)
 8000492:	4a1f      	ldr	r2, [pc, #124]	; (8000510 <MX_TSC_Init+0x84>)
 8000494:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 8000496:	4b1d      	ldr	r3, [pc, #116]	; (800050c <MX_TSC_Init+0x80>)
 8000498:	2280      	movs	r2, #128	; 0x80
 800049a:	0552      	lsls	r2, r2, #21
 800049c:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 800049e:	4b1b      	ldr	r3, [pc, #108]	; (800050c <MX_TSC_Init+0x80>)
 80004a0:	2280      	movs	r2, #128	; 0x80
 80004a2:	0452      	lsls	r2, r2, #17
 80004a4:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 80004a6:	4b19      	ldr	r3, [pc, #100]	; (800050c <MX_TSC_Init+0x80>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 80004ac:	4b17      	ldr	r3, [pc, #92]	; (800050c <MX_TSC_Init+0x80>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 80004b2:	4b16      	ldr	r3, [pc, #88]	; (800050c <MX_TSC_Init+0x80>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 80004b8:	4b14      	ldr	r3, [pc, #80]	; (800050c <MX_TSC_Init+0x80>)
 80004ba:	2280      	movs	r2, #128	; 0x80
 80004bc:	0192      	lsls	r2, r2, #6
 80004be:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 80004c0:	4b12      	ldr	r3, [pc, #72]	; (800050c <MX_TSC_Init+0x80>)
 80004c2:	22a0      	movs	r2, #160	; 0xa0
 80004c4:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 80004c6:	4b11      	ldr	r3, [pc, #68]	; (800050c <MX_TSC_Init+0x80>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_TSC_Init+0x80>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <MX_TSC_Init+0x80>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <MX_TSC_Init+0x80>)
 80004da:	222c      	movs	r2, #44	; 0x2c
 80004dc:	2100      	movs	r1, #0
 80004de:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 80004e0:	4b0a      	ldr	r3, [pc, #40]	; (800050c <MX_TSC_Init+0x80>)
 80004e2:	2291      	movs	r2, #145	; 0x91
 80004e4:	0092      	lsls	r2, r2, #2
 80004e6:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <MX_TSC_Init+0x80>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 80004ee:	4b07      	ldr	r3, [pc, #28]	; (800050c <MX_TSC_Init+0x80>)
 80004f0:	2291      	movs	r2, #145	; 0x91
 80004f2:	00d2      	lsls	r2, r2, #3
 80004f4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 80004f6:	4b05      	ldr	r3, [pc, #20]	; (800050c <MX_TSC_Init+0x80>)
 80004f8:	0018      	movs	r0, r3
 80004fa:	f001 ff09 	bl	8002310 <HAL_TSC_Init>
 80004fe:	1e03      	subs	r3, r0, #0
 8000500:	d001      	beq.n	8000506 <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 8000502:	f000 f8fd 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	200000e4 	.word	0x200000e4
 8000510:	40024000 	.word	0x40024000

08000514 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <MX_USART3_UART_Init+0x58>)
 800051a:	4a15      	ldr	r2, [pc, #84]	; (8000570 <MX_USART3_UART_Init+0x5c>)
 800051c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <MX_USART3_UART_Init+0x58>)
 8000520:	2296      	movs	r2, #150	; 0x96
 8000522:	0212      	lsls	r2, r2, #8
 8000524:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <MX_USART3_UART_Init+0x58>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_USART3_UART_Init+0x58>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <MX_USART3_UART_Init+0x58>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <MX_USART3_UART_Init+0x58>)
 800053a:	220c      	movs	r2, #12
 800053c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <MX_USART3_UART_Init+0x58>)
 8000540:	2200      	movs	r2, #0
 8000542:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_USART3_UART_Init+0x58>)
 8000546:	2200      	movs	r2, #0
 8000548:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <MX_USART3_UART_Init+0x58>)
 800054c:	2200      	movs	r2, #0
 800054e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <MX_USART3_UART_Init+0x58>)
 8000552:	2200      	movs	r2, #0
 8000554:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <MX_USART3_UART_Init+0x58>)
 8000558:	0018      	movs	r0, r3
 800055a:	f001 ff7f 	bl	800245c <HAL_UART_Init>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d001      	beq.n	8000566 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000562:	f000 f8cd 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000128 	.word	0x20000128
 8000570:	40004800 	.word	0x40004800

08000574 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_USB_PCD_Init+0x44>)
 800057a:	4a10      	ldr	r2, [pc, #64]	; (80005bc <MX_USB_PCD_Init+0x48>)
 800057c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MX_USB_PCD_Init+0x44>)
 8000580:	2208      	movs	r2, #8
 8000582:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_USB_PCD_Init+0x44>)
 8000586:	2202      	movs	r2, #2
 8000588:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <MX_USB_PCD_Init+0x44>)
 800058c:	2202      	movs	r2, #2
 800058e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000590:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_USB_PCD_Init+0x44>)
 8000592:	2200      	movs	r2, #0
 8000594:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <MX_USB_PCD_Init+0x44>)
 8000598:	2200      	movs	r2, #0
 800059a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <MX_USB_PCD_Init+0x44>)
 800059e:	2200      	movs	r2, #0
 80005a0:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80005a2:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <MX_USB_PCD_Init+0x44>)
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 fee1 	bl	800136c <HAL_PCD_Init>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d001      	beq.n	80005b2 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80005ae:	f000 f8a7 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200001b0 	.word	0x200001b0
 80005bc:	40005c00 	.word	0x40005c00

080005c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b089      	sub	sp, #36	; 0x24
 80005c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	240c      	movs	r4, #12
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	0018      	movs	r0, r3
 80005cc:	2314      	movs	r3, #20
 80005ce:	001a      	movs	r2, r3
 80005d0:	2100      	movs	r1, #0
 80005d2:	f004 fe8b 	bl	80052ec <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d6:	4b35      	ldr	r3, [pc, #212]	; (80006ac <MX_GPIO_Init+0xec>)
 80005d8:	695a      	ldr	r2, [r3, #20]
 80005da:	4b34      	ldr	r3, [pc, #208]	; (80006ac <MX_GPIO_Init+0xec>)
 80005dc:	2180      	movs	r1, #128	; 0x80
 80005de:	0309      	lsls	r1, r1, #12
 80005e0:	430a      	orrs	r2, r1
 80005e2:	615a      	str	r2, [r3, #20]
 80005e4:	4b31      	ldr	r3, [pc, #196]	; (80006ac <MX_GPIO_Init+0xec>)
 80005e6:	695a      	ldr	r2, [r3, #20]
 80005e8:	2380      	movs	r3, #128	; 0x80
 80005ea:	031b      	lsls	r3, r3, #12
 80005ec:	4013      	ands	r3, r2
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b2e      	ldr	r3, [pc, #184]	; (80006ac <MX_GPIO_Init+0xec>)
 80005f4:	695a      	ldr	r2, [r3, #20]
 80005f6:	4b2d      	ldr	r3, [pc, #180]	; (80006ac <MX_GPIO_Init+0xec>)
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	0289      	lsls	r1, r1, #10
 80005fc:	430a      	orrs	r2, r1
 80005fe:	615a      	str	r2, [r3, #20]
 8000600:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <MX_GPIO_Init+0xec>)
 8000602:	695a      	ldr	r2, [r3, #20]
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	029b      	lsls	r3, r3, #10
 8000608:	4013      	ands	r3, r2
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	4b27      	ldr	r3, [pc, #156]	; (80006ac <MX_GPIO_Init+0xec>)
 8000610:	695a      	ldr	r2, [r3, #20]
 8000612:	4b26      	ldr	r3, [pc, #152]	; (80006ac <MX_GPIO_Init+0xec>)
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	02c9      	lsls	r1, r1, #11
 8000618:	430a      	orrs	r2, r1
 800061a:	615a      	str	r2, [r3, #20]
 800061c:	4b23      	ldr	r3, [pc, #140]	; (80006ac <MX_GPIO_Init+0xec>)
 800061e:	695a      	ldr	r2, [r3, #20]
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	02db      	lsls	r3, r3, #11
 8000624:	4013      	ands	r3, r2
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 800062a:	4921      	ldr	r1, [pc, #132]	; (80006b0 <MX_GPIO_Init+0xf0>)
 800062c:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <MX_GPIO_Init+0xf4>)
 800062e:	2200      	movs	r2, #0
 8000630:	0018      	movs	r0, r3
 8000632:	f000 fd35 	bl	80010a0 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
                           LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 8000636:	193b      	adds	r3, r7, r4
 8000638:	4a1d      	ldr	r2, [pc, #116]	; (80006b0 <MX_GPIO_Init+0xf0>)
 800063a:	601a      	str	r2, [r3, #0]
                          |LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	193b      	adds	r3, r7, r4
 800063e:	2201      	movs	r2, #1
 8000640:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	193b      	adds	r3, r7, r4
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	193b      	adds	r3, r7, r4
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064e:	193b      	adds	r3, r7, r4
 8000650:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <MX_GPIO_Init+0xf4>)
 8000652:	0019      	movs	r1, r3
 8000654:	0010      	movs	r0, r2
 8000656:	f000 fbab 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 800065a:	0021      	movs	r1, r4
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2206      	movs	r2, #6
 8000660:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2290      	movs	r2, #144	; 0x90
 8000666:	0352      	lsls	r2, r2, #13
 8000668:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000670:	000c      	movs	r4, r1
 8000672:	187b      	adds	r3, r7, r1
 8000674:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <MX_GPIO_Init+0xf4>)
 8000676:	0019      	movs	r1, r3
 8000678:	0010      	movs	r0, r2
 800067a:	f000 fb99 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067e:	0021      	movs	r1, r4
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2201      	movs	r2, #1
 8000684:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2290      	movs	r2, #144	; 0x90
 800068a:	0352      	lsls	r2, r2, #13
 800068c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000694:	187a      	adds	r2, r7, r1
 8000696:	2390      	movs	r3, #144	; 0x90
 8000698:	05db      	lsls	r3, r3, #23
 800069a:	0011      	movs	r1, r2
 800069c:	0018      	movs	r0, r3
 800069e:	f000 fb87 	bl	8000db0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b009      	add	sp, #36	; 0x24
 80006a8:	bd90      	pop	{r4, r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	40021000 	.word	0x40021000
 80006b0:	000003e1 	.word	0x000003e1
 80006b4:	48000800 	.word	0x48000800

080006b8 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <StartBlink01+0x20>)
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	0018      	movs	r0, r3
 80006c6:	f000 fd08 	bl	80010da <HAL_GPIO_TogglePin>
	  osDelay(300);
 80006ca:	2396      	movs	r3, #150	; 0x96
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	0018      	movs	r0, r3
 80006d0:	f002 fcf6 	bl	80030c0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80006d4:	e7f4      	b.n	80006c0 <StartBlink01+0x8>
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	48000800 	.word	0x48000800

080006dc <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <StartBlink02+0x20>)
 80006e6:	2140      	movs	r1, #64	; 0x40
 80006e8:	0018      	movs	r0, r3
 80006ea:	f000 fcf6 	bl	80010da <HAL_GPIO_TogglePin>
    osDelay(1000);
 80006ee:	23fa      	movs	r3, #250	; 0xfa
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	0018      	movs	r0, r3
 80006f4:	f002 fce4 	bl	80030c0 <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80006f8:	e7f4      	b.n	80006e4 <StartBlink02+0x8>
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	48000800 	.word	0x48000800

08000700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000704:	b672      	cpsid	i
}
 8000706:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000708:	e7fe      	b.n	8000708 <Error_Handler+0x8>
	...

0800070c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <HAL_MspInit+0x50>)
 8000714:	699a      	ldr	r2, [r3, #24]
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <HAL_MspInit+0x50>)
 8000718:	2101      	movs	r1, #1
 800071a:	430a      	orrs	r2, r1
 800071c:	619a      	str	r2, [r3, #24]
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <HAL_MspInit+0x50>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	2201      	movs	r2, #1
 8000724:	4013      	ands	r3, r2
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <HAL_MspInit+0x50>)
 800072c:	69da      	ldr	r2, [r3, #28]
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <HAL_MspInit+0x50>)
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	0549      	lsls	r1, r1, #21
 8000734:	430a      	orrs	r2, r1
 8000736:	61da      	str	r2, [r3, #28]
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <HAL_MspInit+0x50>)
 800073a:	69da      	ldr	r2, [r3, #28]
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	055b      	lsls	r3, r3, #21
 8000740:	4013      	ands	r3, r2
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000746:	2302      	movs	r3, #2
 8000748:	425b      	negs	r3, r3
 800074a:	2200      	movs	r2, #0
 800074c:	2103      	movs	r1, #3
 800074e:	0018      	movs	r0, r3
 8000750:	f000 fb0c 	bl	8000d6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	b002      	add	sp, #8
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40021000 	.word	0x40021000

08000760 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b08b      	sub	sp, #44	; 0x2c
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	2414      	movs	r4, #20
 800076a:	193b      	adds	r3, r7, r4
 800076c:	0018      	movs	r0, r3
 800076e:	2314      	movs	r3, #20
 8000770:	001a      	movs	r2, r3
 8000772:	2100      	movs	r1, #0
 8000774:	f004 fdba 	bl	80052ec <memset>
  if(hi2c->Instance==I2C2)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <HAL_I2C_MspInit+0x90>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d132      	bne.n	80007e8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <HAL_I2C_MspInit+0x94>)
 8000784:	695a      	ldr	r2, [r3, #20]
 8000786:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <HAL_I2C_MspInit+0x94>)
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	02c9      	lsls	r1, r1, #11
 800078c:	430a      	orrs	r2, r1
 800078e:	615a      	str	r2, [r3, #20]
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <HAL_I2C_MspInit+0x94>)
 8000792:	695a      	ldr	r2, [r3, #20]
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	02db      	lsls	r3, r3, #11
 8000798:	4013      	ands	r3, r2
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	22c0      	movs	r2, #192	; 0xc0
 80007a2:	0112      	lsls	r2, r2, #4
 80007a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007a6:	0021      	movs	r1, r4
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2212      	movs	r2, #18
 80007ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2201      	movs	r2, #1
 80007b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2203      	movs	r2, #3
 80007b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2201      	movs	r2, #1
 80007be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	4a0d      	ldr	r2, [pc, #52]	; (80007f8 <HAL_I2C_MspInit+0x98>)
 80007c4:	0019      	movs	r1, r3
 80007c6:	0010      	movs	r0, r2
 80007c8:	f000 faf2 	bl	8000db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <HAL_I2C_MspInit+0x94>)
 80007ce:	69da      	ldr	r2, [r3, #28]
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <HAL_I2C_MspInit+0x94>)
 80007d2:	2180      	movs	r1, #128	; 0x80
 80007d4:	03c9      	lsls	r1, r1, #15
 80007d6:	430a      	orrs	r2, r1
 80007d8:	61da      	str	r2, [r3, #28]
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_I2C_MspInit+0x94>)
 80007dc:	69da      	ldr	r2, [r3, #28]
 80007de:	2380      	movs	r3, #128	; 0x80
 80007e0:	03db      	lsls	r3, r3, #15
 80007e2:	4013      	ands	r3, r2
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b00b      	add	sp, #44	; 0x2c
 80007ee:	bd90      	pop	{r4, r7, pc}
 80007f0:	40005800 	.word	0x40005800
 80007f4:	40021000 	.word	0x40021000
 80007f8:	48000400 	.word	0x48000400

080007fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b08b      	sub	sp, #44	; 0x2c
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	2414      	movs	r4, #20
 8000806:	193b      	adds	r3, r7, r4
 8000808:	0018      	movs	r0, r3
 800080a:	2314      	movs	r3, #20
 800080c:	001a      	movs	r2, r3
 800080e:	2100      	movs	r1, #0
 8000810:	f004 fd6c 	bl	80052ec <memset>
  if(hspi->Instance==SPI2)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a1c      	ldr	r2, [pc, #112]	; (800088c <HAL_SPI_MspInit+0x90>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d132      	bne.n	8000884 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <HAL_SPI_MspInit+0x94>)
 8000820:	69da      	ldr	r2, [r3, #28]
 8000822:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <HAL_SPI_MspInit+0x94>)
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	01c9      	lsls	r1, r1, #7
 8000828:	430a      	orrs	r2, r1
 800082a:	61da      	str	r2, [r3, #28]
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <HAL_SPI_MspInit+0x94>)
 800082e:	69da      	ldr	r2, [r3, #28]
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	01db      	lsls	r3, r3, #7
 8000834:	4013      	ands	r3, r2
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_SPI_MspInit+0x94>)
 800083c:	695a      	ldr	r2, [r3, #20]
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <HAL_SPI_MspInit+0x94>)
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	02c9      	lsls	r1, r1, #11
 8000844:	430a      	orrs	r2, r1
 8000846:	615a      	str	r2, [r3, #20]
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <HAL_SPI_MspInit+0x94>)
 800084a:	695a      	ldr	r2, [r3, #20]
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	02db      	lsls	r3, r3, #11
 8000850:	4013      	ands	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000856:	193b      	adds	r3, r7, r4
 8000858:	22e0      	movs	r2, #224	; 0xe0
 800085a:	0212      	lsls	r2, r2, #8
 800085c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	0021      	movs	r1, r4
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2202      	movs	r2, #2
 8000864:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2203      	movs	r2, #3
 8000870:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000878:	187b      	adds	r3, r7, r1
 800087a:	4a06      	ldr	r2, [pc, #24]	; (8000894 <HAL_SPI_MspInit+0x98>)
 800087c:	0019      	movs	r1, r3
 800087e:	0010      	movs	r0, r2
 8000880:	f000 fa96 	bl	8000db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	b00b      	add	sp, #44	; 0x2c
 800088a:	bd90      	pop	{r4, r7, pc}
 800088c:	40003800 	.word	0x40003800
 8000890:	40021000 	.word	0x40021000
 8000894:	48000400 	.word	0x48000400

08000898 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b08b      	sub	sp, #44	; 0x2c
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	2414      	movs	r4, #20
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	0018      	movs	r0, r3
 80008a6:	2314      	movs	r3, #20
 80008a8:	001a      	movs	r2, r3
 80008aa:	2100      	movs	r1, #0
 80008ac:	f004 fd1e 	bl	80052ec <memset>
  if(htsc->Instance==TSC)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a44      	ldr	r2, [pc, #272]	; (80009c8 <HAL_TSC_MspInit+0x130>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d000      	beq.n	80008bc <HAL_TSC_MspInit+0x24>
 80008ba:	e080      	b.n	80009be <HAL_TSC_MspInit+0x126>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 80008bc:	4b43      	ldr	r3, [pc, #268]	; (80009cc <HAL_TSC_MspInit+0x134>)
 80008be:	695a      	ldr	r2, [r3, #20]
 80008c0:	4b42      	ldr	r3, [pc, #264]	; (80009cc <HAL_TSC_MspInit+0x134>)
 80008c2:	2180      	movs	r1, #128	; 0x80
 80008c4:	0449      	lsls	r1, r1, #17
 80008c6:	430a      	orrs	r2, r1
 80008c8:	615a      	str	r2, [r3, #20]
 80008ca:	4b40      	ldr	r3, [pc, #256]	; (80009cc <HAL_TSC_MspInit+0x134>)
 80008cc:	695a      	ldr	r2, [r3, #20]
 80008ce:	2380      	movs	r3, #128	; 0x80
 80008d0:	045b      	lsls	r3, r3, #17
 80008d2:	4013      	ands	r3, r2
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b3c      	ldr	r3, [pc, #240]	; (80009cc <HAL_TSC_MspInit+0x134>)
 80008da:	695a      	ldr	r2, [r3, #20]
 80008dc:	4b3b      	ldr	r3, [pc, #236]	; (80009cc <HAL_TSC_MspInit+0x134>)
 80008de:	2180      	movs	r1, #128	; 0x80
 80008e0:	0289      	lsls	r1, r1, #10
 80008e2:	430a      	orrs	r2, r1
 80008e4:	615a      	str	r2, [r3, #20]
 80008e6:	4b39      	ldr	r3, [pc, #228]	; (80009cc <HAL_TSC_MspInit+0x134>)
 80008e8:	695a      	ldr	r2, [r3, #20]
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	029b      	lsls	r3, r3, #10
 80008ee:	4013      	ands	r3, r2
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f4:	4b35      	ldr	r3, [pc, #212]	; (80009cc <HAL_TSC_MspInit+0x134>)
 80008f6:	695a      	ldr	r2, [r3, #20]
 80008f8:	4b34      	ldr	r3, [pc, #208]	; (80009cc <HAL_TSC_MspInit+0x134>)
 80008fa:	2180      	movs	r1, #128	; 0x80
 80008fc:	02c9      	lsls	r1, r1, #11
 80008fe:	430a      	orrs	r2, r1
 8000900:	615a      	str	r2, [r3, #20]
 8000902:	4b32      	ldr	r3, [pc, #200]	; (80009cc <HAL_TSC_MspInit+0x134>)
 8000904:	695a      	ldr	r2, [r3, #20]
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	02db      	lsls	r3, r3, #11
 800090a:	4013      	ands	r3, r2
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000910:	193b      	adds	r3, r7, r4
 8000912:	2244      	movs	r2, #68	; 0x44
 8000914:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	193b      	adds	r3, r7, r4
 8000918:	2202      	movs	r2, #2
 800091a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	193b      	adds	r3, r7, r4
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	193b      	adds	r3, r7, r4
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000928:	193b      	adds	r3, r7, r4
 800092a:	2203      	movs	r2, #3
 800092c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	193a      	adds	r2, r7, r4
 8000930:	2390      	movs	r3, #144	; 0x90
 8000932:	05db      	lsls	r3, r3, #23
 8000934:	0011      	movs	r1, r2
 8000936:	0018      	movs	r0, r3
 8000938:	f000 fa3a 	bl	8000db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 800093c:	193b      	adds	r3, r7, r4
 800093e:	2288      	movs	r2, #136	; 0x88
 8000940:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000942:	193b      	adds	r3, r7, r4
 8000944:	2212      	movs	r2, #18
 8000946:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	193b      	adds	r3, r7, r4
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	193b      	adds	r3, r7, r4
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000954:	193b      	adds	r3, r7, r4
 8000956:	2203      	movs	r2, #3
 8000958:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	193a      	adds	r2, r7, r4
 800095c:	2390      	movs	r3, #144	; 0x90
 800095e:	05db      	lsls	r3, r3, #23
 8000960:	0011      	movs	r1, r2
 8000962:	0018      	movs	r0, r3
 8000964:	f000 fa24 	bl	8000db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000968:	193b      	adds	r3, r7, r4
 800096a:	2201      	movs	r2, #1
 800096c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	193b      	adds	r3, r7, r4
 8000970:	2202      	movs	r2, #2
 8000972:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	193b      	adds	r3, r7, r4
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000980:	193b      	adds	r3, r7, r4
 8000982:	2203      	movs	r2, #3
 8000984:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000986:	193b      	adds	r3, r7, r4
 8000988:	4a11      	ldr	r2, [pc, #68]	; (80009d0 <HAL_TSC_MspInit+0x138>)
 800098a:	0019      	movs	r1, r3
 800098c:	0010      	movs	r0, r2
 800098e:	f000 fa0f 	bl	8000db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000992:	0021      	movs	r1, r4
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2202      	movs	r2, #2
 8000998:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099a:	187b      	adds	r3, r7, r1
 800099c:	2212      	movs	r2, #18
 800099e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2203      	movs	r2, #3
 80009b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <HAL_TSC_MspInit+0x138>)
 80009b6:	0019      	movs	r1, r3
 80009b8:	0010      	movs	r0, r2
 80009ba:	f000 f9f9 	bl	8000db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b00b      	add	sp, #44	; 0x2c
 80009c4:	bd90      	pop	{r4, r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	40024000 	.word	0x40024000
 80009cc:	40021000 	.word	0x40021000
 80009d0:	48000400 	.word	0x48000400

080009d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b08b      	sub	sp, #44	; 0x2c
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	2414      	movs	r4, #20
 80009de:	193b      	adds	r3, r7, r4
 80009e0:	0018      	movs	r0, r3
 80009e2:	2314      	movs	r3, #20
 80009e4:	001a      	movs	r2, r3
 80009e6:	2100      	movs	r1, #0
 80009e8:	f004 fc80 	bl	80052ec <memset>
  if(huart->Instance==USART3)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a1c      	ldr	r2, [pc, #112]	; (8000a64 <HAL_UART_MspInit+0x90>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d132      	bne.n	8000a5c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <HAL_UART_MspInit+0x94>)
 80009f8:	69da      	ldr	r2, [r3, #28]
 80009fa:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <HAL_UART_MspInit+0x94>)
 80009fc:	2180      	movs	r1, #128	; 0x80
 80009fe:	02c9      	lsls	r1, r1, #11
 8000a00:	430a      	orrs	r2, r1
 8000a02:	61da      	str	r2, [r3, #28]
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <HAL_UART_MspInit+0x94>)
 8000a06:	69da      	ldr	r2, [r3, #28]
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	02db      	lsls	r3, r3, #11
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_UART_MspInit+0x94>)
 8000a14:	695a      	ldr	r2, [r3, #20]
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <HAL_UART_MspInit+0x94>)
 8000a18:	2180      	movs	r1, #128	; 0x80
 8000a1a:	0309      	lsls	r1, r1, #12
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	615a      	str	r2, [r3, #20]
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_UART_MspInit+0x94>)
 8000a22:	695a      	ldr	r2, [r3, #20]
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	031b      	lsls	r3, r3, #12
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	2281      	movs	r2, #129	; 0x81
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	0021      	movs	r1, r4
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	2203      	movs	r2, #3
 8000a48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	4a06      	ldr	r2, [pc, #24]	; (8000a6c <HAL_UART_MspInit+0x98>)
 8000a54:	0019      	movs	r1, r3
 8000a56:	0010      	movs	r0, r2
 8000a58:	f000 f9aa 	bl	8000db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b00b      	add	sp, #44	; 0x2c
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	40004800 	.word	0x40004800
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	48000800 	.word	0x48000800

08000a70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_PCD_MspInit+0x38>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d10d      	bne.n	8000a9e <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <HAL_PCD_MspInit+0x3c>)
 8000a84:	69da      	ldr	r2, [r3, #28]
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_PCD_MspInit+0x3c>)
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	0409      	lsls	r1, r1, #16
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	61da      	str	r2, [r3, #28]
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_PCD_MspInit+0x3c>)
 8000a92:	69da      	ldr	r2, [r3, #28]
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	041b      	lsls	r3, r3, #16
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b004      	add	sp, #16
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	40005c00 	.word	0x40005c00
 8000aac:	40021000 	.word	0x40021000

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <HardFault_Handler+0x4>

08000abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac0:	f000 f882 	bl	8000bc8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ac4:	f003 fda0 	bl	8004608 <xTaskGetSchedulerState>
 8000ac8:	0003      	movs	r3, r0
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d001      	beq.n	8000ad2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ace:	f004 fa2b 	bl	8004f28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ae4:	480d      	ldr	r0, [pc, #52]	; (8000b1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ae6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ae8:	f7ff fff6 	bl	8000ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aee:	490d      	ldr	r1, [pc, #52]	; (8000b24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <LoopForever+0xe>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b04:	4c0a      	ldr	r4, [pc, #40]	; (8000b30 <LoopForever+0x16>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b12:	f004 fbf3 	bl	80052fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b16:	f7ff fb8b 	bl	8000230 <main>

08000b1a <LoopForever>:

LoopForever:
    b LoopForever
 8000b1a:	e7fe      	b.n	8000b1a <LoopForever>
  ldr   r0, =_estack
 8000b1c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b28:	08005448 	.word	0x08005448
  ldr r2, =_sbss
 8000b2c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b30:	20001df0 	.word	0x20001df0

08000b34 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC1_COMP_IRQHandler>
	...

08000b38 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <HAL_Init+0x24>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_Init+0x24>)
 8000b42:	2110      	movs	r1, #16
 8000b44:	430a      	orrs	r2, r1
 8000b46:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b48:	2003      	movs	r0, #3
 8000b4a:	f000 f809 	bl	8000b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b4e:	f7ff fddd 	bl	800070c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	0018      	movs	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	40022000 	.word	0x40022000

08000b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <HAL_InitTick+0x5c>)
 8000b6a:	681c      	ldr	r4, [r3, #0]
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <HAL_InitTick+0x60>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	0019      	movs	r1, r3
 8000b72:	23fa      	movs	r3, #250	; 0xfa
 8000b74:	0098      	lsls	r0, r3, #2
 8000b76:	f7ff facf 	bl	8000118 <__udivsi3>
 8000b7a:	0003      	movs	r3, r0
 8000b7c:	0019      	movs	r1, r3
 8000b7e:	0020      	movs	r0, r4
 8000b80:	f7ff faca 	bl	8000118 <__udivsi3>
 8000b84:	0003      	movs	r3, r0
 8000b86:	0018      	movs	r0, r3
 8000b88:	f000 f905 	bl	8000d96 <HAL_SYSTICK_Config>
 8000b8c:	1e03      	subs	r3, r0, #0
 8000b8e:	d001      	beq.n	8000b94 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e00f      	b.n	8000bb4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	d80b      	bhi.n	8000bb2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	425b      	negs	r3, r3
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f000 f8e2 	bl	8000d6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_InitTick+0x64>)
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b003      	add	sp, #12
 8000bba:	bd90      	pop	{r4, r7, pc}
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_IncTick+0x1c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_IncTick+0x20>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	18d2      	adds	r2, r2, r3
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_IncTick+0x20>)
 8000bda:	601a      	str	r2, [r3, #0]
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	20000008 	.word	0x20000008
 8000be8:	200004ac 	.word	0x200004ac

08000bec <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf0:	4b02      	ldr	r3, [pc, #8]	; (8000bfc <HAL_GetTick+0x10>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	200004ac 	.word	0x200004ac

08000c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c08:	f7ff fff0 	bl	8000bec <HAL_GetTick>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3301      	adds	r3, #1
 8000c18:	d005      	beq.n	8000c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_Delay+0x44>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	001a      	movs	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	189b      	adds	r3, r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	f7ff ffe0 	bl	8000bec <HAL_GetTick>
 8000c2c:	0002      	movs	r2, r0
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d8f7      	bhi.n	8000c28 <HAL_Delay+0x28>
  {
  }
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b004      	add	sp, #16
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	20000008 	.word	0x20000008

08000c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	0002      	movs	r2, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c5c:	d828      	bhi.n	8000cb0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c5e:	4a2f      	ldr	r2, [pc, #188]	; (8000d1c <__NVIC_SetPriority+0xd4>)
 8000c60:	1dfb      	adds	r3, r7, #7
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b25b      	sxtb	r3, r3
 8000c66:	089b      	lsrs	r3, r3, #2
 8000c68:	33c0      	adds	r3, #192	; 0xc0
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	589b      	ldr	r3, [r3, r2]
 8000c6e:	1dfa      	adds	r2, r7, #7
 8000c70:	7812      	ldrb	r2, [r2, #0]
 8000c72:	0011      	movs	r1, r2
 8000c74:	2203      	movs	r2, #3
 8000c76:	400a      	ands	r2, r1
 8000c78:	00d2      	lsls	r2, r2, #3
 8000c7a:	21ff      	movs	r1, #255	; 0xff
 8000c7c:	4091      	lsls	r1, r2
 8000c7e:	000a      	movs	r2, r1
 8000c80:	43d2      	mvns	r2, r2
 8000c82:	401a      	ands	r2, r3
 8000c84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	019b      	lsls	r3, r3, #6
 8000c8a:	22ff      	movs	r2, #255	; 0xff
 8000c8c:	401a      	ands	r2, r3
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	0018      	movs	r0, r3
 8000c94:	2303      	movs	r3, #3
 8000c96:	4003      	ands	r3, r0
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c9c:	481f      	ldr	r0, [pc, #124]	; (8000d1c <__NVIC_SetPriority+0xd4>)
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	089b      	lsrs	r3, r3, #2
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	33c0      	adds	r3, #192	; 0xc0
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cae:	e031      	b.n	8000d14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb0:	4a1b      	ldr	r2, [pc, #108]	; (8000d20 <__NVIC_SetPriority+0xd8>)
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	0019      	movs	r1, r3
 8000cb8:	230f      	movs	r3, #15
 8000cba:	400b      	ands	r3, r1
 8000cbc:	3b08      	subs	r3, #8
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	3306      	adds	r3, #6
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	18d3      	adds	r3, r2, r3
 8000cc6:	3304      	adds	r3, #4
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	1dfa      	adds	r2, r7, #7
 8000ccc:	7812      	ldrb	r2, [r2, #0]
 8000cce:	0011      	movs	r1, r2
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	400a      	ands	r2, r1
 8000cd4:	00d2      	lsls	r2, r2, #3
 8000cd6:	21ff      	movs	r1, #255	; 0xff
 8000cd8:	4091      	lsls	r1, r2
 8000cda:	000a      	movs	r2, r1
 8000cdc:	43d2      	mvns	r2, r2
 8000cde:	401a      	ands	r2, r3
 8000ce0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	019b      	lsls	r3, r3, #6
 8000ce6:	22ff      	movs	r2, #255	; 0xff
 8000ce8:	401a      	ands	r2, r3
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	0018      	movs	r0, r3
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	4003      	ands	r3, r0
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf8:	4809      	ldr	r0, [pc, #36]	; (8000d20 <__NVIC_SetPriority+0xd8>)
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	001c      	movs	r4, r3
 8000d00:	230f      	movs	r3, #15
 8000d02:	4023      	ands	r3, r4
 8000d04:	3b08      	subs	r3, #8
 8000d06:	089b      	lsrs	r3, r3, #2
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	3306      	adds	r3, #6
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	18c3      	adds	r3, r0, r3
 8000d10:	3304      	adds	r3, #4
 8000d12:	601a      	str	r2, [r3, #0]
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b003      	add	sp, #12
 8000d1a:	bd90      	pop	{r4, r7, pc}
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	1e5a      	subs	r2, r3, #1
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	045b      	lsls	r3, r3, #17
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d301      	bcc.n	8000d3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e010      	b.n	8000d5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <SysTick_Config+0x44>)
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	3a01      	subs	r2, #1
 8000d42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d44:	2301      	movs	r3, #1
 8000d46:	425b      	negs	r3, r3
 8000d48:	2103      	movs	r1, #3
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f7ff ff7c 	bl	8000c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <SysTick_Config+0x44>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SysTick_Config+0x44>)
 8000d58:	2207      	movs	r2, #7
 8000d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	0018      	movs	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b002      	add	sp, #8
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	210f      	movs	r1, #15
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	1c02      	adds	r2, r0, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b25b      	sxtb	r3, r3
 8000d86:	0011      	movs	r1, r2
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f7ff ff5d 	bl	8000c48 <__NVIC_SetPriority>
}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b004      	add	sp, #16
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff ffbf 	bl	8000d24 <SysTick_Config>
 8000da6:	0003      	movs	r3, r0
}
 8000da8:	0018      	movs	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b002      	add	sp, #8
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dbe:	e155      	b.n	800106c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	4091      	lsls	r1, r2
 8000dca:	000a      	movs	r2, r1
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d100      	bne.n	8000dd8 <HAL_GPIO_Init+0x28>
 8000dd6:	e146      	b.n	8001066 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2203      	movs	r2, #3
 8000dde:	4013      	ands	r3, r2
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d005      	beq.n	8000df0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2203      	movs	r2, #3
 8000dea:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d130      	bne.n	8000e52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	409a      	lsls	r2, r3
 8000dfe:	0013      	movs	r3, r2
 8000e00:	43da      	mvns	r2, r3
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	409a      	lsls	r2, r3
 8000e12:	0013      	movs	r3, r2
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e26:	2201      	movs	r2, #1
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	091b      	lsrs	r3, r3, #4
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
 8000e44:	0013      	movs	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2203      	movs	r2, #3
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	d017      	beq.n	8000e8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2203      	movs	r2, #3
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d123      	bne.n	8000ee2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	08da      	lsrs	r2, r3, #3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3208      	adds	r2, #8
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	58d3      	ldr	r3, [r2, r3]
 8000ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	2207      	movs	r2, #7
 8000eac:	4013      	ands	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	220f      	movs	r2, #15
 8000eb2:	409a      	lsls	r2, r3
 8000eb4:	0013      	movs	r3, r2
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	691a      	ldr	r2, [r3, #16]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	2107      	movs	r1, #7
 8000ec6:	400b      	ands	r3, r1
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	0013      	movs	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	08da      	lsrs	r2, r3, #3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3208      	adds	r2, #8
 8000edc:	0092      	lsls	r2, r2, #2
 8000ede:	6939      	ldr	r1, [r7, #16]
 8000ee0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	2203      	movs	r2, #3
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	0013      	movs	r3, r2
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2203      	movs	r2, #3
 8000f00:	401a      	ands	r2, r3
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	409a      	lsls	r2, r3
 8000f08:	0013      	movs	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	23c0      	movs	r3, #192	; 0xc0
 8000f1c:	029b      	lsls	r3, r3, #10
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d100      	bne.n	8000f24 <HAL_GPIO_Init+0x174>
 8000f22:	e0a0      	b.n	8001066 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f24:	4b57      	ldr	r3, [pc, #348]	; (8001084 <HAL_GPIO_Init+0x2d4>)
 8000f26:	699a      	ldr	r2, [r3, #24]
 8000f28:	4b56      	ldr	r3, [pc, #344]	; (8001084 <HAL_GPIO_Init+0x2d4>)
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	619a      	str	r2, [r3, #24]
 8000f30:	4b54      	ldr	r3, [pc, #336]	; (8001084 <HAL_GPIO_Init+0x2d4>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	2201      	movs	r2, #1
 8000f36:	4013      	ands	r3, r2
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f3c:	4a52      	ldr	r2, [pc, #328]	; (8001088 <HAL_GPIO_Init+0x2d8>)
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	3302      	adds	r3, #2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	589b      	ldr	r3, [r3, r2]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	4013      	ands	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	220f      	movs	r2, #15
 8000f54:	409a      	lsls	r2, r3
 8000f56:	0013      	movs	r3, r2
 8000f58:	43da      	mvns	r2, r3
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	2390      	movs	r3, #144	; 0x90
 8000f64:	05db      	lsls	r3, r3, #23
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d019      	beq.n	8000f9e <HAL_GPIO_Init+0x1ee>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a47      	ldr	r2, [pc, #284]	; (800108c <HAL_GPIO_Init+0x2dc>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d013      	beq.n	8000f9a <HAL_GPIO_Init+0x1ea>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a46      	ldr	r2, [pc, #280]	; (8001090 <HAL_GPIO_Init+0x2e0>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d00d      	beq.n	8000f96 <HAL_GPIO_Init+0x1e6>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a45      	ldr	r2, [pc, #276]	; (8001094 <HAL_GPIO_Init+0x2e4>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d007      	beq.n	8000f92 <HAL_GPIO_Init+0x1e2>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a44      	ldr	r2, [pc, #272]	; (8001098 <HAL_GPIO_Init+0x2e8>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d101      	bne.n	8000f8e <HAL_GPIO_Init+0x1de>
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	e008      	b.n	8000fa0 <HAL_GPIO_Init+0x1f0>
 8000f8e:	2305      	movs	r3, #5
 8000f90:	e006      	b.n	8000fa0 <HAL_GPIO_Init+0x1f0>
 8000f92:	2303      	movs	r3, #3
 8000f94:	e004      	b.n	8000fa0 <HAL_GPIO_Init+0x1f0>
 8000f96:	2302      	movs	r3, #2
 8000f98:	e002      	b.n	8000fa0 <HAL_GPIO_Init+0x1f0>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <HAL_GPIO_Init+0x1f0>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	2103      	movs	r1, #3
 8000fa4:	400a      	ands	r2, r1
 8000fa6:	0092      	lsls	r2, r2, #2
 8000fa8:	4093      	lsls	r3, r2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fb0:	4935      	ldr	r1, [pc, #212]	; (8001088 <HAL_GPIO_Init+0x2d8>)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fbe:	4b37      	ldr	r3, [pc, #220]	; (800109c <HAL_GPIO_Init+0x2ec>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	2380      	movs	r3, #128	; 0x80
 8000fd4:	035b      	lsls	r3, r3, #13
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	; (800109c <HAL_GPIO_Init+0x2ec>)
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <HAL_GPIO_Init+0x2ec>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	43da      	mvns	r2, r3
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	039b      	lsls	r3, r3, #14
 8001000:	4013      	ands	r3, r2
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <HAL_GPIO_Init+0x2ec>)
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001012:	4b22      	ldr	r3, [pc, #136]	; (800109c <HAL_GPIO_Init+0x2ec>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	43da      	mvns	r2, r3
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	029b      	lsls	r3, r3, #10
 800102a:	4013      	ands	r3, r2
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_GPIO_Init+0x2ec>)
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <HAL_GPIO_Init+0x2ec>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	43da      	mvns	r2, r3
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	025b      	lsls	r3, r3, #9
 8001054:	4013      	ands	r3, r2
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_GPIO_Init+0x2ec>)
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	40da      	lsrs	r2, r3
 8001074:	1e13      	subs	r3, r2, #0
 8001076:	d000      	beq.n	800107a <HAL_GPIO_Init+0x2ca>
 8001078:	e6a2      	b.n	8000dc0 <HAL_GPIO_Init+0x10>
  } 
}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	b006      	add	sp, #24
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40021000 	.word	0x40021000
 8001088:	40010000 	.word	0x40010000
 800108c:	48000400 	.word	0x48000400
 8001090:	48000800 	.word	0x48000800
 8001094:	48000c00 	.word	0x48000c00
 8001098:	48001000 	.word	0x48001000
 800109c:	40010400 	.word	0x40010400

080010a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	0008      	movs	r0, r1
 80010aa:	0011      	movs	r1, r2
 80010ac:	1cbb      	adds	r3, r7, #2
 80010ae:	1c02      	adds	r2, r0, #0
 80010b0:	801a      	strh	r2, [r3, #0]
 80010b2:	1c7b      	adds	r3, r7, #1
 80010b4:	1c0a      	adds	r2, r1, #0
 80010b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010b8:	1c7b      	adds	r3, r7, #1
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d004      	beq.n	80010ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010c0:	1cbb      	adds	r3, r7, #2
 80010c2:	881a      	ldrh	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010c8:	e003      	b.n	80010d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ca:	1cbb      	adds	r3, r7, #2
 80010cc:	881a      	ldrh	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b002      	add	sp, #8
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b084      	sub	sp, #16
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	000a      	movs	r2, r1
 80010e4:	1cbb      	adds	r3, r7, #2
 80010e6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010ee:	1cbb      	adds	r3, r7, #2
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4013      	ands	r3, r2
 80010f6:	041a      	lsls	r2, r3, #16
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	1cb9      	adds	r1, r7, #2
 80010fe:	8809      	ldrh	r1, [r1, #0]
 8001100:	400b      	ands	r3, r1
 8001102:	431a      	orrs	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	619a      	str	r2, [r3, #24]
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	b004      	add	sp, #16
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e082      	b.n	8001228 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2241      	movs	r2, #65	; 0x41
 8001126:	5c9b      	ldrb	r3, [r3, r2]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d107      	bne.n	800113e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2240      	movs	r2, #64	; 0x40
 8001132:	2100      	movs	r1, #0
 8001134:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	0018      	movs	r0, r3
 800113a:	f7ff fb11 	bl	8000760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2241      	movs	r2, #65	; 0x41
 8001142:	2124      	movs	r1, #36	; 0x24
 8001144:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2101      	movs	r1, #1
 8001152:	438a      	bics	r2, r1
 8001154:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4934      	ldr	r1, [pc, #208]	; (8001230 <HAL_I2C_Init+0x120>)
 8001160:	400a      	ands	r2, r1
 8001162:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4931      	ldr	r1, [pc, #196]	; (8001234 <HAL_I2C_Init+0x124>)
 8001170:	400a      	ands	r2, r1
 8001172:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d108      	bne.n	800118e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2180      	movs	r1, #128	; 0x80
 8001186:	0209      	lsls	r1, r1, #8
 8001188:	430a      	orrs	r2, r1
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	e007      	b.n	800119e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2184      	movs	r1, #132	; 0x84
 8001198:	0209      	lsls	r1, r1, #8
 800119a:	430a      	orrs	r2, r1
 800119c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d104      	bne.n	80011b0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2280      	movs	r2, #128	; 0x80
 80011ac:	0112      	lsls	r2, r2, #4
 80011ae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	491f      	ldr	r1, [pc, #124]	; (8001238 <HAL_I2C_Init+0x128>)
 80011bc:	430a      	orrs	r2, r1
 80011be:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	491a      	ldr	r1, [pc, #104]	; (8001234 <HAL_I2C_Init+0x124>)
 80011cc:	400a      	ands	r2, r1
 80011ce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	431a      	orrs	r2, r3
 80011da:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69d9      	ldr	r1, [r3, #28]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a1a      	ldr	r2, [r3, #32]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2101      	movs	r1, #1
 8001206:	430a      	orrs	r2, r1
 8001208:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2241      	movs	r2, #65	; 0x41
 8001214:	2120      	movs	r1, #32
 8001216:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2242      	movs	r2, #66	; 0x42
 8001222:	2100      	movs	r1, #0
 8001224:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	0018      	movs	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	b002      	add	sp, #8
 800122e:	bd80      	pop	{r7, pc}
 8001230:	f0ffffff 	.word	0xf0ffffff
 8001234:	ffff7fff 	.word	0xffff7fff
 8001238:	02008000 	.word	0x02008000

0800123c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2241      	movs	r2, #65	; 0x41
 800124a:	5c9b      	ldrb	r3, [r3, r2]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b20      	cmp	r3, #32
 8001250:	d138      	bne.n	80012c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2240      	movs	r2, #64	; 0x40
 8001256:	5c9b      	ldrb	r3, [r3, r2]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d101      	bne.n	8001260 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800125c:	2302      	movs	r3, #2
 800125e:	e032      	b.n	80012c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2240      	movs	r2, #64	; 0x40
 8001264:	2101      	movs	r1, #1
 8001266:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2241      	movs	r2, #65	; 0x41
 800126c:	2124      	movs	r1, #36	; 0x24
 800126e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2101      	movs	r1, #1
 800127c:	438a      	bics	r2, r1
 800127e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4911      	ldr	r1, [pc, #68]	; (80012d0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800128c:	400a      	ands	r2, r1
 800128e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6819      	ldr	r1, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	430a      	orrs	r2, r1
 800129e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2101      	movs	r1, #1
 80012ac:	430a      	orrs	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2241      	movs	r2, #65	; 0x41
 80012b4:	2120      	movs	r1, #32
 80012b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2240      	movs	r2, #64	; 0x40
 80012bc:	2100      	movs	r1, #0
 80012be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	e000      	b.n	80012c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80012c4:	2302      	movs	r3, #2
  }
}
 80012c6:	0018      	movs	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b002      	add	sp, #8
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	ffffefff 	.word	0xffffefff

080012d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2241      	movs	r2, #65	; 0x41
 80012e2:	5c9b      	ldrb	r3, [r3, r2]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b20      	cmp	r3, #32
 80012e8:	d139      	bne.n	800135e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2240      	movs	r2, #64	; 0x40
 80012ee:	5c9b      	ldrb	r3, [r3, r2]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d101      	bne.n	80012f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80012f4:	2302      	movs	r3, #2
 80012f6:	e033      	b.n	8001360 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2240      	movs	r2, #64	; 0x40
 80012fc:	2101      	movs	r1, #1
 80012fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2241      	movs	r2, #65	; 0x41
 8001304:	2124      	movs	r1, #36	; 0x24
 8001306:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2101      	movs	r1, #1
 8001314:	438a      	bics	r2, r1
 8001316:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4a11      	ldr	r2, [pc, #68]	; (8001368 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001324:	4013      	ands	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2101      	movs	r1, #1
 8001346:	430a      	orrs	r2, r1
 8001348:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2241      	movs	r2, #65	; 0x41
 800134e:	2120      	movs	r1, #32
 8001350:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2240      	movs	r2, #64	; 0x40
 8001356:	2100      	movs	r1, #0
 8001358:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800135e:	2302      	movs	r3, #2
  }
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	b004      	add	sp, #16
 8001366:	bd80      	pop	{r7, pc}
 8001368:	fffff0ff 	.word	0xfffff0ff

0800136c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800136c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136e:	b08b      	sub	sp, #44	; 0x2c
 8001370:	af06      	add	r7, sp, #24
 8001372:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e0f0      	b.n	8001560 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a79      	ldr	r2, [pc, #484]	; (8001568 <HAL_PCD_Init+0x1fc>)
 8001382:	5c9b      	ldrb	r3, [r3, r2]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d108      	bne.n	800139c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	23aa      	movs	r3, #170	; 0xaa
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	2100      	movs	r1, #0
 8001392:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	0018      	movs	r0, r3
 8001398:	f7ff fb6a 	bl	8000a70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a72      	ldr	r2, [pc, #456]	; (8001568 <HAL_PCD_Init+0x1fc>)
 80013a0:	2103      	movs	r1, #3
 80013a2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	0018      	movs	r0, r3
 80013aa:	f001 fd45 	bl	8002e38 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ae:	230f      	movs	r3, #15
 80013b0:	18fb      	adds	r3, r7, r3
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
 80013b6:	e049      	b.n	800144c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013b8:	200f      	movs	r0, #15
 80013ba:	183b      	adds	r3, r7, r0
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	0013      	movs	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	189b      	adds	r3, r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	18cb      	adds	r3, r1, r3
 80013cc:	3301      	adds	r3, #1
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013d2:	183b      	adds	r3, r7, r0
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	0013      	movs	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	189b      	adds	r3, r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	183a      	adds	r2, r7, r0
 80013e4:	7812      	ldrb	r2, [r2, #0]
 80013e6:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013e8:	183b      	adds	r3, r7, r0
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	0013      	movs	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	189b      	adds	r3, r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	18cb      	adds	r3, r1, r3
 80013fa:	3303      	adds	r3, #3
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001400:	183b      	adds	r3, r7, r0
 8001402:	781a      	ldrb	r2, [r3, #0]
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	0013      	movs	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	189b      	adds	r3, r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	18cb      	adds	r3, r1, r3
 8001410:	3338      	adds	r3, #56	; 0x38
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001416:	183b      	adds	r3, r7, r0
 8001418:	781a      	ldrb	r2, [r3, #0]
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	0013      	movs	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	189b      	adds	r3, r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	18cb      	adds	r3, r1, r3
 8001426:	333c      	adds	r3, #60	; 0x3c
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800142c:	183b      	adds	r3, r7, r0
 800142e:	781a      	ldrb	r2, [r3, #0]
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	0013      	movs	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	189b      	adds	r3, r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	18cb      	adds	r3, r1, r3
 800143c:	3340      	adds	r3, #64	; 0x40
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001442:	183b      	adds	r3, r7, r0
 8001444:	781a      	ldrb	r2, [r3, #0]
 8001446:	183b      	adds	r3, r7, r0
 8001448:	3201      	adds	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
 800144c:	210f      	movs	r1, #15
 800144e:	187b      	adds	r3, r7, r1
 8001450:	781a      	ldrb	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	429a      	cmp	r2, r3
 8001458:	d3ae      	bcc.n	80013b8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800145a:	187b      	adds	r3, r7, r1
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
 8001460:	e056      	b.n	8001510 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001462:	240f      	movs	r4, #15
 8001464:	193b      	adds	r3, r7, r4
 8001466:	781a      	ldrb	r2, [r3, #0]
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	236a      	movs	r3, #106	; 0x6a
 800146c:	33ff      	adds	r3, #255	; 0xff
 800146e:	0019      	movs	r1, r3
 8001470:	0013      	movs	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	189b      	adds	r3, r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	18c3      	adds	r3, r0, r3
 800147a:	185b      	adds	r3, r3, r1
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001480:	193b      	adds	r3, r7, r4
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	23b4      	movs	r3, #180	; 0xb4
 8001488:	0059      	lsls	r1, r3, #1
 800148a:	0013      	movs	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	189b      	adds	r3, r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	18c3      	adds	r3, r0, r3
 8001494:	185b      	adds	r3, r3, r1
 8001496:	193a      	adds	r2, r7, r4
 8001498:	7812      	ldrb	r2, [r2, #0]
 800149a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800149c:	193b      	adds	r3, r7, r4
 800149e:	781a      	ldrb	r2, [r3, #0]
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	236c      	movs	r3, #108	; 0x6c
 80014a4:	33ff      	adds	r3, #255	; 0xff
 80014a6:	0019      	movs	r1, r3
 80014a8:	0013      	movs	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	189b      	adds	r3, r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	18c3      	adds	r3, r0, r3
 80014b2:	185b      	adds	r3, r3, r1
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014b8:	193b      	adds	r3, r7, r4
 80014ba:	781a      	ldrb	r2, [r3, #0]
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	23bc      	movs	r3, #188	; 0xbc
 80014c0:	0059      	lsls	r1, r3, #1
 80014c2:	0013      	movs	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	189b      	adds	r3, r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	18c3      	adds	r3, r0, r3
 80014cc:	185b      	adds	r3, r3, r1
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014d2:	193b      	adds	r3, r7, r4
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	23be      	movs	r3, #190	; 0xbe
 80014da:	0059      	lsls	r1, r3, #1
 80014dc:	0013      	movs	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	189b      	adds	r3, r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	18c3      	adds	r3, r0, r3
 80014e6:	185b      	adds	r3, r3, r1
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014ec:	193b      	adds	r3, r7, r4
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	23c0      	movs	r3, #192	; 0xc0
 80014f4:	0059      	lsls	r1, r3, #1
 80014f6:	0013      	movs	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	189b      	adds	r3, r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	18c3      	adds	r3, r0, r3
 8001500:	185b      	adds	r3, r3, r1
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001506:	193b      	adds	r3, r7, r4
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	193b      	adds	r3, r7, r4
 800150c:	3201      	adds	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
 8001510:	230f      	movs	r3, #15
 8001512:	18fb      	adds	r3, r7, r3
 8001514:	781a      	ldrb	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	429a      	cmp	r2, r3
 800151c:	d3a1      	bcc.n	8001462 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6818      	ldr	r0, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	466a      	mov	r2, sp
 8001526:	0011      	movs	r1, r2
 8001528:	001a      	movs	r2, r3
 800152a:	3210      	adds	r2, #16
 800152c:	ca70      	ldmia	r2!, {r4, r5, r6}
 800152e:	c170      	stmia	r1!, {r4, r5, r6}
 8001530:	ca30      	ldmia	r2!, {r4, r5}
 8001532:	c130      	stmia	r1!, {r4, r5}
 8001534:	6859      	ldr	r1, [r3, #4]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	f001 fc97 	bl	8002e6c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2224      	movs	r2, #36	; 0x24
 8001542:	2100      	movs	r1, #0
 8001544:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <HAL_PCD_Init+0x1fc>)
 800154a:	2101      	movs	r1, #1
 800154c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d103      	bne.n	800155e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	0018      	movs	r0, r3
 800155a:	f000 f807 	bl	800156c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	0018      	movs	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	b005      	add	sp, #20
 8001566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001568:	000002a9 	.word	0x000002a9

0800156c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	23ba      	movs	r3, #186	; 0xba
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	2101      	movs	r1, #1
 8001582:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	23b8      	movs	r3, #184	; 0xb8
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	2100      	movs	r1, #0
 800158c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2254      	movs	r2, #84	; 0x54
 8001592:	5a9b      	ldrh	r3, [r3, r2]
 8001594:	b29b      	uxth	r3, r3
 8001596:	2201      	movs	r2, #1
 8001598:	4313      	orrs	r3, r2
 800159a:	b299      	uxth	r1, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2254      	movs	r2, #84	; 0x54
 80015a0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2254      	movs	r2, #84	; 0x54
 80015a6:	5a9b      	ldrh	r3, [r3, r2]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	2202      	movs	r2, #2
 80015ac:	4313      	orrs	r3, r2
 80015ae:	b299      	uxth	r1, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2254      	movs	r2, #84	; 0x54
 80015b4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	0018      	movs	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b004      	add	sp, #16
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d102      	bne.n	80015d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f000 fb76 	bl	8001cc0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2201      	movs	r2, #1
 80015da:	4013      	ands	r3, r2
 80015dc:	d100      	bne.n	80015e0 <HAL_RCC_OscConfig+0x20>
 80015de:	e08e      	b.n	80016fe <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015e0:	4bc5      	ldr	r3, [pc, #788]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	220c      	movs	r2, #12
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d00e      	beq.n	800160a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015ec:	4bc2      	ldr	r3, [pc, #776]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	220c      	movs	r2, #12
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d117      	bne.n	8001628 <HAL_RCC_OscConfig+0x68>
 80015f8:	4bbf      	ldr	r3, [pc, #764]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	23c0      	movs	r3, #192	; 0xc0
 80015fe:	025b      	lsls	r3, r3, #9
 8001600:	401a      	ands	r2, r3
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	025b      	lsls	r3, r3, #9
 8001606:	429a      	cmp	r2, r3
 8001608:	d10e      	bne.n	8001628 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160a:	4bbb      	ldr	r3, [pc, #748]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	029b      	lsls	r3, r3, #10
 8001612:	4013      	ands	r3, r2
 8001614:	d100      	bne.n	8001618 <HAL_RCC_OscConfig+0x58>
 8001616:	e071      	b.n	80016fc <HAL_RCC_OscConfig+0x13c>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d000      	beq.n	8001622 <HAL_RCC_OscConfig+0x62>
 8001620:	e06c      	b.n	80016fc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	f000 fb4c 	bl	8001cc0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d107      	bne.n	8001640 <HAL_RCC_OscConfig+0x80>
 8001630:	4bb1      	ldr	r3, [pc, #708]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4bb0      	ldr	r3, [pc, #704]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 8001636:	2180      	movs	r1, #128	; 0x80
 8001638:	0249      	lsls	r1, r1, #9
 800163a:	430a      	orrs	r2, r1
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	e02f      	b.n	80016a0 <HAL_RCC_OscConfig+0xe0>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10c      	bne.n	8001662 <HAL_RCC_OscConfig+0xa2>
 8001648:	4bab      	ldr	r3, [pc, #684]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4baa      	ldr	r3, [pc, #680]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 800164e:	49ab      	ldr	r1, [pc, #684]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 8001650:	400a      	ands	r2, r1
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	4ba8      	ldr	r3, [pc, #672]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4ba7      	ldr	r3, [pc, #668]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 800165a:	49a9      	ldr	r1, [pc, #676]	; (8001900 <HAL_RCC_OscConfig+0x340>)
 800165c:	400a      	ands	r2, r1
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e01e      	b.n	80016a0 <HAL_RCC_OscConfig+0xe0>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b05      	cmp	r3, #5
 8001668:	d10e      	bne.n	8001688 <HAL_RCC_OscConfig+0xc8>
 800166a:	4ba3      	ldr	r3, [pc, #652]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4ba2      	ldr	r3, [pc, #648]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 8001670:	2180      	movs	r1, #128	; 0x80
 8001672:	02c9      	lsls	r1, r1, #11
 8001674:	430a      	orrs	r2, r1
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	4b9f      	ldr	r3, [pc, #636]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b9e      	ldr	r3, [pc, #632]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 800167e:	2180      	movs	r1, #128	; 0x80
 8001680:	0249      	lsls	r1, r1, #9
 8001682:	430a      	orrs	r2, r1
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	e00b      	b.n	80016a0 <HAL_RCC_OscConfig+0xe0>
 8001688:	4b9b      	ldr	r3, [pc, #620]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b9a      	ldr	r3, [pc, #616]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 800168e:	499b      	ldr	r1, [pc, #620]	; (80018fc <HAL_RCC_OscConfig+0x33c>)
 8001690:	400a      	ands	r2, r1
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	4b98      	ldr	r3, [pc, #608]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b97      	ldr	r3, [pc, #604]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 800169a:	4999      	ldr	r1, [pc, #612]	; (8001900 <HAL_RCC_OscConfig+0x340>)
 800169c:	400a      	ands	r2, r1
 800169e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d014      	beq.n	80016d2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff faa0 	bl	8000bec <HAL_GetTick>
 80016ac:	0003      	movs	r3, r0
 80016ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b2:	f7ff fa9b 	bl	8000bec <HAL_GetTick>
 80016b6:	0002      	movs	r2, r0
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b64      	cmp	r3, #100	; 0x64
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e2fd      	b.n	8001cc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c4:	4b8c      	ldr	r3, [pc, #560]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	029b      	lsls	r3, r3, #10
 80016cc:	4013      	ands	r3, r2
 80016ce:	d0f0      	beq.n	80016b2 <HAL_RCC_OscConfig+0xf2>
 80016d0:	e015      	b.n	80016fe <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fa8b 	bl	8000bec <HAL_GetTick>
 80016d6:	0003      	movs	r3, r0
 80016d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fa86 	bl	8000bec <HAL_GetTick>
 80016e0:	0002      	movs	r2, r0
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e2e8      	b.n	8001cc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ee:	4b82      	ldr	r3, [pc, #520]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	029b      	lsls	r3, r3, #10
 80016f6:	4013      	ands	r3, r2
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x11c>
 80016fa:	e000      	b.n	80016fe <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2202      	movs	r2, #2
 8001704:	4013      	ands	r3, r2
 8001706:	d100      	bne.n	800170a <HAL_RCC_OscConfig+0x14a>
 8001708:	e06c      	b.n	80017e4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800170a:	4b7b      	ldr	r3, [pc, #492]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	220c      	movs	r2, #12
 8001710:	4013      	ands	r3, r2
 8001712:	d00e      	beq.n	8001732 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001714:	4b78      	ldr	r3, [pc, #480]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	220c      	movs	r2, #12
 800171a:	4013      	ands	r3, r2
 800171c:	2b08      	cmp	r3, #8
 800171e:	d11f      	bne.n	8001760 <HAL_RCC_OscConfig+0x1a0>
 8001720:	4b75      	ldr	r3, [pc, #468]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	23c0      	movs	r3, #192	; 0xc0
 8001726:	025b      	lsls	r3, r3, #9
 8001728:	401a      	ands	r2, r3
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	429a      	cmp	r2, r3
 8001730:	d116      	bne.n	8001760 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001732:	4b71      	ldr	r3, [pc, #452]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2202      	movs	r2, #2
 8001738:	4013      	ands	r3, r2
 800173a:	d005      	beq.n	8001748 <HAL_RCC_OscConfig+0x188>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d001      	beq.n	8001748 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e2bb      	b.n	8001cc0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001748:	4b6b      	ldr	r3, [pc, #428]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	22f8      	movs	r2, #248	; 0xf8
 800174e:	4393      	bics	r3, r2
 8001750:	0019      	movs	r1, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	00da      	lsls	r2, r3, #3
 8001758:	4b67      	ldr	r3, [pc, #412]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 800175a:	430a      	orrs	r2, r1
 800175c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175e:	e041      	b.n	80017e4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d024      	beq.n	80017b2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001768:	4b63      	ldr	r3, [pc, #396]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b62      	ldr	r3, [pc, #392]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 800176e:	2101      	movs	r1, #1
 8001770:	430a      	orrs	r2, r1
 8001772:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff fa3a 	bl	8000bec <HAL_GetTick>
 8001778:	0003      	movs	r3, r0
 800177a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800177e:	f7ff fa35 	bl	8000bec <HAL_GetTick>
 8001782:	0002      	movs	r2, r0
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e297      	b.n	8001cc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001790:	4b59      	ldr	r3, [pc, #356]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2202      	movs	r2, #2
 8001796:	4013      	ands	r3, r2
 8001798:	d0f1      	beq.n	800177e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179a:	4b57      	ldr	r3, [pc, #348]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	22f8      	movs	r2, #248	; 0xf8
 80017a0:	4393      	bics	r3, r2
 80017a2:	0019      	movs	r1, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	00da      	lsls	r2, r3, #3
 80017aa:	4b53      	ldr	r3, [pc, #332]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 80017ac:	430a      	orrs	r2, r1
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	e018      	b.n	80017e4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b2:	4b51      	ldr	r3, [pc, #324]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4b50      	ldr	r3, [pc, #320]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 80017b8:	2101      	movs	r1, #1
 80017ba:	438a      	bics	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017be:	f7ff fa15 	bl	8000bec <HAL_GetTick>
 80017c2:	0003      	movs	r3, r0
 80017c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c8:	f7ff fa10 	bl	8000bec <HAL_GetTick>
 80017cc:	0002      	movs	r2, r0
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e272      	b.n	8001cc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017da:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2202      	movs	r2, #2
 80017e0:	4013      	ands	r3, r2
 80017e2:	d1f1      	bne.n	80017c8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2208      	movs	r2, #8
 80017ea:	4013      	ands	r3, r2
 80017ec:	d036      	beq.n	800185c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d019      	beq.n	800182a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f6:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 80017f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017fa:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 80017fc:	2101      	movs	r1, #1
 80017fe:	430a      	orrs	r2, r1
 8001800:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001802:	f7ff f9f3 	bl	8000bec <HAL_GetTick>
 8001806:	0003      	movs	r3, r0
 8001808:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180c:	f7ff f9ee 	bl	8000bec <HAL_GetTick>
 8001810:	0002      	movs	r2, r0
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e250      	b.n	8001cc0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181e:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	2202      	movs	r2, #2
 8001824:	4013      	ands	r3, r2
 8001826:	d0f1      	beq.n	800180c <HAL_RCC_OscConfig+0x24c>
 8001828:	e018      	b.n	800185c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182a:	4b33      	ldr	r3, [pc, #204]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 800182c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800182e:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 8001830:	2101      	movs	r1, #1
 8001832:	438a      	bics	r2, r1
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001836:	f7ff f9d9 	bl	8000bec <HAL_GetTick>
 800183a:	0003      	movs	r3, r0
 800183c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001840:	f7ff f9d4 	bl	8000bec <HAL_GetTick>
 8001844:	0002      	movs	r2, r0
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e236      	b.n	8001cc0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001852:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 8001854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001856:	2202      	movs	r2, #2
 8001858:	4013      	ands	r3, r2
 800185a:	d1f1      	bne.n	8001840 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2204      	movs	r2, #4
 8001862:	4013      	ands	r3, r2
 8001864:	d100      	bne.n	8001868 <HAL_RCC_OscConfig+0x2a8>
 8001866:	e0b5      	b.n	80019d4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001868:	201f      	movs	r0, #31
 800186a:	183b      	adds	r3, r7, r0
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001870:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 8001872:	69da      	ldr	r2, [r3, #28]
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	055b      	lsls	r3, r3, #21
 8001878:	4013      	ands	r3, r2
 800187a:	d110      	bne.n	800189e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800187c:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 800187e:	69da      	ldr	r2, [r3, #28]
 8001880:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 8001882:	2180      	movs	r1, #128	; 0x80
 8001884:	0549      	lsls	r1, r1, #21
 8001886:	430a      	orrs	r2, r1
 8001888:	61da      	str	r2, [r3, #28]
 800188a:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 800188c:	69da      	ldr	r2, [r3, #28]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	055b      	lsls	r3, r3, #21
 8001892:	4013      	ands	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001898:	183b      	adds	r3, r7, r0
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <HAL_RCC_OscConfig+0x344>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4013      	ands	r3, r2
 80018a8:	d11a      	bne.n	80018e0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <HAL_RCC_OscConfig+0x344>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_RCC_OscConfig+0x344>)
 80018b0:	2180      	movs	r1, #128	; 0x80
 80018b2:	0049      	lsls	r1, r1, #1
 80018b4:	430a      	orrs	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b8:	f7ff f998 	bl	8000bec <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c2:	f7ff f993 	bl	8000bec <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b64      	cmp	r3, #100	; 0x64
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e1f5      	b.n	8001cc0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_RCC_OscConfig+0x344>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	4013      	ands	r3, r2
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d10f      	bne.n	8001908 <HAL_RCC_OscConfig+0x348>
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 80018ea:	6a1a      	ldr	r2, [r3, #32]
 80018ec:	4b02      	ldr	r3, [pc, #8]	; (80018f8 <HAL_RCC_OscConfig+0x338>)
 80018ee:	2101      	movs	r1, #1
 80018f0:	430a      	orrs	r2, r1
 80018f2:	621a      	str	r2, [r3, #32]
 80018f4:	e036      	b.n	8001964 <HAL_RCC_OscConfig+0x3a4>
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	40021000 	.word	0x40021000
 80018fc:	fffeffff 	.word	0xfffeffff
 8001900:	fffbffff 	.word	0xfffbffff
 8001904:	40007000 	.word	0x40007000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10c      	bne.n	800192a <HAL_RCC_OscConfig+0x36a>
 8001910:	4bca      	ldr	r3, [pc, #808]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001912:	6a1a      	ldr	r2, [r3, #32]
 8001914:	4bc9      	ldr	r3, [pc, #804]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001916:	2101      	movs	r1, #1
 8001918:	438a      	bics	r2, r1
 800191a:	621a      	str	r2, [r3, #32]
 800191c:	4bc7      	ldr	r3, [pc, #796]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 800191e:	6a1a      	ldr	r2, [r3, #32]
 8001920:	4bc6      	ldr	r3, [pc, #792]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001922:	2104      	movs	r1, #4
 8001924:	438a      	bics	r2, r1
 8001926:	621a      	str	r2, [r3, #32]
 8001928:	e01c      	b.n	8001964 <HAL_RCC_OscConfig+0x3a4>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b05      	cmp	r3, #5
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0x38c>
 8001932:	4bc2      	ldr	r3, [pc, #776]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001934:	6a1a      	ldr	r2, [r3, #32]
 8001936:	4bc1      	ldr	r3, [pc, #772]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001938:	2104      	movs	r1, #4
 800193a:	430a      	orrs	r2, r1
 800193c:	621a      	str	r2, [r3, #32]
 800193e:	4bbf      	ldr	r3, [pc, #764]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001940:	6a1a      	ldr	r2, [r3, #32]
 8001942:	4bbe      	ldr	r3, [pc, #760]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001944:	2101      	movs	r1, #1
 8001946:	430a      	orrs	r2, r1
 8001948:	621a      	str	r2, [r3, #32]
 800194a:	e00b      	b.n	8001964 <HAL_RCC_OscConfig+0x3a4>
 800194c:	4bbb      	ldr	r3, [pc, #748]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 800194e:	6a1a      	ldr	r2, [r3, #32]
 8001950:	4bba      	ldr	r3, [pc, #744]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001952:	2101      	movs	r1, #1
 8001954:	438a      	bics	r2, r1
 8001956:	621a      	str	r2, [r3, #32]
 8001958:	4bb8      	ldr	r3, [pc, #736]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 800195a:	6a1a      	ldr	r2, [r3, #32]
 800195c:	4bb7      	ldr	r3, [pc, #732]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 800195e:	2104      	movs	r1, #4
 8001960:	438a      	bics	r2, r1
 8001962:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d014      	beq.n	8001996 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196c:	f7ff f93e 	bl	8000bec <HAL_GetTick>
 8001970:	0003      	movs	r3, r0
 8001972:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001974:	e009      	b.n	800198a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001976:	f7ff f939 	bl	8000bec <HAL_GetTick>
 800197a:	0002      	movs	r2, r0
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	4aaf      	ldr	r2, [pc, #700]	; (8001c40 <HAL_RCC_OscConfig+0x680>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e19a      	b.n	8001cc0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198a:	4bac      	ldr	r3, [pc, #688]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	2202      	movs	r2, #2
 8001990:	4013      	ands	r3, r2
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x3b6>
 8001994:	e013      	b.n	80019be <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001996:	f7ff f929 	bl	8000bec <HAL_GetTick>
 800199a:	0003      	movs	r3, r0
 800199c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199e:	e009      	b.n	80019b4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a0:	f7ff f924 	bl	8000bec <HAL_GetTick>
 80019a4:	0002      	movs	r2, r0
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	4aa5      	ldr	r2, [pc, #660]	; (8001c40 <HAL_RCC_OscConfig+0x680>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e185      	b.n	8001cc0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b4:	4ba1      	ldr	r3, [pc, #644]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	2202      	movs	r2, #2
 80019ba:	4013      	ands	r3, r2
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019be:	231f      	movs	r3, #31
 80019c0:	18fb      	adds	r3, r7, r3
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d105      	bne.n	80019d4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c8:	4b9c      	ldr	r3, [pc, #624]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 80019ca:	69da      	ldr	r2, [r3, #28]
 80019cc:	4b9b      	ldr	r3, [pc, #620]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 80019ce:	499d      	ldr	r1, [pc, #628]	; (8001c44 <HAL_RCC_OscConfig+0x684>)
 80019d0:	400a      	ands	r2, r1
 80019d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2210      	movs	r2, #16
 80019da:	4013      	ands	r3, r2
 80019dc:	d063      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d12a      	bne.n	8001a3c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019e6:	4b95      	ldr	r3, [pc, #596]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 80019e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ea:	4b94      	ldr	r3, [pc, #592]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 80019ec:	2104      	movs	r1, #4
 80019ee:	430a      	orrs	r2, r1
 80019f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80019f2:	4b92      	ldr	r3, [pc, #584]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 80019f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019f6:	4b91      	ldr	r3, [pc, #580]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 80019f8:	2101      	movs	r1, #1
 80019fa:	430a      	orrs	r2, r1
 80019fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fe:	f7ff f8f5 	bl	8000bec <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a08:	f7ff f8f0 	bl	8000bec <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e152      	b.n	8001cc0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a1a:	4b88      	ldr	r3, [pc, #544]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1e:	2202      	movs	r2, #2
 8001a20:	4013      	ands	r3, r2
 8001a22:	d0f1      	beq.n	8001a08 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a24:	4b85      	ldr	r3, [pc, #532]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a28:	22f8      	movs	r2, #248	; 0xf8
 8001a2a:	4393      	bics	r3, r2
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	00da      	lsls	r2, r3, #3
 8001a34:	4b81      	ldr	r3, [pc, #516]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001a36:	430a      	orrs	r2, r1
 8001a38:	635a      	str	r2, [r3, #52]	; 0x34
 8001a3a:	e034      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	3305      	adds	r3, #5
 8001a42:	d111      	bne.n	8001a68 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001a44:	4b7d      	ldr	r3, [pc, #500]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001a46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a48:	4b7c      	ldr	r3, [pc, #496]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001a4a:	2104      	movs	r1, #4
 8001a4c:	438a      	bics	r2, r1
 8001a4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a50:	4b7a      	ldr	r3, [pc, #488]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a54:	22f8      	movs	r2, #248	; 0xf8
 8001a56:	4393      	bics	r3, r2
 8001a58:	0019      	movs	r1, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	00da      	lsls	r2, r3, #3
 8001a60:	4b76      	ldr	r3, [pc, #472]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001a62:	430a      	orrs	r2, r1
 8001a64:	635a      	str	r2, [r3, #52]	; 0x34
 8001a66:	e01e      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a68:	4b74      	ldr	r3, [pc, #464]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a6c:	4b73      	ldr	r3, [pc, #460]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001a6e:	2104      	movs	r1, #4
 8001a70:	430a      	orrs	r2, r1
 8001a72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a74:	4b71      	ldr	r3, [pc, #452]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a78:	4b70      	ldr	r3, [pc, #448]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	438a      	bics	r2, r1
 8001a7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a80:	f7ff f8b4 	bl	8000bec <HAL_GetTick>
 8001a84:	0003      	movs	r3, r0
 8001a86:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a8a:	f7ff f8af 	bl	8000bec <HAL_GetTick>
 8001a8e:	0002      	movs	r2, r0
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e111      	b.n	8001cc0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a9c:	4b67      	ldr	r3, [pc, #412]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d1f1      	bne.n	8001a8a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	4013      	ands	r3, r2
 8001aae:	d05c      	beq.n	8001b6a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001ab0:	4b62      	ldr	r3, [pc, #392]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	220c      	movs	r2, #12
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b0c      	cmp	r3, #12
 8001aba:	d00e      	beq.n	8001ada <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001abc:	4b5f      	ldr	r3, [pc, #380]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	220c      	movs	r2, #12
 8001ac2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d114      	bne.n	8001af2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001ac8:	4b5c      	ldr	r3, [pc, #368]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	23c0      	movs	r3, #192	; 0xc0
 8001ace:	025b      	lsls	r3, r3, #9
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	23c0      	movs	r3, #192	; 0xc0
 8001ad4:	025b      	lsls	r3, r3, #9
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d10b      	bne.n	8001af2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001ada:	4b58      	ldr	r3, [pc, #352]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	029b      	lsls	r3, r3, #10
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d040      	beq.n	8001b68 <HAL_RCC_OscConfig+0x5a8>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d03c      	beq.n	8001b68 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e0e6      	b.n	8001cc0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d01b      	beq.n	8001b32 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001afa:	4b50      	ldr	r3, [pc, #320]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001afe:	4b4f      	ldr	r3, [pc, #316]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001b00:	2180      	movs	r1, #128	; 0x80
 8001b02:	0249      	lsls	r1, r1, #9
 8001b04:	430a      	orrs	r2, r1
 8001b06:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b08:	f7ff f870 	bl	8000bec <HAL_GetTick>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b12:	f7ff f86b 	bl	8000bec <HAL_GetTick>
 8001b16:	0002      	movs	r2, r0
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e0cd      	b.n	8001cc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b24:	4b45      	ldr	r3, [pc, #276]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	029b      	lsls	r3, r3, #10
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x552>
 8001b30:	e01b      	b.n	8001b6a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001b32:	4b42      	ldr	r3, [pc, #264]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b36:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001b38:	4943      	ldr	r1, [pc, #268]	; (8001c48 <HAL_RCC_OscConfig+0x688>)
 8001b3a:	400a      	ands	r2, r1
 8001b3c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3e:	f7ff f855 	bl	8000bec <HAL_GetTick>
 8001b42:	0003      	movs	r3, r0
 8001b44:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b48:	f7ff f850 	bl	8000bec <HAL_GetTick>
 8001b4c:	0002      	movs	r2, r0
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e0b2      	b.n	8001cc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001b5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	029b      	lsls	r3, r3, #10
 8001b62:	4013      	ands	r3, r2
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x588>
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001b68:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d100      	bne.n	8001b74 <HAL_RCC_OscConfig+0x5b4>
 8001b72:	e0a4      	b.n	8001cbe <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b74:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	220c      	movs	r2, #12
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d100      	bne.n	8001b82 <HAL_RCC_OscConfig+0x5c2>
 8001b80:	e078      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d14c      	bne.n	8001c24 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8a:	4b2c      	ldr	r3, [pc, #176]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001b90:	492e      	ldr	r1, [pc, #184]	; (8001c4c <HAL_RCC_OscConfig+0x68c>)
 8001b92:	400a      	ands	r2, r1
 8001b94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7ff f829 	bl	8000bec <HAL_GetTick>
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7ff f824 	bl	8000bec <HAL_GetTick>
 8001ba4:	0002      	movs	r2, r0
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e086      	b.n	8001cc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb2:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	049b      	lsls	r3, r3, #18
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc2:	220f      	movs	r2, #15
 8001bc4:	4393      	bics	r3, r2
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	4a1e      	ldr	r2, [pc, #120]	; (8001c50 <HAL_RCC_OscConfig+0x690>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	0019      	movs	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	431a      	orrs	r2, r3
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001be8:	430a      	orrs	r2, r1
 8001bea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001bf2:	2180      	movs	r1, #128	; 0x80
 8001bf4:	0449      	lsls	r1, r1, #17
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7fe fff7 	bl	8000bec <HAL_GetTick>
 8001bfe:	0003      	movs	r3, r0
 8001c00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c04:	f7fe fff2 	bl	8000bec <HAL_GetTick>
 8001c08:	0002      	movs	r2, r0
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e054      	b.n	8001cc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	049b      	lsls	r3, r3, #18
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0x644>
 8001c22:	e04c      	b.n	8001cbe <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001c2a:	4908      	ldr	r1, [pc, #32]	; (8001c4c <HAL_RCC_OscConfig+0x68c>)
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7fe ffdc 	bl	8000bec <HAL_GetTick>
 8001c34:	0003      	movs	r3, r0
 8001c36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c38:	e015      	b.n	8001c66 <HAL_RCC_OscConfig+0x6a6>
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	00001388 	.word	0x00001388
 8001c44:	efffffff 	.word	0xefffffff
 8001c48:	fffeffff 	.word	0xfffeffff
 8001c4c:	feffffff 	.word	0xfeffffff
 8001c50:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c54:	f7fe ffca 	bl	8000bec <HAL_GetTick>
 8001c58:	0002      	movs	r2, r0
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e02c      	b.n	8001cc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c66:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <HAL_RCC_OscConfig+0x708>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	049b      	lsls	r3, r3, #18
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x694>
 8001c72:	e024      	b.n	8001cbe <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e01f      	b.n	8001cc0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_RCC_OscConfig+0x708>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_RCC_OscConfig+0x708>)
 8001c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	23c0      	movs	r3, #192	; 0xc0
 8001c90:	025b      	lsls	r3, r3, #9
 8001c92:	401a      	ands	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d10e      	bne.n	8001cba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	220f      	movs	r2, #15
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	23f0      	movs	r3, #240	; 0xf0
 8001cae:	039b      	lsls	r3, r3, #14
 8001cb0:	401a      	ands	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d001      	beq.n	8001cbe <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b008      	add	sp, #32
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000

08001ccc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0bf      	b.n	8001e60 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b61      	ldr	r3, [pc, #388]	; (8001e68 <HAL_RCC_ClockConfig+0x19c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d911      	bls.n	8001d12 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b5e      	ldr	r3, [pc, #376]	; (8001e68 <HAL_RCC_ClockConfig+0x19c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	4393      	bics	r3, r2
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	4b5b      	ldr	r3, [pc, #364]	; (8001e68 <HAL_RCC_ClockConfig+0x19c>)
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d00:	4b59      	ldr	r3, [pc, #356]	; (8001e68 <HAL_RCC_ClockConfig+0x19c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2201      	movs	r2, #1
 8001d06:	4013      	ands	r3, r2
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e0a6      	b.n	8001e60 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2202      	movs	r2, #2
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d015      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2204      	movs	r2, #4
 8001d22:	4013      	ands	r3, r2
 8001d24:	d006      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d26:	4b51      	ldr	r3, [pc, #324]	; (8001e6c <HAL_RCC_ClockConfig+0x1a0>)
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	4b50      	ldr	r3, [pc, #320]	; (8001e6c <HAL_RCC_ClockConfig+0x1a0>)
 8001d2c:	21e0      	movs	r1, #224	; 0xe0
 8001d2e:	00c9      	lsls	r1, r1, #3
 8001d30:	430a      	orrs	r2, r1
 8001d32:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d34:	4b4d      	ldr	r3, [pc, #308]	; (8001e6c <HAL_RCC_ClockConfig+0x1a0>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	22f0      	movs	r2, #240	; 0xf0
 8001d3a:	4393      	bics	r3, r2
 8001d3c:	0019      	movs	r1, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	4b4a      	ldr	r3, [pc, #296]	; (8001e6c <HAL_RCC_ClockConfig+0x1a0>)
 8001d44:	430a      	orrs	r2, r1
 8001d46:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d04c      	beq.n	8001dec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d107      	bne.n	8001d6a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5a:	4b44      	ldr	r3, [pc, #272]	; (8001e6c <HAL_RCC_ClockConfig+0x1a0>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	029b      	lsls	r3, r3, #10
 8001d62:	4013      	ands	r3, r2
 8001d64:	d120      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e07a      	b.n	8001e60 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d107      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d72:	4b3e      	ldr	r3, [pc, #248]	; (8001e6c <HAL_RCC_ClockConfig+0x1a0>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	049b      	lsls	r3, r3, #18
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d114      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e06e      	b.n	8001e60 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d107      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d8a:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <HAL_RCC_ClockConfig+0x1a0>)
 8001d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	029b      	lsls	r3, r3, #10
 8001d92:	4013      	ands	r3, r2
 8001d94:	d108      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e062      	b.n	8001e60 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9a:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <HAL_RCC_ClockConfig+0x1a0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	4013      	ands	r3, r2
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e05b      	b.n	8001e60 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001da8:	4b30      	ldr	r3, [pc, #192]	; (8001e6c <HAL_RCC_ClockConfig+0x1a0>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2203      	movs	r2, #3
 8001dae:	4393      	bics	r3, r2
 8001db0:	0019      	movs	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	4b2d      	ldr	r3, [pc, #180]	; (8001e6c <HAL_RCC_ClockConfig+0x1a0>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dbc:	f7fe ff16 	bl	8000bec <HAL_GetTick>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc4:	e009      	b.n	8001dda <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc6:	f7fe ff11 	bl	8000bec <HAL_GetTick>
 8001dca:	0002      	movs	r2, r0
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	4a27      	ldr	r2, [pc, #156]	; (8001e70 <HAL_RCC_ClockConfig+0x1a4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e042      	b.n	8001e60 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dda:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <HAL_RCC_ClockConfig+0x1a0>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	220c      	movs	r2, #12
 8001de0:	401a      	ands	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d1ec      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <HAL_RCC_ClockConfig+0x19c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2201      	movs	r2, #1
 8001df2:	4013      	ands	r3, r2
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d211      	bcs.n	8001e1e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfa:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <HAL_RCC_ClockConfig+0x19c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	4393      	bics	r3, r2
 8001e02:	0019      	movs	r1, r3
 8001e04:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <HAL_RCC_ClockConfig+0x19c>)
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0c:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <HAL_RCC_ClockConfig+0x19c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2201      	movs	r2, #1
 8001e12:	4013      	ands	r3, r2
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d001      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e020      	b.n	8001e60 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2204      	movs	r2, #4
 8001e24:	4013      	ands	r3, r2
 8001e26:	d009      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e28:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <HAL_RCC_ClockConfig+0x1a0>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	4a11      	ldr	r2, [pc, #68]	; (8001e74 <HAL_RCC_ClockConfig+0x1a8>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	0019      	movs	r1, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <HAL_RCC_ClockConfig+0x1a0>)
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e3c:	f000 f820 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8001e40:	0001      	movs	r1, r0
 8001e42:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <HAL_RCC_ClockConfig+0x1a0>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	091b      	lsrs	r3, r3, #4
 8001e48:	220f      	movs	r2, #15
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <HAL_RCC_ClockConfig+0x1ac>)
 8001e4e:	5cd3      	ldrb	r3, [r2, r3]
 8001e50:	000a      	movs	r2, r1
 8001e52:	40da      	lsrs	r2, r3
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_RCC_ClockConfig+0x1b0>)
 8001e56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e58:	2003      	movs	r0, #3
 8001e5a:	f7fe fe81 	bl	8000b60 <HAL_InitTick>
  
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	0018      	movs	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b004      	add	sp, #16
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40022000 	.word	0x40022000
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	00001388 	.word	0x00001388
 8001e74:	fffff8ff 	.word	0xfffff8ff
 8001e78:	080053e0 	.word	0x080053e0
 8001e7c:	20000000 	.word	0x20000000

08001e80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001e9a:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	2b0c      	cmp	r3, #12
 8001ea8:	d046      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0xb8>
 8001eaa:	d848      	bhi.n	8001f3e <HAL_RCC_GetSysClockFreq+0xbe>
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d002      	beq.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x36>
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d003      	beq.n	8001ebc <HAL_RCC_GetSysClockFreq+0x3c>
 8001eb4:	e043      	b.n	8001f3e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eb6:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001eb8:	613b      	str	r3, [r7, #16]
      break;
 8001eba:	e043      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	0c9b      	lsrs	r3, r3, #18
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	4a24      	ldr	r2, [pc, #144]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001ec6:	5cd3      	ldrb	r3, [r2, r3]
 8001ec8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001eca:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ece:	220f      	movs	r2, #15
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	4a22      	ldr	r2, [pc, #136]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xdc>)
 8001ed4:	5cd3      	ldrb	r3, [r2, r3]
 8001ed6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	23c0      	movs	r3, #192	; 0xc0
 8001edc:	025b      	lsls	r3, r3, #9
 8001ede:	401a      	ands	r2, r3
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	025b      	lsls	r3, r3, #9
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d109      	bne.n	8001efc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	481a      	ldr	r0, [pc, #104]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001eec:	f7fe f914 	bl	8000118 <__udivsi3>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4353      	muls	r3, r2
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	e01a      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	23c0      	movs	r3, #192	; 0xc0
 8001f00:	025b      	lsls	r3, r3, #9
 8001f02:	401a      	ands	r2, r3
 8001f04:	23c0      	movs	r3, #192	; 0xc0
 8001f06:	025b      	lsls	r3, r3, #9
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d109      	bne.n	8001f20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	4814      	ldr	r0, [pc, #80]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001f10:	f7fe f902 	bl	8000118 <__udivsi3>
 8001f14:	0003      	movs	r3, r0
 8001f16:	001a      	movs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4353      	muls	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	480c      	ldr	r0, [pc, #48]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f24:	f7fe f8f8 	bl	8000118 <__udivsi3>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	001a      	movs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4353      	muls	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	613b      	str	r3, [r7, #16]
      break;
 8001f36:	e005      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001f3a:	613b      	str	r3, [r7, #16]
      break;
 8001f3c:	e002      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f40:	613b      	str	r3, [r7, #16]
      break;
 8001f42:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f44:	693b      	ldr	r3, [r7, #16]
}
 8001f46:	0018      	movs	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	b006      	add	sp, #24
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	40021000 	.word	0x40021000
 8001f54:	007a1200 	.word	0x007a1200
 8001f58:	080053f8 	.word	0x080053f8
 8001f5c:	08005408 	.word	0x08005408
 8001f60:	02dc6c00 	.word	0x02dc6c00

08001f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f68:	4b02      	ldr	r3, [pc, #8]	; (8001f74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	20000000 	.word	0x20000000

08001f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001f7c:	f7ff fff2 	bl	8001f64 <HAL_RCC_GetHCLKFreq>
 8001f80:	0001      	movs	r1, r0
 8001f82:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	0a1b      	lsrs	r3, r3, #8
 8001f88:	2207      	movs	r2, #7
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f8e:	5cd3      	ldrb	r3, [r2, r3]
 8001f90:	40d9      	lsrs	r1, r3
 8001f92:	000b      	movs	r3, r1
}    
 8001f94:	0018      	movs	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	080053f0 	.word	0x080053f0

08001fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	025b      	lsls	r3, r3, #9
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d100      	bne.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001fc0:	e08e      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001fc2:	2017      	movs	r0, #23
 8001fc4:	183b      	adds	r3, r7, r0
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fca:	4b6e      	ldr	r3, [pc, #440]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fcc:	69da      	ldr	r2, [r3, #28]
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	055b      	lsls	r3, r3, #21
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d110      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	4b6b      	ldr	r3, [pc, #428]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fd8:	69da      	ldr	r2, [r3, #28]
 8001fda:	4b6a      	ldr	r3, [pc, #424]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fdc:	2180      	movs	r1, #128	; 0x80
 8001fde:	0549      	lsls	r1, r1, #21
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	61da      	str	r2, [r3, #28]
 8001fe4:	4b67      	ldr	r3, [pc, #412]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fe6:	69da      	ldr	r2, [r3, #28]
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	055b      	lsls	r3, r3, #21
 8001fec:	4013      	ands	r3, r2
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff2:	183b      	adds	r3, r7, r0
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff8:	4b63      	ldr	r3, [pc, #396]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4013      	ands	r3, r2
 8002002:	d11a      	bne.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002004:	4b60      	ldr	r3, [pc, #384]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b5f      	ldr	r3, [pc, #380]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800200a:	2180      	movs	r1, #128	; 0x80
 800200c:	0049      	lsls	r1, r1, #1
 800200e:	430a      	orrs	r2, r1
 8002010:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002012:	f7fe fdeb 	bl	8000bec <HAL_GetTick>
 8002016:	0003      	movs	r3, r0
 8002018:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201a:	e008      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201c:	f7fe fde6 	bl	8000bec <HAL_GetTick>
 8002020:	0002      	movs	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b64      	cmp	r3, #100	; 0x64
 8002028:	d901      	bls.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e0a6      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202e:	4b56      	ldr	r3, [pc, #344]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4013      	ands	r3, r2
 8002038:	d0f0      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800203a:	4b52      	ldr	r3, [pc, #328]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800203c:	6a1a      	ldr	r2, [r3, #32]
 800203e:	23c0      	movs	r3, #192	; 0xc0
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4013      	ands	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d034      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	23c0      	movs	r3, #192	; 0xc0
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4013      	ands	r3, r2
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	429a      	cmp	r2, r3
 800205a:	d02c      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800205c:	4b49      	ldr	r3, [pc, #292]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	4a4a      	ldr	r2, [pc, #296]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002062:	4013      	ands	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002066:	4b47      	ldr	r3, [pc, #284]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002068:	6a1a      	ldr	r2, [r3, #32]
 800206a:	4b46      	ldr	r3, [pc, #280]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800206c:	2180      	movs	r1, #128	; 0x80
 800206e:	0249      	lsls	r1, r1, #9
 8002070:	430a      	orrs	r2, r1
 8002072:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002074:	4b43      	ldr	r3, [pc, #268]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002076:	6a1a      	ldr	r2, [r3, #32]
 8002078:	4b42      	ldr	r3, [pc, #264]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800207a:	4945      	ldr	r1, [pc, #276]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800207c:	400a      	ands	r2, r1
 800207e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002080:	4b40      	ldr	r3, [pc, #256]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2201      	movs	r2, #1
 800208a:	4013      	ands	r3, r2
 800208c:	d013      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7fe fdad 	bl	8000bec <HAL_GetTick>
 8002092:	0003      	movs	r3, r0
 8002094:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002096:	e009      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002098:	f7fe fda8 	bl	8000bec <HAL_GetTick>
 800209c:	0002      	movs	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	4a3c      	ldr	r2, [pc, #240]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d901      	bls.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e067      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ac:	4b35      	ldr	r3, [pc, #212]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	2202      	movs	r2, #2
 80020b2:	4013      	ands	r3, r2
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020b6:	4b33      	ldr	r3, [pc, #204]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4a34      	ldr	r2, [pc, #208]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80020bc:	4013      	ands	r3, r2
 80020be:	0019      	movs	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020c6:	430a      	orrs	r2, r1
 80020c8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020ca:	2317      	movs	r3, #23
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d105      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d4:	4b2b      	ldr	r3, [pc, #172]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020d6:	69da      	ldr	r2, [r3, #28]
 80020d8:	4b2a      	ldr	r3, [pc, #168]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020da:	492f      	ldr	r1, [pc, #188]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80020dc:	400a      	ands	r2, r1
 80020de:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2201      	movs	r2, #1
 80020e6:	4013      	ands	r3, r2
 80020e8:	d009      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ea:	4b26      	ldr	r3, [pc, #152]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	2203      	movs	r2, #3
 80020f0:	4393      	bics	r3, r2
 80020f2:	0019      	movs	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	4b22      	ldr	r3, [pc, #136]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020fa:	430a      	orrs	r2, r1
 80020fc:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2202      	movs	r2, #2
 8002104:	4013      	ands	r3, r2
 8002106:	d009      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002108:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	4a23      	ldr	r2, [pc, #140]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800210e:	4013      	ands	r3, r2
 8002110:	0019      	movs	r1, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002118:	430a      	orrs	r2, r1
 800211a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2220      	movs	r2, #32
 8002122:	4013      	ands	r3, r2
 8002124:	d009      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002126:	4b17      	ldr	r3, [pc, #92]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	2210      	movs	r2, #16
 800212c:	4393      	bics	r3, r2
 800212e:	0019      	movs	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	4b13      	ldr	r3, [pc, #76]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002136:	430a      	orrs	r2, r1
 8002138:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	029b      	lsls	r3, r3, #10
 8002142:	4013      	ands	r3, r2
 8002144:	d009      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002146:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	2280      	movs	r2, #128	; 0x80
 800214c:	4393      	bics	r3, r2
 800214e:	0019      	movs	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699a      	ldr	r2, [r3, #24]
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002156:	430a      	orrs	r2, r1
 8002158:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4013      	ands	r3, r2
 8002164:	d009      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	2240      	movs	r2, #64	; 0x40
 800216c:	4393      	bics	r3, r2
 800216e:	0019      	movs	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	695a      	ldr	r2, [r3, #20]
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002176:	430a      	orrs	r2, r1
 8002178:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	0018      	movs	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	b006      	add	sp, #24
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000
 8002188:	40007000 	.word	0x40007000
 800218c:	fffffcff 	.word	0xfffffcff
 8002190:	fffeffff 	.word	0xfffeffff
 8002194:	00001388 	.word	0x00001388
 8002198:	efffffff 	.word	0xefffffff
 800219c:	fffcffff 	.word	0xfffcffff

080021a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e0a8      	b.n	8002304 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d109      	bne.n	80021ce <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	2382      	movs	r3, #130	; 0x82
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d009      	beq.n	80021da <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	61da      	str	r2, [r3, #28]
 80021cc:	e005      	b.n	80021da <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	225d      	movs	r2, #93	; 0x5d
 80021e4:	5c9b      	ldrb	r3, [r3, r2]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d107      	bne.n	80021fc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	225c      	movs	r2, #92	; 0x5c
 80021f0:	2100      	movs	r1, #0
 80021f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	0018      	movs	r0, r3
 80021f8:	f7fe fb00 	bl	80007fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	225d      	movs	r2, #93	; 0x5d
 8002200:	2102      	movs	r1, #2
 8002202:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2140      	movs	r1, #64	; 0x40
 8002210:	438a      	bics	r2, r1
 8002212:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	23e0      	movs	r3, #224	; 0xe0
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	429a      	cmp	r2, r3
 800221e:	d902      	bls.n	8002226 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	e002      	b.n	800222c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	015b      	lsls	r3, r3, #5
 800222a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	23f0      	movs	r3, #240	; 0xf0
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	429a      	cmp	r2, r3
 8002236:	d008      	beq.n	800224a <HAL_SPI_Init+0xaa>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	23e0      	movs	r3, #224	; 0xe0
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	429a      	cmp	r2, r3
 8002242:	d002      	beq.n	800224a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	2382      	movs	r3, #130	; 0x82
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	401a      	ands	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6899      	ldr	r1, [r3, #8]
 8002258:	2384      	movs	r3, #132	; 0x84
 800225a:	021b      	lsls	r3, r3, #8
 800225c:	400b      	ands	r3, r1
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	2102      	movs	r1, #2
 8002266:	400b      	ands	r3, r1
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	2101      	movs	r1, #1
 8002270:	400b      	ands	r3, r1
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6999      	ldr	r1, [r3, #24]
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	400b      	ands	r3, r1
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	2138      	movs	r1, #56	; 0x38
 8002286:	400b      	ands	r3, r1
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	2180      	movs	r1, #128	; 0x80
 8002290:	400b      	ands	r3, r1
 8002292:	431a      	orrs	r2, r3
 8002294:	0011      	movs	r1, r2
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	019b      	lsls	r3, r3, #6
 800229e:	401a      	ands	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	0c1b      	lsrs	r3, r3, #16
 80022ae:	2204      	movs	r2, #4
 80022b0:	401a      	ands	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	2110      	movs	r1, #16
 80022b8:	400b      	ands	r3, r1
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c0:	2108      	movs	r1, #8
 80022c2:	400b      	ands	r3, r1
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68d9      	ldr	r1, [r3, #12]
 80022ca:	23f0      	movs	r3, #240	; 0xf0
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	400b      	ands	r3, r1
 80022d0:	431a      	orrs	r2, r3
 80022d2:	0011      	movs	r1, r2
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	015b      	lsls	r3, r3, #5
 80022da:	401a      	ands	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	69da      	ldr	r2, [r3, #28]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4907      	ldr	r1, [pc, #28]	; (800230c <HAL_SPI_Init+0x16c>)
 80022f0:	400a      	ands	r2, r1
 80022f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	225d      	movs	r2, #93	; 0x5d
 80022fe:	2101      	movs	r1, #1
 8002300:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	0018      	movs	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	b004      	add	sp, #16
 800230a:	bd80      	pop	{r7, pc}
 800230c:	fffff7ff 	.word	0xfffff7ff

08002310 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e074      	b.n	800240c <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	223c      	movs	r2, #60	; 0x3c
 8002326:	5c9b      	ldrb	r3, [r3, r2]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d107      	bne.n	800233e <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	223d      	movs	r2, #61	; 0x3d
 8002332:	2100      	movs	r1, #0
 8002334:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	0018      	movs	r0, r3
 800233a:	f7fe faad 	bl	8000898 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	223c      	movs	r2, #60	; 0x3c
 8002342:	2102      	movs	r1, #2
 8002344:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2201      	movs	r2, #1
 800234c:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6819      	ldr	r1, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800235c:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8002364:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800236a:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8002370:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8002376:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 800237c:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8002382:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7b1b      	ldrb	r3, [r3, #12]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d108      	bne.n	80023a6 <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2180      	movs	r1, #128	; 0x80
 80023a0:	0249      	lsls	r1, r1, #9
 80023a2:	430a      	orrs	r2, r1
 80023a4:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	43d2      	mvns	r2, r2
 80023bc:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023d6:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681c      	ldr	r4, [r3, #0]
 80023e0:	0010      	movs	r0, r2
 80023e2:	f000 f817 	bl	8002414 <TSC_extract_groups>
 80023e6:	0003      	movs	r3, r0
 80023e8:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2103      	movs	r1, #3
 80023f6:	438a      	bics	r2, r1
 80023f8:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2203      	movs	r2, #3
 8002400:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	223c      	movs	r2, #60	; 0x3c
 8002406:	2101      	movs	r1, #1
 8002408:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	0018      	movs	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	b003      	add	sp, #12
 8002412:	bd90      	pop	{r4, r7, pc}

08002414 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002420:	2300      	movs	r3, #0
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	e011      	b.n	800244a <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	220f      	movs	r2, #15
 800242c:	409a      	lsls	r2, r3
 800242e:	0013      	movs	r3, r2
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	4013      	ands	r3, r2
 8002434:	d006      	beq.n	8002444 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8002436:	2201      	movs	r2, #1
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	409a      	lsls	r2, r3
 800243c:	0013      	movs	r3, r2
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4313      	orrs	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	3301      	adds	r3, #1
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b07      	cmp	r3, #7
 800244e:	d9ea      	bls.n	8002426 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8002450:	68fb      	ldr	r3, [r7, #12]
}
 8002452:	0018      	movs	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	b004      	add	sp, #16
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e044      	b.n	80024f8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002472:	2b00      	cmp	r3, #0
 8002474:	d107      	bne.n	8002486 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2278      	movs	r2, #120	; 0x78
 800247a:	2100      	movs	r1, #0
 800247c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	0018      	movs	r0, r3
 8002482:	f7fe faa7 	bl	80009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2224      	movs	r2, #36	; 0x24
 800248a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2101      	movs	r1, #1
 8002498:	438a      	bics	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	0018      	movs	r0, r3
 80024a0:	f000 f918 	bl	80026d4 <UART_SetConfig>
 80024a4:	0003      	movs	r3, r0
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e024      	b.n	80024f8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	0018      	movs	r0, r3
 80024ba:	f000 fa93 	bl	80029e4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	490d      	ldr	r1, [pc, #52]	; (8002500 <HAL_UART_Init+0xa4>)
 80024ca:	400a      	ands	r2, r1
 80024cc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	212a      	movs	r1, #42	; 0x2a
 80024da:	438a      	bics	r2, r1
 80024dc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2101      	movs	r1, #1
 80024ea:	430a      	orrs	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	0018      	movs	r0, r3
 80024f2:	f000 fb2b 	bl	8002b4c <UART_CheckIdleState>
 80024f6:	0003      	movs	r3, r0
}
 80024f8:	0018      	movs	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b002      	add	sp, #8
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	ffffb7ff 	.word	0xffffb7ff

08002504 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	; 0x28
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	1dbb      	adds	r3, r7, #6
 8002512:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2280      	movs	r2, #128	; 0x80
 8002518:	589b      	ldr	r3, [r3, r2]
 800251a:	2b20      	cmp	r3, #32
 800251c:	d000      	beq.n	8002520 <HAL_UART_Receive+0x1c>
 800251e:	e0d1      	b.n	80026c4 <HAL_UART_Receive+0x1c0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_UART_Receive+0x2a>
 8002526:	1dbb      	adds	r3, r7, #6
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0c9      	b.n	80026c6 <HAL_UART_Receive+0x1c2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	015b      	lsls	r3, r3, #5
 800253a:	429a      	cmp	r2, r3
 800253c:	d109      	bne.n	8002552 <HAL_UART_Receive+0x4e>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d105      	bne.n	8002552 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2201      	movs	r2, #1
 800254a:	4013      	ands	r3, r2
 800254c:	d001      	beq.n	8002552 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e0b9      	b.n	80026c6 <HAL_UART_Receive+0x1c2>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2284      	movs	r2, #132	; 0x84
 8002556:	2100      	movs	r1, #0
 8002558:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2280      	movs	r2, #128	; 0x80
 800255e:	2122      	movs	r1, #34	; 0x22
 8002560:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002568:	f7fe fb40 	bl	8000bec <HAL_GetTick>
 800256c:	0003      	movs	r3, r0
 800256e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1dba      	adds	r2, r7, #6
 8002574:	2158      	movs	r1, #88	; 0x58
 8002576:	8812      	ldrh	r2, [r2, #0]
 8002578:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1dba      	adds	r2, r7, #6
 800257e:	215a      	movs	r1, #90	; 0x5a
 8002580:	8812      	ldrh	r2, [r2, #0]
 8002582:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	015b      	lsls	r3, r3, #5
 800258c:	429a      	cmp	r2, r3
 800258e:	d10d      	bne.n	80025ac <HAL_UART_Receive+0xa8>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d104      	bne.n	80025a2 <HAL_UART_Receive+0x9e>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	225c      	movs	r2, #92	; 0x5c
 800259c:	494c      	ldr	r1, [pc, #304]	; (80026d0 <HAL_UART_Receive+0x1cc>)
 800259e:	5299      	strh	r1, [r3, r2]
 80025a0:	e02e      	b.n	8002600 <HAL_UART_Receive+0xfc>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	225c      	movs	r2, #92	; 0x5c
 80025a6:	21ff      	movs	r1, #255	; 0xff
 80025a8:	5299      	strh	r1, [r3, r2]
 80025aa:	e029      	b.n	8002600 <HAL_UART_Receive+0xfc>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10d      	bne.n	80025d0 <HAL_UART_Receive+0xcc>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d104      	bne.n	80025c6 <HAL_UART_Receive+0xc2>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	225c      	movs	r2, #92	; 0x5c
 80025c0:	21ff      	movs	r1, #255	; 0xff
 80025c2:	5299      	strh	r1, [r3, r2]
 80025c4:	e01c      	b.n	8002600 <HAL_UART_Receive+0xfc>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	225c      	movs	r2, #92	; 0x5c
 80025ca:	217f      	movs	r1, #127	; 0x7f
 80025cc:	5299      	strh	r1, [r3, r2]
 80025ce:	e017      	b.n	8002600 <HAL_UART_Receive+0xfc>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	055b      	lsls	r3, r3, #21
 80025d8:	429a      	cmp	r2, r3
 80025da:	d10d      	bne.n	80025f8 <HAL_UART_Receive+0xf4>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d104      	bne.n	80025ee <HAL_UART_Receive+0xea>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	225c      	movs	r2, #92	; 0x5c
 80025e8:	217f      	movs	r1, #127	; 0x7f
 80025ea:	5299      	strh	r1, [r3, r2]
 80025ec:	e008      	b.n	8002600 <HAL_UART_Receive+0xfc>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	225c      	movs	r2, #92	; 0x5c
 80025f2:	213f      	movs	r1, #63	; 0x3f
 80025f4:	5299      	strh	r1, [r3, r2]
 80025f6:	e003      	b.n	8002600 <HAL_UART_Receive+0xfc>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	225c      	movs	r2, #92	; 0x5c
 80025fc:	2100      	movs	r1, #0
 80025fe:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002600:	2312      	movs	r3, #18
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	215c      	movs	r1, #92	; 0x5c
 8002608:	5a52      	ldrh	r2, [r2, r1]
 800260a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	015b      	lsls	r3, r3, #5
 8002614:	429a      	cmp	r2, r3
 8002616:	d108      	bne.n	800262a <HAL_UART_Receive+0x126>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d104      	bne.n	800262a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002620:	2300      	movs	r3, #0
 8002622:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	e003      	b.n	8002632 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002632:	e03b      	b.n	80026ac <HAL_UART_Receive+0x1a8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	0013      	movs	r3, r2
 800263e:	2200      	movs	r2, #0
 8002640:	2120      	movs	r1, #32
 8002642:	f000 fb2b 	bl	8002c9c <UART_WaitOnFlagUntilTimeout>
 8002646:	1e03      	subs	r3, r0, #0
 8002648:	d005      	beq.n	8002656 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2280      	movs	r2, #128	; 0x80
 800264e:	2120      	movs	r1, #32
 8002650:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e037      	b.n	80026c6 <HAL_UART_Receive+0x1c2>
      }
      if (pdata8bits == NULL)
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10e      	bne.n	800267a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002662:	b29b      	uxth	r3, r3
 8002664:	2212      	movs	r2, #18
 8002666:	18ba      	adds	r2, r7, r2
 8002668:	8812      	ldrh	r2, [r2, #0]
 800266a:	4013      	ands	r3, r2
 800266c:	b29a      	uxth	r2, r3
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	3302      	adds	r3, #2
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	e00f      	b.n	800269a <HAL_UART_Receive+0x196>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002680:	b29b      	uxth	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2212      	movs	r2, #18
 8002686:	18ba      	adds	r2, r7, r2
 8002688:	8812      	ldrh	r2, [r2, #0]
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	4013      	ands	r3, r2
 800268e:	b2da      	uxtb	r2, r3
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	3301      	adds	r3, #1
 8002698:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	225a      	movs	r2, #90	; 0x5a
 800269e:	5a9b      	ldrh	r3, [r3, r2]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b299      	uxth	r1, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	225a      	movs	r2, #90	; 0x5a
 80026aa:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	225a      	movs	r2, #90	; 0x5a
 80026b0:	5a9b      	ldrh	r3, [r3, r2]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1bd      	bne.n	8002634 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2280      	movs	r2, #128	; 0x80
 80026bc:	2120      	movs	r1, #32
 80026be:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e000      	b.n	80026c6 <HAL_UART_Receive+0x1c2>
  }
  else
  {
    return HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
  }
}
 80026c6:	0018      	movs	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b008      	add	sp, #32
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	000001ff 	.word	0x000001ff

080026d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026dc:	231e      	movs	r3, #30
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4aaf      	ldr	r2, [pc, #700]	; (80029c0 <UART_SetConfig+0x2ec>)
 8002704:	4013      	ands	r3, r2
 8002706:	0019      	movs	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	4aaa      	ldr	r2, [pc, #680]	; (80029c4 <UART_SetConfig+0x2f0>)
 800271a:	4013      	ands	r3, r2
 800271c:	0019      	movs	r1, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	4313      	orrs	r3, r2
 8002738:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	4aa1      	ldr	r2, [pc, #644]	; (80029c8 <UART_SetConfig+0x2f4>)
 8002742:	4013      	ands	r3, r2
 8002744:	0019      	movs	r1, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	430a      	orrs	r2, r1
 800274e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a9d      	ldr	r2, [pc, #628]	; (80029cc <UART_SetConfig+0x2f8>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d127      	bne.n	80027aa <UART_SetConfig+0xd6>
 800275a:	4b9d      	ldr	r3, [pc, #628]	; (80029d0 <UART_SetConfig+0x2fc>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	2203      	movs	r2, #3
 8002760:	4013      	ands	r3, r2
 8002762:	2b03      	cmp	r3, #3
 8002764:	d00d      	beq.n	8002782 <UART_SetConfig+0xae>
 8002766:	d81b      	bhi.n	80027a0 <UART_SetConfig+0xcc>
 8002768:	2b02      	cmp	r3, #2
 800276a:	d014      	beq.n	8002796 <UART_SetConfig+0xc2>
 800276c:	d818      	bhi.n	80027a0 <UART_SetConfig+0xcc>
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <UART_SetConfig+0xa4>
 8002772:	2b01      	cmp	r3, #1
 8002774:	d00a      	beq.n	800278c <UART_SetConfig+0xb8>
 8002776:	e013      	b.n	80027a0 <UART_SetConfig+0xcc>
 8002778:	231f      	movs	r3, #31
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
 8002780:	e065      	b.n	800284e <UART_SetConfig+0x17a>
 8002782:	231f      	movs	r3, #31
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	2202      	movs	r2, #2
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	e060      	b.n	800284e <UART_SetConfig+0x17a>
 800278c:	231f      	movs	r3, #31
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	2204      	movs	r2, #4
 8002792:	701a      	strb	r2, [r3, #0]
 8002794:	e05b      	b.n	800284e <UART_SetConfig+0x17a>
 8002796:	231f      	movs	r3, #31
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	2208      	movs	r2, #8
 800279c:	701a      	strb	r2, [r3, #0]
 800279e:	e056      	b.n	800284e <UART_SetConfig+0x17a>
 80027a0:	231f      	movs	r3, #31
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	2210      	movs	r2, #16
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	e051      	b.n	800284e <UART_SetConfig+0x17a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a89      	ldr	r2, [pc, #548]	; (80029d4 <UART_SetConfig+0x300>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d134      	bne.n	800281e <UART_SetConfig+0x14a>
 80027b4:	4b86      	ldr	r3, [pc, #536]	; (80029d0 <UART_SetConfig+0x2fc>)
 80027b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027b8:	23c0      	movs	r3, #192	; 0xc0
 80027ba:	029b      	lsls	r3, r3, #10
 80027bc:	4013      	ands	r3, r2
 80027be:	22c0      	movs	r2, #192	; 0xc0
 80027c0:	0292      	lsls	r2, r2, #10
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d017      	beq.n	80027f6 <UART_SetConfig+0x122>
 80027c6:	22c0      	movs	r2, #192	; 0xc0
 80027c8:	0292      	lsls	r2, r2, #10
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d822      	bhi.n	8002814 <UART_SetConfig+0x140>
 80027ce:	2280      	movs	r2, #128	; 0x80
 80027d0:	0292      	lsls	r2, r2, #10
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d019      	beq.n	800280a <UART_SetConfig+0x136>
 80027d6:	2280      	movs	r2, #128	; 0x80
 80027d8:	0292      	lsls	r2, r2, #10
 80027da:	4293      	cmp	r3, r2
 80027dc:	d81a      	bhi.n	8002814 <UART_SetConfig+0x140>
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d004      	beq.n	80027ec <UART_SetConfig+0x118>
 80027e2:	2280      	movs	r2, #128	; 0x80
 80027e4:	0252      	lsls	r2, r2, #9
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00a      	beq.n	8002800 <UART_SetConfig+0x12c>
 80027ea:	e013      	b.n	8002814 <UART_SetConfig+0x140>
 80027ec:	231f      	movs	r3, #31
 80027ee:	18fb      	adds	r3, r7, r3
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
 80027f4:	e02b      	b.n	800284e <UART_SetConfig+0x17a>
 80027f6:	231f      	movs	r3, #31
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	2202      	movs	r2, #2
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	e026      	b.n	800284e <UART_SetConfig+0x17a>
 8002800:	231f      	movs	r3, #31
 8002802:	18fb      	adds	r3, r7, r3
 8002804:	2204      	movs	r2, #4
 8002806:	701a      	strb	r2, [r3, #0]
 8002808:	e021      	b.n	800284e <UART_SetConfig+0x17a>
 800280a:	231f      	movs	r3, #31
 800280c:	18fb      	adds	r3, r7, r3
 800280e:	2208      	movs	r2, #8
 8002810:	701a      	strb	r2, [r3, #0]
 8002812:	e01c      	b.n	800284e <UART_SetConfig+0x17a>
 8002814:	231f      	movs	r3, #31
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	2210      	movs	r2, #16
 800281a:	701a      	strb	r2, [r3, #0]
 800281c:	e017      	b.n	800284e <UART_SetConfig+0x17a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a6d      	ldr	r2, [pc, #436]	; (80029d8 <UART_SetConfig+0x304>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d104      	bne.n	8002832 <UART_SetConfig+0x15e>
 8002828:	231f      	movs	r3, #31
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
 8002830:	e00d      	b.n	800284e <UART_SetConfig+0x17a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a69      	ldr	r2, [pc, #420]	; (80029dc <UART_SetConfig+0x308>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d104      	bne.n	8002846 <UART_SetConfig+0x172>
 800283c:	231f      	movs	r3, #31
 800283e:	18fb      	adds	r3, r7, r3
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
 8002844:	e003      	b.n	800284e <UART_SetConfig+0x17a>
 8002846:	231f      	movs	r3, #31
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	2210      	movs	r2, #16
 800284c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69da      	ldr	r2, [r3, #28]
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	429a      	cmp	r2, r3
 8002858:	d15c      	bne.n	8002914 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 800285a:	231f      	movs	r3, #31
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b08      	cmp	r3, #8
 8002862:	d015      	beq.n	8002890 <UART_SetConfig+0x1bc>
 8002864:	dc18      	bgt.n	8002898 <UART_SetConfig+0x1c4>
 8002866:	2b04      	cmp	r3, #4
 8002868:	d00d      	beq.n	8002886 <UART_SetConfig+0x1b2>
 800286a:	dc15      	bgt.n	8002898 <UART_SetConfig+0x1c4>
 800286c:	2b00      	cmp	r3, #0
 800286e:	d002      	beq.n	8002876 <UART_SetConfig+0x1a2>
 8002870:	2b02      	cmp	r3, #2
 8002872:	d005      	beq.n	8002880 <UART_SetConfig+0x1ac>
 8002874:	e010      	b.n	8002898 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002876:	f7ff fb7f 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 800287a:	0003      	movs	r3, r0
 800287c:	61bb      	str	r3, [r7, #24]
        break;
 800287e:	e012      	b.n	80028a6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002880:	4b57      	ldr	r3, [pc, #348]	; (80029e0 <UART_SetConfig+0x30c>)
 8002882:	61bb      	str	r3, [r7, #24]
        break;
 8002884:	e00f      	b.n	80028a6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002886:	f7ff fafb 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 800288a:	0003      	movs	r3, r0
 800288c:	61bb      	str	r3, [r7, #24]
        break;
 800288e:	e00a      	b.n	80028a6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	61bb      	str	r3, [r7, #24]
        break;
 8002896:	e006      	b.n	80028a6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800289c:	231e      	movs	r3, #30
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	2201      	movs	r2, #1
 80028a2:	701a      	strb	r2, [r3, #0]
        break;
 80028a4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d100      	bne.n	80028ae <UART_SetConfig+0x1da>
 80028ac:	e07a      	b.n	80029a4 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	005a      	lsls	r2, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	085b      	lsrs	r3, r3, #1
 80028b8:	18d2      	adds	r2, r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	0019      	movs	r1, r3
 80028c0:	0010      	movs	r0, r2
 80028c2:	f7fd fc29 	bl	8000118 <__udivsi3>
 80028c6:	0003      	movs	r3, r0
 80028c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	2b0f      	cmp	r3, #15
 80028ce:	d91c      	bls.n	800290a <UART_SetConfig+0x236>
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	025b      	lsls	r3, r3, #9
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d217      	bcs.n	800290a <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	b29a      	uxth	r2, r3
 80028de:	200e      	movs	r0, #14
 80028e0:	183b      	adds	r3, r7, r0
 80028e2:	210f      	movs	r1, #15
 80028e4:	438a      	bics	r2, r1
 80028e6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	085b      	lsrs	r3, r3, #1
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2207      	movs	r2, #7
 80028f0:	4013      	ands	r3, r2
 80028f2:	b299      	uxth	r1, r3
 80028f4:	183b      	adds	r3, r7, r0
 80028f6:	183a      	adds	r2, r7, r0
 80028f8:	8812      	ldrh	r2, [r2, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	183a      	adds	r2, r7, r0
 8002904:	8812      	ldrh	r2, [r2, #0]
 8002906:	60da      	str	r2, [r3, #12]
 8002908:	e04c      	b.n	80029a4 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800290a:	231e      	movs	r3, #30
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	2201      	movs	r2, #1
 8002910:	701a      	strb	r2, [r3, #0]
 8002912:	e047      	b.n	80029a4 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002914:	231f      	movs	r3, #31
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b08      	cmp	r3, #8
 800291c:	d015      	beq.n	800294a <UART_SetConfig+0x276>
 800291e:	dc18      	bgt.n	8002952 <UART_SetConfig+0x27e>
 8002920:	2b04      	cmp	r3, #4
 8002922:	d00d      	beq.n	8002940 <UART_SetConfig+0x26c>
 8002924:	dc15      	bgt.n	8002952 <UART_SetConfig+0x27e>
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <UART_SetConfig+0x25c>
 800292a:	2b02      	cmp	r3, #2
 800292c:	d005      	beq.n	800293a <UART_SetConfig+0x266>
 800292e:	e010      	b.n	8002952 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002930:	f7ff fb22 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 8002934:	0003      	movs	r3, r0
 8002936:	61bb      	str	r3, [r7, #24]
        break;
 8002938:	e012      	b.n	8002960 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800293a:	4b29      	ldr	r3, [pc, #164]	; (80029e0 <UART_SetConfig+0x30c>)
 800293c:	61bb      	str	r3, [r7, #24]
        break;
 800293e:	e00f      	b.n	8002960 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002940:	f7ff fa9e 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8002944:	0003      	movs	r3, r0
 8002946:	61bb      	str	r3, [r7, #24]
        break;
 8002948:	e00a      	b.n	8002960 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	61bb      	str	r3, [r7, #24]
        break;
 8002950:	e006      	b.n	8002960 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002956:	231e      	movs	r3, #30
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
        break;
 800295e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d01e      	beq.n	80029a4 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	085a      	lsrs	r2, r3, #1
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	18d2      	adds	r2, r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	0019      	movs	r1, r3
 8002976:	0010      	movs	r0, r2
 8002978:	f7fd fbce 	bl	8000118 <__udivsi3>
 800297c:	0003      	movs	r3, r0
 800297e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	2b0f      	cmp	r3, #15
 8002984:	d90a      	bls.n	800299c <UART_SetConfig+0x2c8>
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	025b      	lsls	r3, r3, #9
 800298c:	429a      	cmp	r2, r3
 800298e:	d205      	bcs.n	800299c <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	b29a      	uxth	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	e003      	b.n	80029a4 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800299c:	231e      	movs	r3, #30
 800299e:	18fb      	adds	r3, r7, r3
 80029a0:	2201      	movs	r2, #1
 80029a2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80029b0:	231e      	movs	r3, #30
 80029b2:	18fb      	adds	r3, r7, r3
 80029b4:	781b      	ldrb	r3, [r3, #0]
}
 80029b6:	0018      	movs	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b008      	add	sp, #32
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	efff69f3 	.word	0xefff69f3
 80029c4:	ffffcfff 	.word	0xffffcfff
 80029c8:	fffff4ff 	.word	0xfffff4ff
 80029cc:	40013800 	.word	0x40013800
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40004400 	.word	0x40004400
 80029d8:	40004800 	.word	0x40004800
 80029dc:	40004c00 	.word	0x40004c00
 80029e0:	007a1200 	.word	0x007a1200

080029e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	2201      	movs	r2, #1
 80029f2:	4013      	ands	r3, r2
 80029f4:	d00b      	beq.n	8002a0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4a4a      	ldr	r2, [pc, #296]	; (8002b28 <UART_AdvFeatureConfig+0x144>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	0019      	movs	r1, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	2202      	movs	r2, #2
 8002a14:	4013      	ands	r3, r2
 8002a16:	d00b      	beq.n	8002a30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4a43      	ldr	r2, [pc, #268]	; (8002b2c <UART_AdvFeatureConfig+0x148>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	0019      	movs	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	2204      	movs	r2, #4
 8002a36:	4013      	ands	r3, r2
 8002a38:	d00b      	beq.n	8002a52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4a3b      	ldr	r2, [pc, #236]	; (8002b30 <UART_AdvFeatureConfig+0x14c>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	0019      	movs	r1, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	2208      	movs	r2, #8
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d00b      	beq.n	8002a74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	4a34      	ldr	r2, [pc, #208]	; (8002b34 <UART_AdvFeatureConfig+0x150>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	0019      	movs	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	2210      	movs	r2, #16
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d00b      	beq.n	8002a96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	4a2c      	ldr	r2, [pc, #176]	; (8002b38 <UART_AdvFeatureConfig+0x154>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	0019      	movs	r1, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d00b      	beq.n	8002ab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	4a25      	ldr	r2, [pc, #148]	; (8002b3c <UART_AdvFeatureConfig+0x158>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	0019      	movs	r1, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	2240      	movs	r2, #64	; 0x40
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d01d      	beq.n	8002afe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <UART_AdvFeatureConfig+0x15c>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	0019      	movs	r1, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	035b      	lsls	r3, r3, #13
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d10b      	bne.n	8002afe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	4a15      	ldr	r2, [pc, #84]	; (8002b44 <UART_AdvFeatureConfig+0x160>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	0019      	movs	r1, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	2280      	movs	r2, #128	; 0x80
 8002b04:	4013      	ands	r3, r2
 8002b06:	d00b      	beq.n	8002b20 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	4a0e      	ldr	r2, [pc, #56]	; (8002b48 <UART_AdvFeatureConfig+0x164>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	0019      	movs	r1, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	605a      	str	r2, [r3, #4]
  }
}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b002      	add	sp, #8
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	fffdffff 	.word	0xfffdffff
 8002b2c:	fffeffff 	.word	0xfffeffff
 8002b30:	fffbffff 	.word	0xfffbffff
 8002b34:	ffff7fff 	.word	0xffff7fff
 8002b38:	ffffefff 	.word	0xffffefff
 8002b3c:	ffffdfff 	.word	0xffffdfff
 8002b40:	ffefffff 	.word	0xffefffff
 8002b44:	ff9fffff 	.word	0xff9fffff
 8002b48:	fff7ffff 	.word	0xfff7ffff

08002b4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b092      	sub	sp, #72	; 0x48
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2284      	movs	r2, #132	; 0x84
 8002b58:	2100      	movs	r1, #0
 8002b5a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b5c:	f7fe f846 	bl	8000bec <HAL_GetTick>
 8002b60:	0003      	movs	r3, r0
 8002b62:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2208      	movs	r2, #8
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d12c      	bne.n	8002bcc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	0391      	lsls	r1, r2, #14
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	4a46      	ldr	r2, [pc, #280]	; (8002c94 <UART_CheckIdleState+0x148>)
 8002b7c:	9200      	str	r2, [sp, #0]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f000 f88c 	bl	8002c9c <UART_WaitOnFlagUntilTimeout>
 8002b84:	1e03      	subs	r3, r0, #0
 8002b86:	d021      	beq.n	8002bcc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b88:	f3ef 8310 	mrs	r3, PRIMASK
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002b90:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b92:	2301      	movs	r3, #1
 8002b94:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b98:	f383 8810 	msr	PRIMASK, r3
}
 8002b9c:	46c0      	nop			; (mov r8, r8)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2180      	movs	r1, #128	; 0x80
 8002baa:	438a      	bics	r2, r1
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	f383 8810 	msr	PRIMASK, r3
}
 8002bb8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2278      	movs	r2, #120	; 0x78
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e05f      	b.n	8002c8c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2204      	movs	r2, #4
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d146      	bne.n	8002c68 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bdc:	2280      	movs	r2, #128	; 0x80
 8002bde:	03d1      	lsls	r1, r2, #15
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	4a2c      	ldr	r2, [pc, #176]	; (8002c94 <UART_CheckIdleState+0x148>)
 8002be4:	9200      	str	r2, [sp, #0]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f000 f858 	bl	8002c9c <UART_WaitOnFlagUntilTimeout>
 8002bec:	1e03      	subs	r3, r0, #0
 8002bee:	d03b      	beq.n	8002c68 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8002bf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f383 8810 	msr	PRIMASK, r3
}
 8002c04:	46c0      	nop			; (mov r8, r8)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4921      	ldr	r1, [pc, #132]	; (8002c98 <UART_CheckIdleState+0x14c>)
 8002c12:	400a      	ands	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f383 8810 	msr	PRIMASK, r3
}
 8002c20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c22:	f3ef 8310 	mrs	r3, PRIMASK
 8002c26:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c28:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c2a:	633b      	str	r3, [r7, #48]	; 0x30
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f383 8810 	msr	PRIMASK, r3
}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2101      	movs	r1, #1
 8002c44:	438a      	bics	r2, r1
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	f383 8810 	msr	PRIMASK, r3
}
 8002c52:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2280      	movs	r2, #128	; 0x80
 8002c58:	2120      	movs	r1, #32
 8002c5a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2278      	movs	r2, #120	; 0x78
 8002c60:	2100      	movs	r1, #0
 8002c62:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e011      	b.n	8002c8c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2280      	movs	r2, #128	; 0x80
 8002c72:	2120      	movs	r1, #32
 8002c74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2278      	movs	r2, #120	; 0x78
 8002c86:	2100      	movs	r1, #0
 8002c88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b010      	add	sp, #64	; 0x40
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	01ffffff 	.word	0x01ffffff
 8002c98:	fffffedf 	.word	0xfffffedf

08002c9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	1dfb      	adds	r3, r7, #7
 8002caa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cac:	e04b      	b.n	8002d46 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	d048      	beq.n	8002d46 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb4:	f7fd ff9a 	bl	8000bec <HAL_GetTick>
 8002cb8:	0002      	movs	r2, r0
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d302      	bcc.n	8002cca <UART_WaitOnFlagUntilTimeout+0x2e>
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e04b      	b.n	8002d66 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d035      	beq.n	8002d46 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	2208      	movs	r2, #8
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d111      	bne.n	8002d0c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2208      	movs	r2, #8
 8002cee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f000 f83c 	bl	8002d70 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2284      	movs	r2, #132	; 0x84
 8002cfc:	2108      	movs	r1, #8
 8002cfe:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2278      	movs	r2, #120	; 0x78
 8002d04:	2100      	movs	r1, #0
 8002d06:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e02c      	b.n	8002d66 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69da      	ldr	r2, [r3, #28]
 8002d12:	2380      	movs	r3, #128	; 0x80
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	401a      	ands	r2, r3
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d112      	bne.n	8002d46 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2280      	movs	r2, #128	; 0x80
 8002d26:	0112      	lsls	r2, r2, #4
 8002d28:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f000 f81f 	bl	8002d70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2284      	movs	r2, #132	; 0x84
 8002d36:	2120      	movs	r1, #32
 8002d38:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2278      	movs	r2, #120	; 0x78
 8002d3e:	2100      	movs	r1, #0
 8002d40:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e00f      	b.n	8002d66 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	425a      	negs	r2, r3
 8002d56:	4153      	adcs	r3, r2
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	001a      	movs	r2, r3
 8002d5c:	1dfb      	adds	r3, r7, #7
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d0a4      	beq.n	8002cae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	0018      	movs	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	b004      	add	sp, #16
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08e      	sub	sp, #56	; 0x38
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d78:	f3ef 8310 	mrs	r3, PRIMASK
 8002d7c:	617b      	str	r3, [r7, #20]
  return(result);
 8002d7e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
 8002d82:	2301      	movs	r3, #1
 8002d84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	f383 8810 	msr	PRIMASK, r3
}
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4926      	ldr	r1, [pc, #152]	; (8002e34 <UART_EndRxTransfer+0xc4>)
 8002d9a:	400a      	ands	r2, r1
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	f383 8810 	msr	PRIMASK, r3
}
 8002da8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002daa:	f3ef 8310 	mrs	r3, PRIMASK
 8002dae:	623b      	str	r3, [r7, #32]
  return(result);
 8002db0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db2:	633b      	str	r3, [r7, #48]	; 0x30
 8002db4:	2301      	movs	r3, #1
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	f383 8810 	msr	PRIMASK, r3
}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2101      	movs	r1, #1
 8002dcc:	438a      	bics	r2, r1
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd6:	f383 8810 	msr	PRIMASK, r3
}
 8002dda:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d118      	bne.n	8002e16 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002de4:	f3ef 8310 	mrs	r3, PRIMASK
 8002de8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dee:	2301      	movs	r3, #1
 8002df0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f383 8810 	msr	PRIMASK, r3
}
 8002df8:	46c0      	nop			; (mov r8, r8)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2110      	movs	r1, #16
 8002e06:	438a      	bics	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f383 8810 	msr	PRIMASK, r3
}
 8002e14:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2280      	movs	r2, #128	; 0x80
 8002e1a:	2120      	movs	r1, #32
 8002e1c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b00e      	add	sp, #56	; 0x38
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	fffffedf 	.word	0xfffffedf

08002e38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <USB_DisableGlobalInt+0x30>)
 8002e42:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2240      	movs	r2, #64	; 0x40
 8002e48:	5a9b      	ldrh	r3, [r3, r2]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	b292      	uxth	r2, r2
 8002e50:	43d2      	mvns	r2, r2
 8002e52:	b292      	uxth	r2, r2
 8002e54:	4013      	ands	r3, r2
 8002e56:	b299      	uxth	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2240      	movs	r2, #64	; 0x40
 8002e5c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b004      	add	sp, #16
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	0000bf80 	.word	0x0000bf80

08002e6c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	b590      	push	{r4, r7, lr}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	2004      	movs	r0, #4
 8002e78:	2410      	movs	r4, #16
 8002e7a:	1900      	adds	r0, r0, r4
 8002e7c:	2408      	movs	r4, #8
 8002e7e:	46a4      	mov	ip, r4
 8002e80:	44bc      	add	ip, r7
 8002e82:	4460      	add	r0, ip
 8002e84:	6001      	str	r1, [r0, #0]
 8002e86:	6042      	str	r2, [r0, #4]
 8002e88:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2240      	movs	r2, #64	; 0x40
 8002e8e:	2101      	movs	r1, #1
 8002e90:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2240      	movs	r2, #64	; 0x40
 8002e96:	2100      	movs	r1, #0
 8002e98:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2244      	movs	r2, #68	; 0x44
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2250      	movs	r2, #80	; 0x50
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	0018      	movs	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b003      	add	sp, #12
 8002eb2:	bc90      	pop	{r4, r7}
 8002eb4:	bc08      	pop	{r3}
 8002eb6:	b004      	add	sp, #16
 8002eb8:	4718      	bx	r3
	...

08002ebc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ec2:	f3ef 8305 	mrs	r3, IPSR
 8002ec6:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ece:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed2:	607b      	str	r3, [r7, #4]
  return(result);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <osKernelInitialize+0x2e>
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <osKernelInitialize+0x54>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d103      	bne.n	8002eea <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8002ee2:	2306      	movs	r3, #6
 8002ee4:	425b      	negs	r3, r3
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	e00c      	b.n	8002f04 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <osKernelInitialize+0x54>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d105      	bne.n	8002efe <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002ef2:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <osKernelInitialize+0x54>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	e002      	b.n	8002f04 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8002efe:	2301      	movs	r3, #1
 8002f00:	425b      	negs	r3, r3
 8002f02:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002f04:	68fb      	ldr	r3, [r7, #12]
}
 8002f06:	0018      	movs	r0, r3
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	b004      	add	sp, #16
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	200004b0 	.word	0x200004b0

08002f14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f1a:	f3ef 8305 	mrs	r3, IPSR
 8002f1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f26:	f3ef 8310 	mrs	r3, PRIMASK
 8002f2a:	607b      	str	r3, [r7, #4]
  return(result);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <osKernelStart+0x2e>
 8002f32:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <osKernelStart+0x58>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d103      	bne.n	8002f42 <osKernelStart+0x2e>
    stat = osErrorISR;
 8002f3a:	2306      	movs	r3, #6
 8002f3c:	425b      	negs	r3, r3
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	e00e      	b.n	8002f60 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002f42:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <osKernelStart+0x58>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d107      	bne.n	8002f5a <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8002f4a:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <osKernelStart+0x58>)
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002f50:	f000 ff7e 	bl	8003e50 <vTaskStartScheduler>
      stat = osOK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	e002      	b.n	8002f60 <osKernelStart+0x4c>
    } else {
      stat = osError;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	425b      	negs	r3, r3
 8002f5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002f60:	68fb      	ldr	r3, [r7, #12]
}
 8002f62:	0018      	movs	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b004      	add	sp, #16
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	200004b0 	.word	0x200004b0

08002f70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002f70:	b5b0      	push	{r4, r5, r7, lr}
 8002f72:	b090      	sub	sp, #64	; 0x40
 8002f74:	af04      	add	r7, sp, #16
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f80:	f3ef 8305 	mrs	r3, IPSR
 8002f84:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f86:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d000      	beq.n	8002f8e <osThreadNew+0x1e>
 8002f8c:	e090      	b.n	80030b0 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f92:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d004      	beq.n	8002fa4 <osThreadNew+0x34>
 8002f9a:	4b48      	ldr	r3, [pc, #288]	; (80030bc <osThreadNew+0x14c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d100      	bne.n	8002fa4 <osThreadNew+0x34>
 8002fa2:	e085      	b.n	80030b0 <osThreadNew+0x140>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d100      	bne.n	8002fac <osThreadNew+0x3c>
 8002faa:	e081      	b.n	80030b0 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002fb0:	2318      	movs	r3, #24
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8002fb4:	2117      	movs	r1, #23
 8002fb6:	187b      	adds	r3, r7, r1
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8002fbc:	187b      	adds	r3, r7, r1
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	425b      	negs	r3, r3
 8002fc4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d044      	beq.n	8003056 <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <osThreadNew+0x6a>
        name = attr->name;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d007      	beq.n	8002ffe <osThreadNew+0x8e>
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	2b38      	cmp	r3, #56	; 0x38
 8002ff2:	d804      	bhi.n	8002ffe <osThreadNew+0x8e>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d001      	beq.n	8003002 <osThreadNew+0x92>
        return (NULL);
 8002ffe:	2300      	movs	r3, #0
 8003000:	e057      	b.n	80030b2 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	089b      	lsrs	r3, r3, #2
 8003010:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00e      	beq.n	8003038 <osThreadNew+0xc8>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	2b5b      	cmp	r3, #91	; 0x5b
 8003020:	d90a      	bls.n	8003038 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003026:	2b00      	cmp	r3, #0
 8003028:	d006      	beq.n	8003038 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <osThreadNew+0xc8>
        mem = 1;
 8003032:	2301      	movs	r3, #1
 8003034:	623b      	str	r3, [r7, #32]
 8003036:	e010      	b.n	800305a <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10c      	bne.n	800305a <osThreadNew+0xea>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d108      	bne.n	800305a <osThreadNew+0xea>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d104      	bne.n	800305a <osThreadNew+0xea>
          mem = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	623b      	str	r3, [r7, #32]
 8003054:	e001      	b.n	800305a <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d112      	bne.n	8003086 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003068:	68bd      	ldr	r5, [r7, #8]
 800306a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800306c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	9302      	str	r3, [sp, #8]
 8003072:	9201      	str	r2, [sp, #4]
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	002b      	movs	r3, r5
 800307a:	0022      	movs	r2, r4
 800307c:	f000 fd49 	bl	8003b12 <xTaskCreateStatic>
 8003080:	0003      	movs	r3, r0
 8003082:	613b      	str	r3, [r7, #16]
 8003084:	e014      	b.n	80030b0 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d111      	bne.n	80030b0 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308e:	b29a      	uxth	r2, r3
 8003090:	68bc      	ldr	r4, [r7, #8]
 8003092:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	2310      	movs	r3, #16
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	9301      	str	r3, [sp, #4]
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	0023      	movs	r3, r4
 80030a2:	f000 fd79 	bl	8003b98 <xTaskCreate>
 80030a6:	0003      	movs	r3, r0
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d001      	beq.n	80030b0 <osThreadNew+0x140>
          hTask = NULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80030b0:	693b      	ldr	r3, [r7, #16]
}
 80030b2:	0018      	movs	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b00c      	add	sp, #48	; 0x30
 80030b8:	bdb0      	pop	{r4, r5, r7, pc}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	200004b0 	.word	0x200004b0

080030c0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030c8:	f3ef 8305 	mrs	r3, IPSR
 80030cc:	613b      	str	r3, [r7, #16]
  return(result);
 80030ce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d109      	bne.n	80030e8 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d4:	f3ef 8310 	mrs	r3, PRIMASK
 80030d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d007      	beq.n	80030f0 <osDelay+0x30>
 80030e0:	4b0a      	ldr	r3, [pc, #40]	; (800310c <osDelay+0x4c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d103      	bne.n	80030f0 <osDelay+0x30>
    stat = osErrorISR;
 80030e8:	2306      	movs	r3, #6
 80030ea:	425b      	negs	r3, r3
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	e008      	b.n	8003102 <osDelay+0x42>
  }
  else {
    stat = osOK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <osDelay+0x42>
      vTaskDelay(ticks);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	0018      	movs	r0, r3
 80030fe:	f000 fe81 	bl	8003e04 <vTaskDelay>
    }
  }

  return (stat);
 8003102:	697b      	ldr	r3, [r7, #20]
}
 8003104:	0018      	movs	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	b006      	add	sp, #24
 800310a:	bd80      	pop	{r7, pc}
 800310c:	200004b0 	.word	0x200004b0

08003110 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4a06      	ldr	r2, [pc, #24]	; (8003138 <vApplicationGetIdleTaskMemory+0x28>)
 8003120:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	4a05      	ldr	r2, [pc, #20]	; (800313c <vApplicationGetIdleTaskMemory+0x2c>)
 8003126:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2280      	movs	r2, #128	; 0x80
 800312c:	601a      	str	r2, [r3, #0]
}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	46bd      	mov	sp, r7
 8003132:	b004      	add	sp, #16
 8003134:	bd80      	pop	{r7, pc}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	200004b4 	.word	0x200004b4
 800313c:	20000510 	.word	0x20000510

08003140 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4a06      	ldr	r2, [pc, #24]	; (8003168 <vApplicationGetTimerTaskMemory+0x28>)
 8003150:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	4a05      	ldr	r2, [pc, #20]	; (800316c <vApplicationGetTimerTaskMemory+0x2c>)
 8003156:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2280      	movs	r2, #128	; 0x80
 800315c:	0052      	lsls	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]
}
 8003160:	46c0      	nop			; (mov r8, r8)
 8003162:	46bd      	mov	sp, r7
 8003164:	b004      	add	sp, #16
 8003166:	bd80      	pop	{r7, pc}
 8003168:	20000710 	.word	0x20000710
 800316c:	2000076c 	.word	0x2000076c

08003170 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3308      	adds	r3, #8
 800317c:	001a      	movs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	4252      	negs	r2, r2
 8003188:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3308      	adds	r3, #8
 800318e:	001a      	movs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3308      	adds	r3, #8
 8003198:	001a      	movs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b002      	add	sp, #8
 80031aa:	bd80      	pop	{r7, pc}

080031ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	46bd      	mov	sp, r7
 80031be:	b002      	add	sp, #8
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	601a      	str	r2, [r3, #0]
}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	46bd      	mov	sp, r7
 8003202:	b004      	add	sp, #16
 8003204:	bd80      	pop	{r7, pc}

08003206 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b084      	sub	sp, #16
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	3301      	adds	r3, #1
 800321a:	d103      	bne.n	8003224 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	e00c      	b.n	800323e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3308      	adds	r3, #8
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	e002      	b.n	8003232 <vListInsert+0x2c>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	429a      	cmp	r2, r3
 800323c:	d2f6      	bcs.n	800322c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	601a      	str	r2, [r3, #0]
}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	46bd      	mov	sp, r7
 800326e:	b004      	add	sp, #16
 8003270:	bd80      	pop	{r7, pc}

08003272 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6892      	ldr	r2, [r2, #8]
 8003288:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6852      	ldr	r2, [r2, #4]
 8003292:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	429a      	cmp	r2, r3
 800329c:	d103      	bne.n	80032a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	1e5a      	subs	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
}
 80032ba:	0018      	movs	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	b004      	add	sp, #16
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <xQueueGenericReset+0x18>
 80032d6:	b672      	cpsid	i
 80032d8:	e7fe      	b.n	80032d8 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80032da:	f001 fdc9 	bl	8004e70 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	434b      	muls	r3, r1
 80032ec:	18d2      	adds	r2, r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003308:	1e59      	subs	r1, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	434b      	muls	r3, r1
 8003310:	18d2      	adds	r2, r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2244      	movs	r2, #68	; 0x44
 800331a:	21ff      	movs	r1, #255	; 0xff
 800331c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2245      	movs	r2, #69	; 0x45
 8003322:	21ff      	movs	r1, #255	; 0xff
 8003324:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10d      	bne.n	8003348 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d013      	beq.n	800335c <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	3310      	adds	r3, #16
 8003338:	0018      	movs	r0, r3
 800333a:	f000 ffcd 	bl	80042d8 <xTaskRemoveFromEventList>
 800333e:	1e03      	subs	r3, r0, #0
 8003340:	d00c      	beq.n	800335c <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003342:	f001 fd85 	bl	8004e50 <vPortYield>
 8003346:	e009      	b.n	800335c <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3310      	adds	r3, #16
 800334c:	0018      	movs	r0, r3
 800334e:	f7ff ff0f 	bl	8003170 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	3324      	adds	r3, #36	; 0x24
 8003356:	0018      	movs	r0, r3
 8003358:	f7ff ff0a 	bl	8003170 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800335c:	f001 fd9a 	bl	8004e94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003360:	2301      	movs	r3, #1
}
 8003362:	0018      	movs	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	b004      	add	sp, #16
 8003368:	bd80      	pop	{r7, pc}

0800336a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800336a:	b590      	push	{r4, r7, lr}
 800336c:	b089      	sub	sp, #36	; 0x24
 800336e:	af02      	add	r7, sp, #8
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
 8003376:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <xQueueGenericCreateStatic+0x18>
 800337e:	b672      	cpsid	i
 8003380:	e7fe      	b.n	8003380 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <xQueueGenericCreateStatic+0x22>
 8003388:	b672      	cpsid	i
 800338a:	e7fe      	b.n	800338a <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <xQueueGenericCreateStatic+0x2e>
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <xQueueGenericCreateStatic+0x32>
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <xQueueGenericCreateStatic+0x34>
 800339c:	2300      	movs	r3, #0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <xQueueGenericCreateStatic+0x3c>
 80033a2:	b672      	cpsid	i
 80033a4:	e7fe      	b.n	80033a4 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d102      	bne.n	80033b2 <xQueueGenericCreateStatic+0x48>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <xQueueGenericCreateStatic+0x4c>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <xQueueGenericCreateStatic+0x4e>
 80033b6:	2300      	movs	r3, #0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <xQueueGenericCreateStatic+0x56>
 80033bc:	b672      	cpsid	i
 80033be:	e7fe      	b.n	80033be <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80033c0:	2350      	movs	r3, #80	; 0x50
 80033c2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	2b50      	cmp	r3, #80	; 0x50
 80033c8:	d001      	beq.n	80033ce <xQueueGenericCreateStatic+0x64>
 80033ca:	b672      	cpsid	i
 80033cc:	e7fe      	b.n	80033cc <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00e      	beq.n	80033f6 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	2246      	movs	r2, #70	; 0x46
 80033dc:	2101      	movs	r1, #1
 80033de:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033e0:	2328      	movs	r3, #40	; 0x28
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	781c      	ldrb	r4, [r3, #0]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	0023      	movs	r3, r4
 80033f2:	f000 f805 	bl	8003400 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80033f6:	697b      	ldr	r3, [r7, #20]
	}
 80033f8:	0018      	movs	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b007      	add	sp, #28
 80033fe:	bd90      	pop	{r4, r7, pc}

08003400 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	001a      	movs	r2, r3
 800340e:	1cfb      	adds	r3, r7, #3
 8003410:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d103      	bne.n	8003420 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	e002      	b.n	8003426 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2101      	movs	r1, #1
 8003436:	0018      	movs	r0, r3
 8003438:	f7ff ff43 	bl	80032c2 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	1cfa      	adds	r2, r7, #3
 8003440:	214c      	movs	r1, #76	; 0x4c
 8003442:	7812      	ldrb	r2, [r2, #0]
 8003444:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	46bd      	mov	sp, r7
 800344a:	b004      	add	sp, #16
 800344c:	bd80      	pop	{r7, pc}

0800344e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b08a      	sub	sp, #40	; 0x28
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800345c:	2300      	movs	r3, #0
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <xQueueGenericSend+0x20>
 800346a:	b672      	cpsid	i
 800346c:	e7fe      	b.n	800346c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d103      	bne.n	800347c <xQueueGenericSend+0x2e>
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <xQueueGenericSend+0x32>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <xQueueGenericSend+0x34>
 8003480:	2300      	movs	r3, #0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <xQueueGenericSend+0x3c>
 8003486:	b672      	cpsid	i
 8003488:	e7fe      	b.n	8003488 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b02      	cmp	r3, #2
 800348e:	d103      	bne.n	8003498 <xQueueGenericSend+0x4a>
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <xQueueGenericSend+0x4e>
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <xQueueGenericSend+0x50>
 800349c:	2300      	movs	r3, #0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <xQueueGenericSend+0x58>
 80034a2:	b672      	cpsid	i
 80034a4:	e7fe      	b.n	80034a4 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034a6:	f001 f8af 	bl	8004608 <xTaskGetSchedulerState>
 80034aa:	1e03      	subs	r3, r0, #0
 80034ac:	d102      	bne.n	80034b4 <xQueueGenericSend+0x66>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <xQueueGenericSend+0x6a>
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <xQueueGenericSend+0x6c>
 80034b8:	2300      	movs	r3, #0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <xQueueGenericSend+0x74>
 80034be:	b672      	cpsid	i
 80034c0:	e7fe      	b.n	80034c0 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034c2:	f001 fcd5 	bl	8004e70 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d302      	bcc.n	80034d8 <xQueueGenericSend+0x8a>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d11e      	bne.n	8003516 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	0018      	movs	r0, r3
 80034e0:	f000 f99f 	bl	8003822 <prvCopyDataToQueue>
 80034e4:	0003      	movs	r3, r0
 80034e6:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d009      	beq.n	8003504 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	3324      	adds	r3, #36	; 0x24
 80034f4:	0018      	movs	r0, r3
 80034f6:	f000 feef 	bl	80042d8 <xTaskRemoveFromEventList>
 80034fa:	1e03      	subs	r3, r0, #0
 80034fc:	d007      	beq.n	800350e <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034fe:	f001 fca7 	bl	8004e50 <vPortYield>
 8003502:	e004      	b.n	800350e <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800350a:	f001 fca1 	bl	8004e50 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800350e:	f001 fcc1 	bl	8004e94 <vPortExitCritical>
				return pdPASS;
 8003512:	2301      	movs	r3, #1
 8003514:	e05b      	b.n	80035ce <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d103      	bne.n	8003524 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800351c:	f001 fcba 	bl	8004e94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003520:	2300      	movs	r3, #0
 8003522:	e054      	b.n	80035ce <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800352a:	2314      	movs	r3, #20
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	0018      	movs	r0, r3
 8003530:	f000 ff2e 	bl	8004390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003534:	2301      	movs	r3, #1
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003538:	f001 fcac 	bl	8004e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800353c:	f000 fcdc 	bl	8003ef8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003540:	f001 fc96 	bl	8004e70 <vPortEnterCritical>
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	2244      	movs	r2, #68	; 0x44
 8003548:	5c9b      	ldrb	r3, [r3, r2]
 800354a:	b25b      	sxtb	r3, r3
 800354c:	3301      	adds	r3, #1
 800354e:	d103      	bne.n	8003558 <xQueueGenericSend+0x10a>
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	2244      	movs	r2, #68	; 0x44
 8003554:	2100      	movs	r1, #0
 8003556:	5499      	strb	r1, [r3, r2]
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	2245      	movs	r2, #69	; 0x45
 800355c:	5c9b      	ldrb	r3, [r3, r2]
 800355e:	b25b      	sxtb	r3, r3
 8003560:	3301      	adds	r3, #1
 8003562:	d103      	bne.n	800356c <xQueueGenericSend+0x11e>
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	2245      	movs	r2, #69	; 0x45
 8003568:	2100      	movs	r1, #0
 800356a:	5499      	strb	r1, [r3, r2]
 800356c:	f001 fc92 	bl	8004e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003570:	1d3a      	adds	r2, r7, #4
 8003572:	2314      	movs	r3, #20
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	0011      	movs	r1, r2
 8003578:	0018      	movs	r0, r3
 800357a:	f000 ff1d 	bl	80043b8 <xTaskCheckForTimeOut>
 800357e:	1e03      	subs	r3, r0, #0
 8003580:	d11e      	bne.n	80035c0 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	0018      	movs	r0, r3
 8003586:	f000 fa51 	bl	8003a2c <prvIsQueueFull>
 800358a:	1e03      	subs	r3, r0, #0
 800358c:	d011      	beq.n	80035b2 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	3310      	adds	r3, #16
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	0011      	movs	r1, r2
 8003596:	0018      	movs	r0, r3
 8003598:	f000 fe5a 	bl	8004250 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	0018      	movs	r0, r3
 80035a0:	f000 f9d0 	bl	8003944 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035a4:	f000 fcb4 	bl	8003f10 <xTaskResumeAll>
 80035a8:	1e03      	subs	r3, r0, #0
 80035aa:	d18a      	bne.n	80034c2 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80035ac:	f001 fc50 	bl	8004e50 <vPortYield>
 80035b0:	e787      	b.n	80034c2 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	0018      	movs	r0, r3
 80035b6:	f000 f9c5 	bl	8003944 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035ba:	f000 fca9 	bl	8003f10 <xTaskResumeAll>
 80035be:	e780      	b.n	80034c2 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	0018      	movs	r0, r3
 80035c4:	f000 f9be 	bl	8003944 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035c8:	f000 fca2 	bl	8003f10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80035cc:	2300      	movs	r3, #0
		}
	}
}
 80035ce:	0018      	movs	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b00a      	add	sp, #40	; 0x28
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035d6:	b590      	push	{r4, r7, lr}
 80035d8:	b089      	sub	sp, #36	; 0x24
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <xQueueGenericSendFromISR+0x1c>
 80035ee:	b672      	cpsid	i
 80035f0:	e7fe      	b.n	80035f0 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d103      	bne.n	8003600 <xQueueGenericSendFromISR+0x2a>
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <xQueueGenericSendFromISR+0x2e>
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <xQueueGenericSendFromISR+0x30>
 8003604:	2300      	movs	r3, #0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <xQueueGenericSendFromISR+0x38>
 800360a:	b672      	cpsid	i
 800360c:	e7fe      	b.n	800360c <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b02      	cmp	r3, #2
 8003612:	d103      	bne.n	800361c <xQueueGenericSendFromISR+0x46>
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <xQueueGenericSendFromISR+0x4a>
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <xQueueGenericSendFromISR+0x4c>
 8003620:	2300      	movs	r3, #0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <xQueueGenericSendFromISR+0x54>
 8003626:	b672      	cpsid	i
 8003628:	e7fe      	b.n	8003628 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800362a:	f001 fc4b 	bl	8004ec4 <ulSetInterruptMaskFromISR>
 800362e:	0003      	movs	r3, r0
 8003630:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363a:	429a      	cmp	r2, r3
 800363c:	d302      	bcc.n	8003644 <xQueueGenericSendFromISR+0x6e>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d12e      	bne.n	80036a2 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003644:	2413      	movs	r4, #19
 8003646:	193b      	adds	r3, r7, r4
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	2145      	movs	r1, #69	; 0x45
 800364c:	5c52      	ldrb	r2, [r2, r1]
 800364e:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	0018      	movs	r0, r3
 8003658:	f000 f8e3 	bl	8003822 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800365c:	193b      	adds	r3, r7, r4
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	b25b      	sxtb	r3, r3
 8003662:	3301      	adds	r3, #1
 8003664:	d111      	bne.n	800368a <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	2b00      	cmp	r3, #0
 800366c:	d016      	beq.n	800369c <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	3324      	adds	r3, #36	; 0x24
 8003672:	0018      	movs	r0, r3
 8003674:	f000 fe30 	bl	80042d8 <xTaskRemoveFromEventList>
 8003678:	1e03      	subs	r3, r0, #0
 800367a:	d00f      	beq.n	800369c <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00c      	beq.n	800369c <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	e008      	b.n	800369c <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800368a:	2313      	movs	r3, #19
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	3301      	adds	r3, #1
 8003692:	b2db      	uxtb	r3, r3
 8003694:	b259      	sxtb	r1, r3
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2245      	movs	r2, #69	; 0x45
 800369a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800369c:	2301      	movs	r3, #1
 800369e:	61fb      	str	r3, [r7, #28]
		{
 80036a0:	e001      	b.n	80036a6 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	0018      	movs	r0, r3
 80036aa:	f001 fc11 	bl	8004ed0 <vClearInterruptMaskFromISR>

	return xReturn;
 80036ae:	69fb      	ldr	r3, [r7, #28]
}
 80036b0:	0018      	movs	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	b009      	add	sp, #36	; 0x24
 80036b6:	bd90      	pop	{r4, r7, pc}

080036b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08a      	sub	sp, #40	; 0x28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80036c4:	2300      	movs	r3, #0
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <xQueueReceive+0x1e>
 80036d2:	b672      	cpsid	i
 80036d4:	e7fe      	b.n	80036d4 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d103      	bne.n	80036e4 <xQueueReceive+0x2c>
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <xQueueReceive+0x30>
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <xQueueReceive+0x32>
 80036e8:	2300      	movs	r3, #0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <xQueueReceive+0x3a>
 80036ee:	b672      	cpsid	i
 80036f0:	e7fe      	b.n	80036f0 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036f2:	f000 ff89 	bl	8004608 <xTaskGetSchedulerState>
 80036f6:	1e03      	subs	r3, r0, #0
 80036f8:	d102      	bne.n	8003700 <xQueueReceive+0x48>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <xQueueReceive+0x4c>
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <xQueueReceive+0x4e>
 8003704:	2300      	movs	r3, #0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <xQueueReceive+0x56>
 800370a:	b672      	cpsid	i
 800370c:	e7fe      	b.n	800370c <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800370e:	f001 fbaf 	bl	8004e70 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d01a      	beq.n	8003754 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	0011      	movs	r1, r2
 8003724:	0018      	movs	r0, r3
 8003726:	f000 f8e7 	bl	80038f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	1e5a      	subs	r2, r3, #1
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	3310      	adds	r3, #16
 800373e:	0018      	movs	r0, r3
 8003740:	f000 fdca 	bl	80042d8 <xTaskRemoveFromEventList>
 8003744:	1e03      	subs	r3, r0, #0
 8003746:	d001      	beq.n	800374c <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003748:	f001 fb82 	bl	8004e50 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800374c:	f001 fba2 	bl	8004e94 <vPortExitCritical>
				return pdPASS;
 8003750:	2301      	movs	r3, #1
 8003752:	e062      	b.n	800381a <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d103      	bne.n	8003762 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800375a:	f001 fb9b 	bl	8004e94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800375e:	2300      	movs	r3, #0
 8003760:	e05b      	b.n	800381a <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	2b00      	cmp	r3, #0
 8003766:	d106      	bne.n	8003776 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003768:	2314      	movs	r3, #20
 800376a:	18fb      	adds	r3, r7, r3
 800376c:	0018      	movs	r0, r3
 800376e:	f000 fe0f 	bl	8004390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003772:	2301      	movs	r3, #1
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003776:	f001 fb8d 	bl	8004e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800377a:	f000 fbbd 	bl	8003ef8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800377e:	f001 fb77 	bl	8004e70 <vPortEnterCritical>
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	2244      	movs	r2, #68	; 0x44
 8003786:	5c9b      	ldrb	r3, [r3, r2]
 8003788:	b25b      	sxtb	r3, r3
 800378a:	3301      	adds	r3, #1
 800378c:	d103      	bne.n	8003796 <xQueueReceive+0xde>
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	2244      	movs	r2, #68	; 0x44
 8003792:	2100      	movs	r1, #0
 8003794:	5499      	strb	r1, [r3, r2]
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	2245      	movs	r2, #69	; 0x45
 800379a:	5c9b      	ldrb	r3, [r3, r2]
 800379c:	b25b      	sxtb	r3, r3
 800379e:	3301      	adds	r3, #1
 80037a0:	d103      	bne.n	80037aa <xQueueReceive+0xf2>
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	2245      	movs	r2, #69	; 0x45
 80037a6:	2100      	movs	r1, #0
 80037a8:	5499      	strb	r1, [r3, r2]
 80037aa:	f001 fb73 	bl	8004e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037ae:	1d3a      	adds	r2, r7, #4
 80037b0:	2314      	movs	r3, #20
 80037b2:	18fb      	adds	r3, r7, r3
 80037b4:	0011      	movs	r1, r2
 80037b6:	0018      	movs	r0, r3
 80037b8:	f000 fdfe 	bl	80043b8 <xTaskCheckForTimeOut>
 80037bc:	1e03      	subs	r3, r0, #0
 80037be:	d11e      	bne.n	80037fe <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	0018      	movs	r0, r3
 80037c4:	f000 f91c 	bl	8003a00 <prvIsQueueEmpty>
 80037c8:	1e03      	subs	r3, r0, #0
 80037ca:	d011      	beq.n	80037f0 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	3324      	adds	r3, #36	; 0x24
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	0011      	movs	r1, r2
 80037d4:	0018      	movs	r0, r3
 80037d6:	f000 fd3b 	bl	8004250 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	0018      	movs	r0, r3
 80037de:	f000 f8b1 	bl	8003944 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037e2:	f000 fb95 	bl	8003f10 <xTaskResumeAll>
 80037e6:	1e03      	subs	r3, r0, #0
 80037e8:	d191      	bne.n	800370e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 80037ea:	f001 fb31 	bl	8004e50 <vPortYield>
 80037ee:	e78e      	b.n	800370e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	0018      	movs	r0, r3
 80037f4:	f000 f8a6 	bl	8003944 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037f8:	f000 fb8a 	bl	8003f10 <xTaskResumeAll>
 80037fc:	e787      	b.n	800370e <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	0018      	movs	r0, r3
 8003802:	f000 f89f 	bl	8003944 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003806:	f000 fb83 	bl	8003f10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	0018      	movs	r0, r3
 800380e:	f000 f8f7 	bl	8003a00 <prvIsQueueEmpty>
 8003812:	1e03      	subs	r3, r0, #0
 8003814:	d100      	bne.n	8003818 <xQueueReceive+0x160>
 8003816:	e77a      	b.n	800370e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003818:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800381a:	0018      	movs	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	b00a      	add	sp, #40	; 0x28
 8003820:	bd80      	pop	{r7, pc}

08003822 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b086      	sub	sp, #24
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10e      	bne.n	800385e <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d14e      	bne.n	80038e6 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	0018      	movs	r0, r3
 800384e:	f000 fef7 	bl	8004640 <xTaskPriorityDisinherit>
 8003852:	0003      	movs	r3, r0
 8003854:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	605a      	str	r2, [r3, #4]
 800385c:	e043      	b.n	80038e6 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d119      	bne.n	8003898 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6898      	ldr	r0, [r3, #8]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	0019      	movs	r1, r3
 8003870:	f001 fd68 	bl	8005344 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	18d2      	adds	r2, r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	429a      	cmp	r2, r3
 800388c:	d32b      	bcc.n	80038e6 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	609a      	str	r2, [r3, #8]
 8003896:	e026      	b.n	80038e6 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	68d8      	ldr	r0, [r3, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	0019      	movs	r1, r3
 80038a4:	f001 fd4e 	bl	8005344 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	425b      	negs	r3, r3
 80038b2:	18d2      	adds	r2, r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d207      	bcs.n	80038d4 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	425b      	negs	r3, r3
 80038ce:	18d2      	adds	r2, r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d105      	bne.n	80038e6 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80038ee:	697b      	ldr	r3, [r7, #20]
}
 80038f0:	0018      	movs	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b006      	add	sp, #24
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d018      	beq.n	800393c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	18d2      	adds	r2, r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	429a      	cmp	r2, r3
 8003922:	d303      	bcc.n	800392c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68d9      	ldr	r1, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	0018      	movs	r0, r3
 8003938:	f001 fd04 	bl	8005344 <memcpy>
	}
}
 800393c:	46c0      	nop			; (mov r8, r8)
 800393e:	46bd      	mov	sp, r7
 8003940:	b002      	add	sp, #8
 8003942:	bd80      	pop	{r7, pc}

08003944 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800394c:	f001 fa90 	bl	8004e70 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003950:	230f      	movs	r3, #15
 8003952:	18fb      	adds	r3, r7, r3
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	2145      	movs	r1, #69	; 0x45
 8003958:	5c52      	ldrb	r2, [r2, r1]
 800395a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800395c:	e013      	b.n	8003986 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	2b00      	cmp	r3, #0
 8003964:	d016      	beq.n	8003994 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3324      	adds	r3, #36	; 0x24
 800396a:	0018      	movs	r0, r3
 800396c:	f000 fcb4 	bl	80042d8 <xTaskRemoveFromEventList>
 8003970:	1e03      	subs	r3, r0, #0
 8003972:	d001      	beq.n	8003978 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003974:	f000 fd70 	bl	8004458 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003978:	210f      	movs	r1, #15
 800397a:	187b      	adds	r3, r7, r1
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	3b01      	subs	r3, #1
 8003980:	b2da      	uxtb	r2, r3
 8003982:	187b      	adds	r3, r7, r1
 8003984:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003986:	230f      	movs	r3, #15
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	b25b      	sxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	dce5      	bgt.n	800395e <prvUnlockQueue+0x1a>
 8003992:	e000      	b.n	8003996 <prvUnlockQueue+0x52>
					break;
 8003994:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2245      	movs	r2, #69	; 0x45
 800399a:	21ff      	movs	r1, #255	; 0xff
 800399c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800399e:	f001 fa79 	bl	8004e94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80039a2:	f001 fa65 	bl	8004e70 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80039a6:	230e      	movs	r3, #14
 80039a8:	18fb      	adds	r3, r7, r3
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	2144      	movs	r1, #68	; 0x44
 80039ae:	5c52      	ldrb	r2, [r2, r1]
 80039b0:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039b2:	e013      	b.n	80039dc <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d016      	beq.n	80039ea <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3310      	adds	r3, #16
 80039c0:	0018      	movs	r0, r3
 80039c2:	f000 fc89 	bl	80042d8 <xTaskRemoveFromEventList>
 80039c6:	1e03      	subs	r3, r0, #0
 80039c8:	d001      	beq.n	80039ce <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80039ca:	f000 fd45 	bl	8004458 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80039ce:	210e      	movs	r1, #14
 80039d0:	187b      	adds	r3, r7, r1
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	187b      	adds	r3, r7, r1
 80039da:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039dc:	230e      	movs	r3, #14
 80039de:	18fb      	adds	r3, r7, r3
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	b25b      	sxtb	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	dce5      	bgt.n	80039b4 <prvUnlockQueue+0x70>
 80039e8:	e000      	b.n	80039ec <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80039ea:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2244      	movs	r2, #68	; 0x44
 80039f0:	21ff      	movs	r1, #255	; 0xff
 80039f2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80039f4:	f001 fa4e 	bl	8004e94 <vPortExitCritical>
}
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b004      	add	sp, #16
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a08:	f001 fa32 	bl	8004e70 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d102      	bne.n	8003a1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a14:	2301      	movs	r3, #1
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	e001      	b.n	8003a1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a1e:	f001 fa39 	bl	8004e94 <vPortExitCritical>

	return xReturn;
 8003a22:	68fb      	ldr	r3, [r7, #12]
}
 8003a24:	0018      	movs	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b004      	add	sp, #16
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a34:	f001 fa1c 	bl	8004e70 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d102      	bne.n	8003a4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a44:	2301      	movs	r3, #1
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	e001      	b.n	8003a4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a4e:	f001 fa21 	bl	8004e94 <vPortExitCritical>

	return xReturn;
 8003a52:	68fb      	ldr	r3, [r7, #12]
}
 8003a54:	0018      	movs	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b004      	add	sp, #16
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	e015      	b.n	8003a98 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a6c:	4b0e      	ldr	r3, [pc, #56]	; (8003aa8 <vQueueAddToRegistry+0x4c>)
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	00d2      	lsls	r2, r2, #3
 8003a72:	58d3      	ldr	r3, [r2, r3]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10c      	bne.n	8003a92 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <vQueueAddToRegistry+0x4c>)
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	00d2      	lsls	r2, r2, #3
 8003a7e:	6839      	ldr	r1, [r7, #0]
 8003a80:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a82:	4a09      	ldr	r2, [pc, #36]	; (8003aa8 <vQueueAddToRegistry+0x4c>)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	18d3      	adds	r3, r2, r3
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a90:	e006      	b.n	8003aa0 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3301      	adds	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b07      	cmp	r3, #7
 8003a9c:	d9e6      	bls.n	8003a6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	46c0      	nop			; (mov r8, r8)
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b004      	add	sp, #16
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	20000b6c 	.word	0x20000b6c

08003aac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003abc:	f001 f9d8 	bl	8004e70 <vPortEnterCritical>
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2244      	movs	r2, #68	; 0x44
 8003ac4:	5c9b      	ldrb	r3, [r3, r2]
 8003ac6:	b25b      	sxtb	r3, r3
 8003ac8:	3301      	adds	r3, #1
 8003aca:	d103      	bne.n	8003ad4 <vQueueWaitForMessageRestricted+0x28>
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2244      	movs	r2, #68	; 0x44
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	5499      	strb	r1, [r3, r2]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2245      	movs	r2, #69	; 0x45
 8003ad8:	5c9b      	ldrb	r3, [r3, r2]
 8003ada:	b25b      	sxtb	r3, r3
 8003adc:	3301      	adds	r3, #1
 8003ade:	d103      	bne.n	8003ae8 <vQueueWaitForMessageRestricted+0x3c>
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2245      	movs	r2, #69	; 0x45
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	5499      	strb	r1, [r3, r2]
 8003ae8:	f001 f9d4 	bl	8004e94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d106      	bne.n	8003b02 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	3324      	adds	r3, #36	; 0x24
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	0018      	movs	r0, r3
 8003afe:	f000 fbc5 	bl	800428c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	0018      	movs	r0, r3
 8003b06:	f7ff ff1d 	bl	8003944 <prvUnlockQueue>
	}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b006      	add	sp, #24
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b12:	b590      	push	{r4, r7, lr}
 8003b14:	b08d      	sub	sp, #52	; 0x34
 8003b16:	af04      	add	r7, sp, #16
 8003b18:	60f8      	str	r0, [r7, #12]
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	607a      	str	r2, [r7, #4]
 8003b1e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <xTaskCreateStatic+0x18>
 8003b26:	b672      	cpsid	i
 8003b28:	e7fe      	b.n	8003b28 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <xTaskCreateStatic+0x22>
 8003b30:	b672      	cpsid	i
 8003b32:	e7fe      	b.n	8003b32 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b34:	235c      	movs	r3, #92	; 0x5c
 8003b36:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2b5c      	cmp	r3, #92	; 0x5c
 8003b3c:	d001      	beq.n	8003b42 <xTaskCreateStatic+0x30>
 8003b3e:	b672      	cpsid	i
 8003b40:	e7fe      	b.n	8003b40 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d020      	beq.n	8003b8a <xTaskCreateStatic+0x78>
 8003b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d01d      	beq.n	8003b8a <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b50:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	2259      	movs	r2, #89	; 0x59
 8003b5c:	2102      	movs	r1, #2
 8003b5e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b60:	683c      	ldr	r4, [r7, #0]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	9303      	str	r3, [sp, #12]
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	9302      	str	r3, [sp, #8]
 8003b70:	2318      	movs	r3, #24
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	9301      	str	r3, [sp, #4]
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	0023      	movs	r3, r4
 8003b7c:	f000 f858 	bl	8003c30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	0018      	movs	r0, r3
 8003b84:	f000 f8d6 	bl	8003d34 <prvAddNewTaskToReadyList>
 8003b88:	e001      	b.n	8003b8e <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b8e:	69bb      	ldr	r3, [r7, #24]
	}
 8003b90:	0018      	movs	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b009      	add	sp, #36	; 0x24
 8003b96:	bd90      	pop	{r4, r7, pc}

08003b98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b08d      	sub	sp, #52	; 0x34
 8003b9c:	af04      	add	r7, sp, #16
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	1dbb      	adds	r3, r7, #6
 8003ba6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ba8:	1dbb      	adds	r3, r7, #6
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f001 f9f6 	bl	8004fa0 <pvPortMalloc>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d010      	beq.n	8003be0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003bbe:	205c      	movs	r0, #92	; 0x5c
 8003bc0:	f001 f9ee 	bl	8004fa0 <pvPortMalloc>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30
 8003bd4:	e006      	b.n	8003be4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f001 fa87 	bl	80050ec <vPortFree>
 8003bde:	e001      	b.n	8003be4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d01a      	beq.n	8003c20 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	2259      	movs	r2, #89	; 0x59
 8003bee:	2100      	movs	r1, #0
 8003bf0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003bf2:	1dbb      	adds	r3, r7, #6
 8003bf4:	881a      	ldrh	r2, [r3, #0]
 8003bf6:	683c      	ldr	r4, [r7, #0]
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	9303      	str	r3, [sp, #12]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	9302      	str	r3, [sp, #8]
 8003c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c06:	9301      	str	r3, [sp, #4]
 8003c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	0023      	movs	r3, r4
 8003c0e:	f000 f80f 	bl	8003c30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	0018      	movs	r0, r3
 8003c16:	f000 f88d 	bl	8003d34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	e002      	b.n	8003c26 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c20:	2301      	movs	r3, #1
 8003c22:	425b      	negs	r3, r3
 8003c24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c26:	69bb      	ldr	r3, [r7, #24]
	}
 8003c28:	0018      	movs	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b009      	add	sp, #36	; 0x24
 8003c2e:	bd90      	pop	{r4, r7, pc}

08003c30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	001a      	movs	r2, r3
 8003c48:	21a5      	movs	r1, #165	; 0xa5
 8003c4a:	f001 fb4f 	bl	80052ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4936      	ldr	r1, [pc, #216]	; (8003d30 <prvInitialiseNewTask+0x100>)
 8003c56:	468c      	mov	ip, r1
 8003c58:	4463      	add	r3, ip
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	18d3      	adds	r3, r2, r3
 8003c5e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	2207      	movs	r2, #7
 8003c64:	4393      	bics	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2207      	movs	r2, #7
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d001      	beq.n	8003c74 <prvInitialiseNewTask+0x44>
 8003c70:	b672      	cpsid	i
 8003c72:	e7fe      	b.n	8003c72 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	e013      	b.n	8003ca2 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	18d3      	adds	r3, r2, r3
 8003c80:	7818      	ldrb	r0, [r3, #0]
 8003c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c84:	2134      	movs	r1, #52	; 0x34
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	18d3      	adds	r3, r2, r3
 8003c8a:	185b      	adds	r3, r3, r1
 8003c8c:	1c02      	adds	r2, r0, #0
 8003c8e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	18d3      	adds	r3, r2, r3
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d006      	beq.n	8003caa <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2b0f      	cmp	r3, #15
 8003ca6:	d9e8      	bls.n	8003c7a <prvInitialiseNewTask+0x4a>
 8003ca8:	e000      	b.n	8003cac <prvInitialiseNewTask+0x7c>
		{
			break;
 8003caa:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	2243      	movs	r2, #67	; 0x43
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	2b37      	cmp	r3, #55	; 0x37
 8003cb8:	d901      	bls.n	8003cbe <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003cba:	2337      	movs	r3, #55	; 0x37
 8003cbc:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc0:	6a3a      	ldr	r2, [r7, #32]
 8003cc2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc6:	6a3a      	ldr	r2, [r7, #32]
 8003cc8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	2200      	movs	r2, #0
 8003cce:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f7ff fa69 	bl	80031ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	3318      	adds	r3, #24
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f7ff fa64 	bl	80031ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ce8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	2238      	movs	r2, #56	; 0x38
 8003cee:	1ad2      	subs	r2, r2, r3
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cf8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d02:	2258      	movs	r2, #88	; 0x58
 8003d04:	2100      	movs	r1, #0
 8003d06:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	68f9      	ldr	r1, [r7, #12]
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f001 f816 	bl	8004d40 <pxPortInitialiseStack>
 8003d14:	0002      	movs	r2, r0
 8003d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d18:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b006      	add	sp, #24
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	3fffffff 	.word	0x3fffffff

08003d34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d3c:	f001 f898 	bl	8004e70 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d40:	4b2a      	ldr	r3, [pc, #168]	; (8003dec <prvAddNewTaskToReadyList+0xb8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	4b29      	ldr	r3, [pc, #164]	; (8003dec <prvAddNewTaskToReadyList+0xb8>)
 8003d48:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003d4a:	4b29      	ldr	r3, [pc, #164]	; (8003df0 <prvAddNewTaskToReadyList+0xbc>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d109      	bne.n	8003d66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d52:	4b27      	ldr	r3, [pc, #156]	; (8003df0 <prvAddNewTaskToReadyList+0xbc>)
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d58:	4b24      	ldr	r3, [pc, #144]	; (8003dec <prvAddNewTaskToReadyList+0xb8>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d110      	bne.n	8003d82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d60:	f000 fb94 	bl	800448c <prvInitialiseTaskLists>
 8003d64:	e00d      	b.n	8003d82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d66:	4b23      	ldr	r3, [pc, #140]	; (8003df4 <prvAddNewTaskToReadyList+0xc0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d109      	bne.n	8003d82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d6e:	4b20      	ldr	r3, [pc, #128]	; (8003df0 <prvAddNewTaskToReadyList+0xbc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d802      	bhi.n	8003d82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d7c:	4b1c      	ldr	r3, [pc, #112]	; (8003df0 <prvAddNewTaskToReadyList+0xbc>)
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d82:	4b1d      	ldr	r3, [pc, #116]	; (8003df8 <prvAddNewTaskToReadyList+0xc4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <prvAddNewTaskToReadyList+0xc4>)
 8003d8a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d8c:	4b1a      	ldr	r3, [pc, #104]	; (8003df8 <prvAddNewTaskToReadyList+0xc4>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d98:	4b18      	ldr	r3, [pc, #96]	; (8003dfc <prvAddNewTaskToReadyList+0xc8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d903      	bls.n	8003da8 <prvAddNewTaskToReadyList+0x74>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da4:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <prvAddNewTaskToReadyList+0xc8>)
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dac:	0013      	movs	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	189b      	adds	r3, r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4a12      	ldr	r2, [pc, #72]	; (8003e00 <prvAddNewTaskToReadyList+0xcc>)
 8003db6:	189a      	adds	r2, r3, r2
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	0019      	movs	r1, r3
 8003dbe:	0010      	movs	r0, r2
 8003dc0:	f7ff f9ff 	bl	80031c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003dc4:	f001 f866 	bl	8004e94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003dc8:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <prvAddNewTaskToReadyList+0xc0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003dd0:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <prvAddNewTaskToReadyList+0xbc>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d201      	bcs.n	8003de2 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003dde:	f001 f837 	bl	8004e50 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	46bd      	mov	sp, r7
 8003de6:	b002      	add	sp, #8
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	20001080 	.word	0x20001080
 8003df0:	20000bac 	.word	0x20000bac
 8003df4:	2000108c 	.word	0x2000108c
 8003df8:	2000109c 	.word	0x2000109c
 8003dfc:	20001088 	.word	0x20001088
 8003e00:	20000bb0 	.word	0x20000bb0

08003e04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d010      	beq.n	8003e38 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e16:	4b0d      	ldr	r3, [pc, #52]	; (8003e4c <vTaskDelay+0x48>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <vTaskDelay+0x1e>
 8003e1e:	b672      	cpsid	i
 8003e20:	e7fe      	b.n	8003e20 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003e22:	f000 f869 	bl	8003ef8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2100      	movs	r1, #0
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f000 fc64 	bl	80046f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e30:	f000 f86e 	bl	8003f10 <xTaskResumeAll>
 8003e34:	0003      	movs	r3, r0
 8003e36:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8003e3e:	f001 f807 	bl	8004e50 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b004      	add	sp, #16
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	200010a8 	.word	0x200010a8

08003e50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e50:	b590      	push	{r4, r7, lr}
 8003e52:	b089      	sub	sp, #36	; 0x24
 8003e54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e5e:	003a      	movs	r2, r7
 8003e60:	1d39      	adds	r1, r7, #4
 8003e62:	2308      	movs	r3, #8
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	0018      	movs	r0, r3
 8003e68:	f7ff f952 	bl	8003110 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e6c:	683c      	ldr	r4, [r7, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	491b      	ldr	r1, [pc, #108]	; (8003ee0 <vTaskStartScheduler+0x90>)
 8003e74:	481b      	ldr	r0, [pc, #108]	; (8003ee4 <vTaskStartScheduler+0x94>)
 8003e76:	9202      	str	r2, [sp, #8]
 8003e78:	9301      	str	r3, [sp, #4]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	0022      	movs	r2, r4
 8003e82:	f7ff fe46 	bl	8003b12 <xTaskCreateStatic>
 8003e86:	0002      	movs	r2, r0
 8003e88:	4b17      	ldr	r3, [pc, #92]	; (8003ee8 <vTaskStartScheduler+0x98>)
 8003e8a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e8c:	4b16      	ldr	r3, [pc, #88]	; (8003ee8 <vTaskStartScheduler+0x98>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e94:	2301      	movs	r3, #1
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	e001      	b.n	8003e9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d103      	bne.n	8003eac <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8003ea4:	f000 fc7c 	bl	80047a0 <xTimerCreateTimerTask>
 8003ea8:	0003      	movs	r3, r0
 8003eaa:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d10d      	bne.n	8003ece <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003eb2:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003eb4:	4b0d      	ldr	r3, [pc, #52]	; (8003eec <vTaskStartScheduler+0x9c>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	4252      	negs	r2, r2
 8003eba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <vTaskStartScheduler+0xa0>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003ec2:	4b0c      	ldr	r3, [pc, #48]	; (8003ef4 <vTaskStartScheduler+0xa4>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ec8:	f000 ff9e 	bl	8004e08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ecc:	e004      	b.n	8003ed8 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <vTaskStartScheduler+0x88>
 8003ed4:	b672      	cpsid	i
 8003ed6:	e7fe      	b.n	8003ed6 <vTaskStartScheduler+0x86>
}
 8003ed8:	46c0      	nop			; (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b005      	add	sp, #20
 8003ede:	bd90      	pop	{r4, r7, pc}
 8003ee0:	08005380 	.word	0x08005380
 8003ee4:	0800446d 	.word	0x0800446d
 8003ee8:	200010a4 	.word	0x200010a4
 8003eec:	200010a0 	.word	0x200010a0
 8003ef0:	2000108c 	.word	0x2000108c
 8003ef4:	20001084 	.word	0x20001084

08003ef8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003efc:	4b03      	ldr	r3, [pc, #12]	; (8003f0c <vTaskSuspendAll+0x14>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	4b02      	ldr	r3, [pc, #8]	; (8003f0c <vTaskSuspendAll+0x14>)
 8003f04:	601a      	str	r2, [r3, #0]
}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	200010a8 	.word	0x200010a8

08003f10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f1e:	4b3a      	ldr	r3, [pc, #232]	; (8004008 <xTaskResumeAll+0xf8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <xTaskResumeAll+0x1a>
 8003f26:	b672      	cpsid	i
 8003f28:	e7fe      	b.n	8003f28 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f2a:	f000 ffa1 	bl	8004e70 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f2e:	4b36      	ldr	r3, [pc, #216]	; (8004008 <xTaskResumeAll+0xf8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	1e5a      	subs	r2, r3, #1
 8003f34:	4b34      	ldr	r3, [pc, #208]	; (8004008 <xTaskResumeAll+0xf8>)
 8003f36:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f38:	4b33      	ldr	r3, [pc, #204]	; (8004008 <xTaskResumeAll+0xf8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d15b      	bne.n	8003ff8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f40:	4b32      	ldr	r3, [pc, #200]	; (800400c <xTaskResumeAll+0xfc>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d057      	beq.n	8003ff8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f48:	e02f      	b.n	8003faa <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003f4a:	4b31      	ldr	r3, [pc, #196]	; (8004010 <xTaskResumeAll+0x100>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3318      	adds	r3, #24
 8003f56:	0018      	movs	r0, r3
 8003f58:	f7ff f98b 	bl	8003272 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	0018      	movs	r0, r3
 8003f62:	f7ff f986 	bl	8003272 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6a:	4b2a      	ldr	r3, [pc, #168]	; (8004014 <xTaskResumeAll+0x104>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d903      	bls.n	8003f7a <xTaskResumeAll+0x6a>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f76:	4b27      	ldr	r3, [pc, #156]	; (8004014 <xTaskResumeAll+0x104>)
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7e:	0013      	movs	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	189b      	adds	r3, r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4a24      	ldr	r2, [pc, #144]	; (8004018 <xTaskResumeAll+0x108>)
 8003f88:	189a      	adds	r2, r3, r2
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	0019      	movs	r1, r3
 8003f90:	0010      	movs	r0, r2
 8003f92:	f7ff f916 	bl	80031c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9a:	4b20      	ldr	r3, [pc, #128]	; (800401c <xTaskResumeAll+0x10c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d302      	bcc.n	8003faa <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8003fa4:	4b1e      	ldr	r3, [pc, #120]	; (8004020 <xTaskResumeAll+0x110>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003faa:	4b19      	ldr	r3, [pc, #100]	; (8004010 <xTaskResumeAll+0x100>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1cb      	bne.n	8003f4a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003fb8:	f000 fb02 	bl	80045c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003fbc:	4b19      	ldr	r3, [pc, #100]	; (8004024 <xTaskResumeAll+0x114>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00f      	beq.n	8003fe8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003fc8:	f000 f83c 	bl	8004044 <xTaskIncrementTick>
 8003fcc:	1e03      	subs	r3, r0, #0
 8003fce:	d002      	beq.n	8003fd6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8003fd0:	4b13      	ldr	r3, [pc, #76]	; (8004020 <xTaskResumeAll+0x110>)
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f2      	bne.n	8003fc8 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8003fe2:	4b10      	ldr	r3, [pc, #64]	; (8004024 <xTaskResumeAll+0x114>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003fe8:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <xTaskResumeAll+0x110>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ff4:	f000 ff2c 	bl	8004e50 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ff8:	f000 ff4c 	bl	8004e94 <vPortExitCritical>

	return xAlreadyYielded;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
}
 8003ffe:	0018      	movs	r0, r3
 8004000:	46bd      	mov	sp, r7
 8004002:	b004      	add	sp, #16
 8004004:	bd80      	pop	{r7, pc}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	200010a8 	.word	0x200010a8
 800400c:	20001080 	.word	0x20001080
 8004010:	20001040 	.word	0x20001040
 8004014:	20001088 	.word	0x20001088
 8004018:	20000bb0 	.word	0x20000bb0
 800401c:	20000bac 	.word	0x20000bac
 8004020:	20001094 	.word	0x20001094
 8004024:	20001090 	.word	0x20001090

08004028 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800402e:	4b04      	ldr	r3, [pc, #16]	; (8004040 <xTaskGetTickCount+0x18>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004034:	687b      	ldr	r3, [r7, #4]
}
 8004036:	0018      	movs	r0, r3
 8004038:	46bd      	mov	sp, r7
 800403a:	b002      	add	sp, #8
 800403c:	bd80      	pop	{r7, pc}
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	20001084 	.word	0x20001084

08004044 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800404e:	4b4c      	ldr	r3, [pc, #304]	; (8004180 <xTaskIncrementTick+0x13c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d000      	beq.n	8004058 <xTaskIncrementTick+0x14>
 8004056:	e083      	b.n	8004160 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004058:	4b4a      	ldr	r3, [pc, #296]	; (8004184 <xTaskIncrementTick+0x140>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3301      	adds	r3, #1
 800405e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004060:	4b48      	ldr	r3, [pc, #288]	; (8004184 <xTaskIncrementTick+0x140>)
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d117      	bne.n	800409c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800406c:	4b46      	ldr	r3, [pc, #280]	; (8004188 <xTaskIncrementTick+0x144>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <xTaskIncrementTick+0x36>
 8004076:	b672      	cpsid	i
 8004078:	e7fe      	b.n	8004078 <xTaskIncrementTick+0x34>
 800407a:	4b43      	ldr	r3, [pc, #268]	; (8004188 <xTaskIncrementTick+0x144>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	4b42      	ldr	r3, [pc, #264]	; (800418c <xTaskIncrementTick+0x148>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4b40      	ldr	r3, [pc, #256]	; (8004188 <xTaskIncrementTick+0x144>)
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	4b40      	ldr	r3, [pc, #256]	; (800418c <xTaskIncrementTick+0x148>)
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	4b40      	ldr	r3, [pc, #256]	; (8004190 <xTaskIncrementTick+0x14c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	4b3e      	ldr	r3, [pc, #248]	; (8004190 <xTaskIncrementTick+0x14c>)
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	f000 fa92 	bl	80045c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800409c:	4b3d      	ldr	r3, [pc, #244]	; (8004194 <xTaskIncrementTick+0x150>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d34e      	bcc.n	8004144 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040a6:	4b38      	ldr	r3, [pc, #224]	; (8004188 <xTaskIncrementTick+0x144>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <xTaskIncrementTick+0x70>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <xTaskIncrementTick+0x72>
 80040b4:	2300      	movs	r3, #0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d004      	beq.n	80040c4 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ba:	4b36      	ldr	r3, [pc, #216]	; (8004194 <xTaskIncrementTick+0x150>)
 80040bc:	2201      	movs	r2, #1
 80040be:	4252      	negs	r2, r2
 80040c0:	601a      	str	r2, [r3, #0]
					break;
 80040c2:	e03f      	b.n	8004144 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040c4:	4b30      	ldr	r3, [pc, #192]	; (8004188 <xTaskIncrementTick+0x144>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d203      	bcs.n	80040e4 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040dc:	4b2d      	ldr	r3, [pc, #180]	; (8004194 <xTaskIncrementTick+0x150>)
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	601a      	str	r2, [r3, #0]
						break;
 80040e2:	e02f      	b.n	8004144 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	3304      	adds	r3, #4
 80040e8:	0018      	movs	r0, r3
 80040ea:	f7ff f8c2 	bl	8003272 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d004      	beq.n	8004100 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	3318      	adds	r3, #24
 80040fa:	0018      	movs	r0, r3
 80040fc:	f7ff f8b9 	bl	8003272 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004104:	4b24      	ldr	r3, [pc, #144]	; (8004198 <xTaskIncrementTick+0x154>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d903      	bls.n	8004114 <xTaskIncrementTick+0xd0>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004110:	4b21      	ldr	r3, [pc, #132]	; (8004198 <xTaskIncrementTick+0x154>)
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004118:	0013      	movs	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	189b      	adds	r3, r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4a1e      	ldr	r2, [pc, #120]	; (800419c <xTaskIncrementTick+0x158>)
 8004122:	189a      	adds	r2, r3, r2
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	3304      	adds	r3, #4
 8004128:	0019      	movs	r1, r3
 800412a:	0010      	movs	r0, r2
 800412c:	f7ff f849 	bl	80031c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004134:	4b1a      	ldr	r3, [pc, #104]	; (80041a0 <xTaskIncrementTick+0x15c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	429a      	cmp	r2, r3
 800413c:	d3b3      	bcc.n	80040a6 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800413e:	2301      	movs	r3, #1
 8004140:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004142:	e7b0      	b.n	80040a6 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004144:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <xTaskIncrementTick+0x15c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414a:	4914      	ldr	r1, [pc, #80]	; (800419c <xTaskIncrementTick+0x158>)
 800414c:	0013      	movs	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	189b      	adds	r3, r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	585b      	ldr	r3, [r3, r1]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d907      	bls.n	800416a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800415a:	2301      	movs	r3, #1
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	e004      	b.n	800416a <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004160:	4b10      	ldr	r3, [pc, #64]	; (80041a4 <xTaskIncrementTick+0x160>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	4b0f      	ldr	r3, [pc, #60]	; (80041a4 <xTaskIncrementTick+0x160>)
 8004168:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800416a:	4b0f      	ldr	r3, [pc, #60]	; (80041a8 <xTaskIncrementTick+0x164>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8004172:	2301      	movs	r3, #1
 8004174:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004176:	697b      	ldr	r3, [r7, #20]
}
 8004178:	0018      	movs	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	b006      	add	sp, #24
 800417e:	bd80      	pop	{r7, pc}
 8004180:	200010a8 	.word	0x200010a8
 8004184:	20001084 	.word	0x20001084
 8004188:	20001038 	.word	0x20001038
 800418c:	2000103c 	.word	0x2000103c
 8004190:	20001098 	.word	0x20001098
 8004194:	200010a0 	.word	0x200010a0
 8004198:	20001088 	.word	0x20001088
 800419c:	20000bb0 	.word	0x20000bb0
 80041a0:	20000bac 	.word	0x20000bac
 80041a4:	20001090 	.word	0x20001090
 80041a8:	20001094 	.word	0x20001094

080041ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80041b2:	4b22      	ldr	r3, [pc, #136]	; (800423c <vTaskSwitchContext+0x90>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041ba:	4b21      	ldr	r3, [pc, #132]	; (8004240 <vTaskSwitchContext+0x94>)
 80041bc:	2201      	movs	r2, #1
 80041be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80041c0:	e037      	b.n	8004232 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80041c2:	4b1f      	ldr	r3, [pc, #124]	; (8004240 <vTaskSwitchContext+0x94>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80041c8:	4b1e      	ldr	r3, [pc, #120]	; (8004244 <vTaskSwitchContext+0x98>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	607b      	str	r3, [r7, #4]
 80041ce:	e007      	b.n	80041e0 <vTaskSwitchContext+0x34>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <vTaskSwitchContext+0x2e>
 80041d6:	b672      	cpsid	i
 80041d8:	e7fe      	b.n	80041d8 <vTaskSwitchContext+0x2c>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3b01      	subs	r3, #1
 80041de:	607b      	str	r3, [r7, #4]
 80041e0:	4919      	ldr	r1, [pc, #100]	; (8004248 <vTaskSwitchContext+0x9c>)
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	0013      	movs	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	189b      	adds	r3, r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	585b      	ldr	r3, [r3, r1]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0ee      	beq.n	80041d0 <vTaskSwitchContext+0x24>
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	0013      	movs	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	189b      	adds	r3, r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4a12      	ldr	r2, [pc, #72]	; (8004248 <vTaskSwitchContext+0x9c>)
 80041fe:	189b      	adds	r3, r3, r2
 8004200:	603b      	str	r3, [r7, #0]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	605a      	str	r2, [r3, #4]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	3308      	adds	r3, #8
 8004214:	429a      	cmp	r2, r3
 8004216:	d104      	bne.n	8004222 <vTaskSwitchContext+0x76>
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	605a      	str	r2, [r3, #4]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	4b08      	ldr	r3, [pc, #32]	; (800424c <vTaskSwitchContext+0xa0>)
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	4b05      	ldr	r3, [pc, #20]	; (8004244 <vTaskSwitchContext+0x98>)
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	601a      	str	r2, [r3, #0]
}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	46bd      	mov	sp, r7
 8004236:	b002      	add	sp, #8
 8004238:	bd80      	pop	{r7, pc}
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	200010a8 	.word	0x200010a8
 8004240:	20001094 	.word	0x20001094
 8004244:	20001088 	.word	0x20001088
 8004248:	20000bb0 	.word	0x20000bb0
 800424c:	20000bac 	.word	0x20000bac

08004250 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <vTaskPlaceOnEventList+0x14>
 8004260:	b672      	cpsid	i
 8004262:	e7fe      	b.n	8004262 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004264:	4b08      	ldr	r3, [pc, #32]	; (8004288 <vTaskPlaceOnEventList+0x38>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3318      	adds	r3, #24
 800426a:	001a      	movs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	0011      	movs	r1, r2
 8004270:	0018      	movs	r0, r3
 8004272:	f7fe ffc8 	bl	8003206 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2101      	movs	r1, #1
 800427a:	0018      	movs	r0, r3
 800427c:	f000 fa3c 	bl	80046f8 <prvAddCurrentTaskToDelayedList>
}
 8004280:	46c0      	nop			; (mov r8, r8)
 8004282:	46bd      	mov	sp, r7
 8004284:	b002      	add	sp, #8
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20000bac 	.word	0x20000bac

0800428c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <vTaskPlaceOnEventListRestricted+0x16>
 800429e:	b672      	cpsid	i
 80042a0:	e7fe      	b.n	80042a0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042a2:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <vTaskPlaceOnEventListRestricted+0x48>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3318      	adds	r3, #24
 80042a8:	001a      	movs	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	0011      	movs	r1, r2
 80042ae:	0018      	movs	r0, r3
 80042b0:	f7fe ff87 	bl	80031c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 80042ba:	2301      	movs	r3, #1
 80042bc:	425b      	negs	r3, r3
 80042be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	0011      	movs	r1, r2
 80042c6:	0018      	movs	r0, r3
 80042c8:	f000 fa16 	bl	80046f8 <prvAddCurrentTaskToDelayedList>
	}
 80042cc:	46c0      	nop			; (mov r8, r8)
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b004      	add	sp, #16
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	20000bac 	.word	0x20000bac

080042d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <xTaskRemoveFromEventList+0x1a>
 80042ee:	b672      	cpsid	i
 80042f0:	e7fe      	b.n	80042f0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	3318      	adds	r3, #24
 80042f6:	0018      	movs	r0, r3
 80042f8:	f7fe ffbb 	bl	8003272 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042fc:	4b1e      	ldr	r3, [pc, #120]	; (8004378 <xTaskRemoveFromEventList+0xa0>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d11d      	bne.n	8004340 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	3304      	adds	r3, #4
 8004308:	0018      	movs	r0, r3
 800430a:	f7fe ffb2 	bl	8003272 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004312:	4b1a      	ldr	r3, [pc, #104]	; (800437c <xTaskRemoveFromEventList+0xa4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d903      	bls.n	8004322 <xTaskRemoveFromEventList+0x4a>
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431e:	4b17      	ldr	r3, [pc, #92]	; (800437c <xTaskRemoveFromEventList+0xa4>)
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004326:	0013      	movs	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	189b      	adds	r3, r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4a14      	ldr	r2, [pc, #80]	; (8004380 <xTaskRemoveFromEventList+0xa8>)
 8004330:	189a      	adds	r2, r3, r2
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	3304      	adds	r3, #4
 8004336:	0019      	movs	r1, r3
 8004338:	0010      	movs	r0, r2
 800433a:	f7fe ff42 	bl	80031c2 <vListInsertEnd>
 800433e:	e007      	b.n	8004350 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	3318      	adds	r3, #24
 8004344:	001a      	movs	r2, r3
 8004346:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <xTaskRemoveFromEventList+0xac>)
 8004348:	0011      	movs	r1, r2
 800434a:	0018      	movs	r0, r3
 800434c:	f7fe ff39 	bl	80031c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004354:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <xTaskRemoveFromEventList+0xb0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	429a      	cmp	r2, r3
 800435c:	d905      	bls.n	800436a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800435e:	2301      	movs	r3, #1
 8004360:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004362:	4b0a      	ldr	r3, [pc, #40]	; (800438c <xTaskRemoveFromEventList+0xb4>)
 8004364:	2201      	movs	r2, #1
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	e001      	b.n	800436e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800436e:	68fb      	ldr	r3, [r7, #12]
}
 8004370:	0018      	movs	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	b004      	add	sp, #16
 8004376:	bd80      	pop	{r7, pc}
 8004378:	200010a8 	.word	0x200010a8
 800437c:	20001088 	.word	0x20001088
 8004380:	20000bb0 	.word	0x20000bb0
 8004384:	20001040 	.word	0x20001040
 8004388:	20000bac 	.word	0x20000bac
 800438c:	20001094 	.word	0x20001094

08004390 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <vTaskInternalSetTimeOutState+0x20>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80043a0:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <vTaskInternalSetTimeOutState+0x24>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	605a      	str	r2, [r3, #4]
}
 80043a8:	46c0      	nop			; (mov r8, r8)
 80043aa:	46bd      	mov	sp, r7
 80043ac:	b002      	add	sp, #8
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20001098 	.word	0x20001098
 80043b4:	20001084 	.word	0x20001084

080043b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <xTaskCheckForTimeOut+0x14>
 80043c8:	b672      	cpsid	i
 80043ca:	e7fe      	b.n	80043ca <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <xTaskCheckForTimeOut+0x1e>
 80043d2:	b672      	cpsid	i
 80043d4:	e7fe      	b.n	80043d4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80043d6:	f000 fd4b 	bl	8004e70 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80043da:	4b1d      	ldr	r3, [pc, #116]	; (8004450 <xTaskCheckForTimeOut+0x98>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3301      	adds	r3, #1
 80043f0:	d102      	bne.n	80043f8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	e024      	b.n	8004442 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	4b15      	ldr	r3, [pc, #84]	; (8004454 <xTaskCheckForTimeOut+0x9c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d007      	beq.n	8004414 <xTaskCheckForTimeOut+0x5c>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	429a      	cmp	r2, r3
 800440c:	d302      	bcc.n	8004414 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800440e:	2301      	movs	r3, #1
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	e016      	b.n	8004442 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	429a      	cmp	r2, r3
 800441c:	d20c      	bcs.n	8004438 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1ad2      	subs	r2, r2, r3
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	0018      	movs	r0, r3
 800442e:	f7ff ffaf 	bl	8004390 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	e004      	b.n	8004442 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800443e:	2301      	movs	r3, #1
 8004440:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004442:	f000 fd27 	bl	8004e94 <vPortExitCritical>

	return xReturn;
 8004446:	697b      	ldr	r3, [r7, #20]
}
 8004448:	0018      	movs	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	b006      	add	sp, #24
 800444e:	bd80      	pop	{r7, pc}
 8004450:	20001084 	.word	0x20001084
 8004454:	20001098 	.word	0x20001098

08004458 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800445c:	4b02      	ldr	r3, [pc, #8]	; (8004468 <vTaskMissedYield+0x10>)
 800445e:	2201      	movs	r2, #1
 8004460:	601a      	str	r2, [r3, #0]
}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	20001094 	.word	0x20001094

0800446c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004474:	f000 f84e 	bl	8004514 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004478:	4b03      	ldr	r3, [pc, #12]	; (8004488 <prvIdleTask+0x1c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d9f9      	bls.n	8004474 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004480:	f000 fce6 	bl	8004e50 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004484:	e7f6      	b.n	8004474 <prvIdleTask+0x8>
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	20000bb0 	.word	0x20000bb0

0800448c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004492:	2300      	movs	r3, #0
 8004494:	607b      	str	r3, [r7, #4]
 8004496:	e00c      	b.n	80044b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	0013      	movs	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	189b      	adds	r3, r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4a14      	ldr	r2, [pc, #80]	; (80044f4 <prvInitialiseTaskLists+0x68>)
 80044a4:	189b      	adds	r3, r3, r2
 80044a6:	0018      	movs	r0, r3
 80044a8:	f7fe fe62 	bl	8003170 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3301      	adds	r3, #1
 80044b0:	607b      	str	r3, [r7, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b37      	cmp	r3, #55	; 0x37
 80044b6:	d9ef      	bls.n	8004498 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044b8:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <prvInitialiseTaskLists+0x6c>)
 80044ba:	0018      	movs	r0, r3
 80044bc:	f7fe fe58 	bl	8003170 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044c0:	4b0e      	ldr	r3, [pc, #56]	; (80044fc <prvInitialiseTaskLists+0x70>)
 80044c2:	0018      	movs	r0, r3
 80044c4:	f7fe fe54 	bl	8003170 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044c8:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <prvInitialiseTaskLists+0x74>)
 80044ca:	0018      	movs	r0, r3
 80044cc:	f7fe fe50 	bl	8003170 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044d0:	4b0c      	ldr	r3, [pc, #48]	; (8004504 <prvInitialiseTaskLists+0x78>)
 80044d2:	0018      	movs	r0, r3
 80044d4:	f7fe fe4c 	bl	8003170 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044d8:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <prvInitialiseTaskLists+0x7c>)
 80044da:	0018      	movs	r0, r3
 80044dc:	f7fe fe48 	bl	8003170 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044e0:	4b0a      	ldr	r3, [pc, #40]	; (800450c <prvInitialiseTaskLists+0x80>)
 80044e2:	4a05      	ldr	r2, [pc, #20]	; (80044f8 <prvInitialiseTaskLists+0x6c>)
 80044e4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044e6:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <prvInitialiseTaskLists+0x84>)
 80044e8:	4a04      	ldr	r2, [pc, #16]	; (80044fc <prvInitialiseTaskLists+0x70>)
 80044ea:	601a      	str	r2, [r3, #0]
}
 80044ec:	46c0      	nop			; (mov r8, r8)
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b002      	add	sp, #8
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	20000bb0 	.word	0x20000bb0
 80044f8:	20001010 	.word	0x20001010
 80044fc:	20001024 	.word	0x20001024
 8004500:	20001040 	.word	0x20001040
 8004504:	20001054 	.word	0x20001054
 8004508:	2000106c 	.word	0x2000106c
 800450c:	20001038 	.word	0x20001038
 8004510:	2000103c 	.word	0x2000103c

08004514 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800451a:	e01a      	b.n	8004552 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800451c:	f000 fca8 	bl	8004e70 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004520:	4b10      	ldr	r3, [pc, #64]	; (8004564 <prvCheckTasksWaitingTermination+0x50>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3304      	adds	r3, #4
 800452c:	0018      	movs	r0, r3
 800452e:	f7fe fea0 	bl	8003272 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004532:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <prvCheckTasksWaitingTermination+0x54>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	1e5a      	subs	r2, r3, #1
 8004538:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <prvCheckTasksWaitingTermination+0x54>)
 800453a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800453c:	4b0b      	ldr	r3, [pc, #44]	; (800456c <prvCheckTasksWaitingTermination+0x58>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	1e5a      	subs	r2, r3, #1
 8004542:	4b0a      	ldr	r3, [pc, #40]	; (800456c <prvCheckTasksWaitingTermination+0x58>)
 8004544:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004546:	f000 fca5 	bl	8004e94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	0018      	movs	r0, r3
 800454e:	f000 f80f 	bl	8004570 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004552:	4b06      	ldr	r3, [pc, #24]	; (800456c <prvCheckTasksWaitingTermination+0x58>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1e0      	bne.n	800451c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	46c0      	nop			; (mov r8, r8)
 800455e:	46bd      	mov	sp, r7
 8004560:	b002      	add	sp, #8
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20001054 	.word	0x20001054
 8004568:	20001080 	.word	0x20001080
 800456c:	20001068 	.word	0x20001068

08004570 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2259      	movs	r2, #89	; 0x59
 800457c:	5c9b      	ldrb	r3, [r3, r2]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004586:	0018      	movs	r0, r3
 8004588:	f000 fdb0 	bl	80050ec <vPortFree>
				vPortFree( pxTCB );
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	0018      	movs	r0, r3
 8004590:	f000 fdac 	bl	80050ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004594:	e010      	b.n	80045b8 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2259      	movs	r2, #89	; 0x59
 800459a:	5c9b      	ldrb	r3, [r3, r2]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d104      	bne.n	80045aa <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	0018      	movs	r0, r3
 80045a4:	f000 fda2 	bl	80050ec <vPortFree>
	}
 80045a8:	e006      	b.n	80045b8 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2259      	movs	r2, #89	; 0x59
 80045ae:	5c9b      	ldrb	r3, [r3, r2]
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d001      	beq.n	80045b8 <prvDeleteTCB+0x48>
 80045b4:	b672      	cpsid	i
 80045b6:	e7fe      	b.n	80045b6 <prvDeleteTCB+0x46>
	}
 80045b8:	46c0      	nop			; (mov r8, r8)
 80045ba:	46bd      	mov	sp, r7
 80045bc:	b002      	add	sp, #8
 80045be:	bd80      	pop	{r7, pc}

080045c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045c6:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <prvResetNextTaskUnblockTime+0x40>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <prvResetNextTaskUnblockTime+0x14>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <prvResetNextTaskUnblockTime+0x16>
 80045d4:	2300      	movs	r3, #0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d004      	beq.n	80045e4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045da:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <prvResetNextTaskUnblockTime+0x44>)
 80045dc:	2201      	movs	r2, #1
 80045de:	4252      	negs	r2, r2
 80045e0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045e2:	e008      	b.n	80045f6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80045e4:	4b06      	ldr	r3, [pc, #24]	; (8004600 <prvResetNextTaskUnblockTime+0x40>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	4b04      	ldr	r3, [pc, #16]	; (8004604 <prvResetNextTaskUnblockTime+0x44>)
 80045f4:	601a      	str	r2, [r3, #0]
}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b002      	add	sp, #8
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	20001038 	.word	0x20001038
 8004604:	200010a0 	.word	0x200010a0

08004608 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800460e:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <xTaskGetSchedulerState+0x30>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d102      	bne.n	800461c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004616:	2301      	movs	r3, #1
 8004618:	607b      	str	r3, [r7, #4]
 800461a:	e008      	b.n	800462e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800461c:	4b07      	ldr	r3, [pc, #28]	; (800463c <xTaskGetSchedulerState+0x34>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d102      	bne.n	800462a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004624:	2302      	movs	r3, #2
 8004626:	607b      	str	r3, [r7, #4]
 8004628:	e001      	b.n	800462e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800462a:	2300      	movs	r3, #0
 800462c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800462e:	687b      	ldr	r3, [r7, #4]
	}
 8004630:	0018      	movs	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	b002      	add	sp, #8
 8004636:	bd80      	pop	{r7, pc}
 8004638:	2000108c 	.word	0x2000108c
 800463c:	200010a8 	.word	0x200010a8

08004640 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d044      	beq.n	80046e0 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004656:	4b25      	ldr	r3, [pc, #148]	; (80046ec <xTaskPriorityDisinherit+0xac>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <xTaskPriorityDisinherit+0x24>
 8004660:	b672      	cpsid	i
 8004662:	e7fe      	b.n	8004662 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <xTaskPriorityDisinherit+0x30>
 800466c:	b672      	cpsid	i
 800466e:	e7fe      	b.n	800466e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004674:	1e5a      	subs	r2, r3, #1
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004682:	429a      	cmp	r2, r3
 8004684:	d02c      	beq.n	80046e0 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468a:	2b00      	cmp	r3, #0
 800468c:	d128      	bne.n	80046e0 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	3304      	adds	r3, #4
 8004692:	0018      	movs	r0, r3
 8004694:	f7fe fded 	bl	8003272 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a4:	2238      	movs	r2, #56	; 0x38
 80046a6:	1ad2      	subs	r2, r2, r3
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b0:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <xTaskPriorityDisinherit+0xb0>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d903      	bls.n	80046c0 <xTaskPriorityDisinherit+0x80>
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046bc:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <xTaskPriorityDisinherit+0xb0>)
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c4:	0013      	movs	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	189b      	adds	r3, r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4a09      	ldr	r2, [pc, #36]	; (80046f4 <xTaskPriorityDisinherit+0xb4>)
 80046ce:	189a      	adds	r2, r3, r2
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	3304      	adds	r3, #4
 80046d4:	0019      	movs	r1, r3
 80046d6:	0010      	movs	r0, r2
 80046d8:	f7fe fd73 	bl	80031c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046dc:	2301      	movs	r3, #1
 80046de:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046e0:	68fb      	ldr	r3, [r7, #12]
	}
 80046e2:	0018      	movs	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	b004      	add	sp, #16
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	20000bac 	.word	0x20000bac
 80046f0:	20001088 	.word	0x20001088
 80046f4:	20000bb0 	.word	0x20000bb0

080046f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004702:	4b21      	ldr	r3, [pc, #132]	; (8004788 <prvAddCurrentTaskToDelayedList+0x90>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004708:	4b20      	ldr	r3, [pc, #128]	; (800478c <prvAddCurrentTaskToDelayedList+0x94>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3304      	adds	r3, #4
 800470e:	0018      	movs	r0, r3
 8004710:	f7fe fdaf 	bl	8003272 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3301      	adds	r3, #1
 8004718:	d10b      	bne.n	8004732 <prvAddCurrentTaskToDelayedList+0x3a>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d008      	beq.n	8004732 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004720:	4b1a      	ldr	r3, [pc, #104]	; (800478c <prvAddCurrentTaskToDelayedList+0x94>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	1d1a      	adds	r2, r3, #4
 8004726:	4b1a      	ldr	r3, [pc, #104]	; (8004790 <prvAddCurrentTaskToDelayedList+0x98>)
 8004728:	0011      	movs	r1, r2
 800472a:	0018      	movs	r0, r3
 800472c:	f7fe fd49 	bl	80031c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004730:	e026      	b.n	8004780 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	18d3      	adds	r3, r2, r3
 8004738:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800473a:	4b14      	ldr	r3, [pc, #80]	; (800478c <prvAddCurrentTaskToDelayedList+0x94>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	429a      	cmp	r2, r3
 8004748:	d209      	bcs.n	800475e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800474a:	4b12      	ldr	r3, [pc, #72]	; (8004794 <prvAddCurrentTaskToDelayedList+0x9c>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	4b0f      	ldr	r3, [pc, #60]	; (800478c <prvAddCurrentTaskToDelayedList+0x94>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3304      	adds	r3, #4
 8004754:	0019      	movs	r1, r3
 8004756:	0010      	movs	r0, r2
 8004758:	f7fe fd55 	bl	8003206 <vListInsert>
}
 800475c:	e010      	b.n	8004780 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800475e:	4b0e      	ldr	r3, [pc, #56]	; (8004798 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	4b0a      	ldr	r3, [pc, #40]	; (800478c <prvAddCurrentTaskToDelayedList+0x94>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3304      	adds	r3, #4
 8004768:	0019      	movs	r1, r3
 800476a:	0010      	movs	r0, r2
 800476c:	f7fe fd4b 	bl	8003206 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004770:	4b0a      	ldr	r3, [pc, #40]	; (800479c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	429a      	cmp	r2, r3
 8004778:	d202      	bcs.n	8004780 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800477a:	4b08      	ldr	r3, [pc, #32]	; (800479c <prvAddCurrentTaskToDelayedList+0xa4>)
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	601a      	str	r2, [r3, #0]
}
 8004780:	46c0      	nop			; (mov r8, r8)
 8004782:	46bd      	mov	sp, r7
 8004784:	b004      	add	sp, #16
 8004786:	bd80      	pop	{r7, pc}
 8004788:	20001084 	.word	0x20001084
 800478c:	20000bac 	.word	0x20000bac
 8004790:	2000106c 	.word	0x2000106c
 8004794:	2000103c 	.word	0x2000103c
 8004798:	20001038 	.word	0x20001038
 800479c:	200010a0 	.word	0x200010a0

080047a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80047a0:	b590      	push	{r4, r7, lr}
 80047a2:	b089      	sub	sp, #36	; 0x24
 80047a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80047aa:	f000 fa87 	bl	8004cbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80047ae:	4b17      	ldr	r3, [pc, #92]	; (800480c <xTimerCreateTimerTask+0x6c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d020      	beq.n	80047f8 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80047ba:	2300      	movs	r3, #0
 80047bc:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80047be:	003a      	movs	r2, r7
 80047c0:	1d39      	adds	r1, r7, #4
 80047c2:	2308      	movs	r3, #8
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	0018      	movs	r0, r3
 80047c8:	f7fe fcba 	bl	8003140 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80047cc:	683c      	ldr	r4, [r7, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	490f      	ldr	r1, [pc, #60]	; (8004810 <xTimerCreateTimerTask+0x70>)
 80047d4:	480f      	ldr	r0, [pc, #60]	; (8004814 <xTimerCreateTimerTask+0x74>)
 80047d6:	9202      	str	r2, [sp, #8]
 80047d8:	9301      	str	r3, [sp, #4]
 80047da:	2302      	movs	r3, #2
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	2300      	movs	r3, #0
 80047e0:	0022      	movs	r2, r4
 80047e2:	f7ff f996 	bl	8003b12 <xTaskCreateStatic>
 80047e6:	0002      	movs	r2, r0
 80047e8:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <xTimerCreateTimerTask+0x78>)
 80047ea:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80047ec:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <xTimerCreateTimerTask+0x78>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80047f4:	2301      	movs	r3, #1
 80047f6:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <xTimerCreateTimerTask+0x62>
 80047fe:	b672      	cpsid	i
 8004800:	e7fe      	b.n	8004800 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8004802:	68fb      	ldr	r3, [r7, #12]
}
 8004804:	0018      	movs	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	b005      	add	sp, #20
 800480a:	bd90      	pop	{r4, r7, pc}
 800480c:	200010dc 	.word	0x200010dc
 8004810:	08005388 	.word	0x08005388
 8004814:	08004921 	.word	0x08004921
 8004818:	200010e0 	.word	0x200010e0

0800481c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800481c:	b590      	push	{r4, r7, lr}
 800481e:	b08b      	sub	sp, #44	; 0x2c
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800482a:	2300      	movs	r3, #0
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <xTimerGenericCommand+0x1c>
 8004834:	b672      	cpsid	i
 8004836:	e7fe      	b.n	8004836 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004838:	4b1c      	ldr	r3, [pc, #112]	; (80048ac <xTimerGenericCommand+0x90>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d030      	beq.n	80048a2 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004840:	2414      	movs	r4, #20
 8004842:	193b      	adds	r3, r7, r4
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004848:	193b      	adds	r3, r7, r4
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800484e:	193b      	adds	r3, r7, r4
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b05      	cmp	r3, #5
 8004858:	dc19      	bgt.n	800488e <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800485a:	f7ff fed5 	bl	8004608 <xTaskGetSchedulerState>
 800485e:	0003      	movs	r3, r0
 8004860:	2b02      	cmp	r3, #2
 8004862:	d109      	bne.n	8004878 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004864:	4b11      	ldr	r3, [pc, #68]	; (80048ac <xTimerGenericCommand+0x90>)
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800486a:	1939      	adds	r1, r7, r4
 800486c:	2300      	movs	r3, #0
 800486e:	f7fe fdee 	bl	800344e <xQueueGenericSend>
 8004872:	0003      	movs	r3, r0
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
 8004876:	e014      	b.n	80048a2 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004878:	4b0c      	ldr	r3, [pc, #48]	; (80048ac <xTimerGenericCommand+0x90>)
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	2314      	movs	r3, #20
 800487e:	18f9      	adds	r1, r7, r3
 8004880:	2300      	movs	r3, #0
 8004882:	2200      	movs	r2, #0
 8004884:	f7fe fde3 	bl	800344e <xQueueGenericSend>
 8004888:	0003      	movs	r3, r0
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
 800488c:	e009      	b.n	80048a2 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800488e:	4b07      	ldr	r3, [pc, #28]	; (80048ac <xTimerGenericCommand+0x90>)
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	2314      	movs	r3, #20
 8004896:	18f9      	adds	r1, r7, r3
 8004898:	2300      	movs	r3, #0
 800489a:	f7fe fe9c 	bl	80035d6 <xQueueGenericSendFromISR>
 800489e:	0003      	movs	r3, r0
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048a4:	0018      	movs	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b00b      	add	sp, #44	; 0x2c
 80048aa:	bd90      	pop	{r4, r7, pc}
 80048ac:	200010dc 	.word	0x200010dc

080048b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048ba:	4b18      	ldr	r3, [pc, #96]	; (800491c <prvProcessExpiredTimer+0x6c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	3304      	adds	r3, #4
 80048c8:	0018      	movs	r0, r3
 80048ca:	f7fe fcd2 	bl	8003272 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d119      	bne.n	800490a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	699a      	ldr	r2, [r3, #24]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	18d1      	adds	r1, r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f8b6 	bl	8004a54 <prvInsertTimerInActiveList>
 80048e8:	1e03      	subs	r3, r0, #0
 80048ea:	d00e      	beq.n	800490a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	2300      	movs	r3, #0
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	2300      	movs	r3, #0
 80048f6:	2100      	movs	r1, #0
 80048f8:	f7ff ff90 	bl	800481c <xTimerGenericCommand>
 80048fc:	0003      	movs	r3, r0
 80048fe:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <prvProcessExpiredTimer+0x5a>
 8004906:	b672      	cpsid	i
 8004908:	e7fe      	b.n	8004908 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	0010      	movs	r0, r2
 8004912:	4798      	blx	r3
}
 8004914:	46c0      	nop			; (mov r8, r8)
 8004916:	46bd      	mov	sp, r7
 8004918:	b004      	add	sp, #16
 800491a:	bd80      	pop	{r7, pc}
 800491c:	200010d4 	.word	0x200010d4

08004920 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004928:	2308      	movs	r3, #8
 800492a:	18fb      	adds	r3, r7, r3
 800492c:	0018      	movs	r0, r3
 800492e:	f000 f851 	bl	80049d4 <prvGetNextExpireTime>
 8004932:	0003      	movs	r3, r0
 8004934:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	0011      	movs	r1, r2
 800493c:	0018      	movs	r0, r3
 800493e:	f000 f803 	bl	8004948 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004942:	f000 f8c9 	bl	8004ad8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004946:	e7ef      	b.n	8004928 <prvTimerTask+0x8>

08004948 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004952:	f7ff fad1 	bl	8003ef8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004956:	2308      	movs	r3, #8
 8004958:	18fb      	adds	r3, r7, r3
 800495a:	0018      	movs	r0, r3
 800495c:	f000 f85a 	bl	8004a14 <prvSampleTimeNow>
 8004960:	0003      	movs	r3, r0
 8004962:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d129      	bne.n	80049be <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10c      	bne.n	800498a <prvProcessTimerOrBlockTask+0x42>
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	429a      	cmp	r2, r3
 8004976:	d808      	bhi.n	800498a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8004978:	f7ff faca 	bl	8003f10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0011      	movs	r1, r2
 8004982:	0018      	movs	r0, r3
 8004984:	f7ff ff94 	bl	80048b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004988:	e01b      	b.n	80049c2 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d006      	beq.n	800499e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004990:	4b0e      	ldr	r3, [pc, #56]	; (80049cc <prvProcessTimerOrBlockTask+0x84>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	425a      	negs	r2, r3
 8004998:	4153      	adcs	r3, r2
 800499a:	b2db      	uxtb	r3, r3
 800499c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800499e:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <prvProcessTimerOrBlockTask+0x88>)
 80049a0:	6818      	ldr	r0, [r3, #0]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	0019      	movs	r1, r3
 80049ac:	f7ff f87e 	bl	8003aac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80049b0:	f7ff faae 	bl	8003f10 <xTaskResumeAll>
 80049b4:	1e03      	subs	r3, r0, #0
 80049b6:	d104      	bne.n	80049c2 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80049b8:	f000 fa4a 	bl	8004e50 <vPortYield>
}
 80049bc:	e001      	b.n	80049c2 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 80049be:	f7ff faa7 	bl	8003f10 <xTaskResumeAll>
}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b004      	add	sp, #16
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	200010d8 	.word	0x200010d8
 80049d0:	200010dc 	.word	0x200010dc

080049d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049dc:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <prvGetNextExpireTime+0x3c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	425a      	negs	r2, r3
 80049e4:	4153      	adcs	r3, r2
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	001a      	movs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d105      	bne.n	8004a02 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049f6:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <prvGetNextExpireTime+0x3c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	e001      	b.n	8004a06 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a06:	68fb      	ldr	r3, [r7, #12]
}
 8004a08:	0018      	movs	r0, r3
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	b004      	add	sp, #16
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	200010d4 	.word	0x200010d4

08004a14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a1c:	f7ff fb04 	bl	8004028 <xTaskGetTickCount>
 8004a20:	0003      	movs	r3, r0
 8004a22:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a24:	4b0a      	ldr	r3, [pc, #40]	; (8004a50 <prvSampleTimeNow+0x3c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d205      	bcs.n	8004a3a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8004a2e:	f000 f8eb 	bl	8004c08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	e002      	b.n	8004a40 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a40:	4b03      	ldr	r3, [pc, #12]	; (8004a50 <prvSampleTimeNow+0x3c>)
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8004a46:	68fb      	ldr	r3, [r7, #12]
}
 8004a48:	0018      	movs	r0, r3
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b004      	add	sp, #16
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	200010e4 	.word	0x200010e4

08004a54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d812      	bhi.n	8004aa0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	1ad2      	subs	r2, r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d302      	bcc.n	8004a8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	e01b      	b.n	8004ac6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a8e:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <prvInsertTimerInActiveList+0x7c>)
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3304      	adds	r3, #4
 8004a96:	0019      	movs	r1, r3
 8004a98:	0010      	movs	r0, r2
 8004a9a:	f7fe fbb4 	bl	8003206 <vListInsert>
 8004a9e:	e012      	b.n	8004ac6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d206      	bcs.n	8004ab6 <prvInsertTimerInActiveList+0x62>
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d302      	bcc.n	8004ab6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	e007      	b.n	8004ac6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ab6:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <prvInsertTimerInActiveList+0x80>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3304      	adds	r3, #4
 8004abe:	0019      	movs	r1, r3
 8004ac0:	0010      	movs	r0, r2
 8004ac2:	f7fe fba0 	bl	8003206 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ac6:	697b      	ldr	r3, [r7, #20]
}
 8004ac8:	0018      	movs	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b006      	add	sp, #24
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	200010d8 	.word	0x200010d8
 8004ad4:	200010d4 	.word	0x200010d4

08004ad8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ad8:	b590      	push	{r4, r7, lr}
 8004ada:	b08d      	sub	sp, #52	; 0x34
 8004adc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ade:	e07f      	b.n	8004be0 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ae0:	2208      	movs	r2, #8
 8004ae2:	18bb      	adds	r3, r7, r2
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	da0f      	bge.n	8004b0a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004aea:	18bb      	adds	r3, r7, r2
 8004aec:	3304      	adds	r3, #4
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <prvProcessReceivedCommands+0x22>
 8004af6:	b672      	cpsid	i
 8004af8:	e7fe      	b.n	8004af8 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	6858      	ldr	r0, [r3, #4]
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	0019      	movs	r1, r3
 8004b08:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b0a:	2208      	movs	r2, #8
 8004b0c:	18bb      	adds	r3, r7, r2
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	db65      	blt.n	8004be0 <prvProcessReceivedCommands+0x108>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b14:	18bb      	adds	r3, r7, r2
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d004      	beq.n	8004b2c <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	3304      	adds	r3, #4
 8004b26:	0018      	movs	r0, r3
 8004b28:	f7fe fba3 	bl	8003272 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b2c:	1d3b      	adds	r3, r7, #4
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f7ff ff70 	bl	8004a14 <prvSampleTimeNow>
 8004b34:	0003      	movs	r3, r0
 8004b36:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8004b38:	2308      	movs	r3, #8
 8004b3a:	18fb      	adds	r3, r7, r3
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b09      	cmp	r3, #9
 8004b40:	d84d      	bhi.n	8004bde <prvProcessReceivedCommands+0x106>
 8004b42:	009a      	lsls	r2, r3, #2
 8004b44:	4b2e      	ldr	r3, [pc, #184]	; (8004c00 <prvProcessReceivedCommands+0x128>)
 8004b46:	18d3      	adds	r3, r2, r3
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b4c:	2408      	movs	r4, #8
 8004b4e:	193b      	adds	r3, r7, r4
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	18d1      	adds	r1, r2, r3
 8004b58:	193b      	adds	r3, r7, r4
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	6a38      	ldr	r0, [r7, #32]
 8004b60:	f7ff ff78 	bl	8004a54 <prvInsertTimerInActiveList>
 8004b64:	1e03      	subs	r3, r0, #0
 8004b66:	d03b      	beq.n	8004be0 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	6a3a      	ldr	r2, [r7, #32]
 8004b6e:	0010      	movs	r0, r2
 8004b70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d132      	bne.n	8004be0 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004b7a:	193b      	adds	r3, r7, r4
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	18d2      	adds	r2, r2, r3
 8004b84:	6a38      	ldr	r0, [r7, #32]
 8004b86:	2300      	movs	r3, #0
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	f7ff fe45 	bl	800481c <xTimerGenericCommand>
 8004b92:	0003      	movs	r3, r0
 8004b94:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d121      	bne.n	8004be0 <prvProcessReceivedCommands+0x108>
 8004b9c:	b672      	cpsid	i
 8004b9e:	e7fe      	b.n	8004b9e <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ba0:	2308      	movs	r3, #8
 8004ba2:	18fb      	adds	r3, r7, r3
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <prvProcessReceivedCommands+0xde>
 8004bb2:	b672      	cpsid	i
 8004bb4:	e7fe      	b.n	8004bb4 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	18d1      	adds	r1, r2, r3
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	6a38      	ldr	r0, [r7, #32]
 8004bc4:	f7ff ff46 	bl	8004a54 <prvInsertTimerInActiveList>
					break;
 8004bc8:	e00a      	b.n	8004be0 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	222c      	movs	r2, #44	; 0x2c
 8004bce:	5c9b      	ldrb	r3, [r3, r2]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d105      	bne.n	8004be0 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f000 fa88 	bl	80050ec <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004bdc:	e000      	b.n	8004be0 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
 8004bde:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004be0:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <prvProcessReceivedCommands+0x12c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2208      	movs	r2, #8
 8004be6:	18b9      	adds	r1, r7, r2
 8004be8:	2200      	movs	r2, #0
 8004bea:	0018      	movs	r0, r3
 8004bec:	f7fe fd64 	bl	80036b8 <xQueueReceive>
 8004bf0:	1e03      	subs	r3, r0, #0
 8004bf2:	d000      	beq.n	8004bf6 <prvProcessReceivedCommands+0x11e>
 8004bf4:	e774      	b.n	8004ae0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	46c0      	nop			; (mov r8, r8)
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	b00b      	add	sp, #44	; 0x2c
 8004bfe:	bd90      	pop	{r4, r7, pc}
 8004c00:	08005418 	.word	0x08005418
 8004c04:	200010dc 	.word	0x200010dc

08004c08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c0e:	e03e      	b.n	8004c8e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c10:	4b28      	ldr	r3, [pc, #160]	; (8004cb4 <prvSwitchTimerLists+0xac>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c1a:	4b26      	ldr	r3, [pc, #152]	; (8004cb4 <prvSwitchTimerLists+0xac>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3304      	adds	r3, #4
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f7fe fb22 	bl	8003272 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	0010      	movs	r0, r2
 8004c36:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d126      	bne.n	8004c8e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	18d3      	adds	r3, r2, r3
 8004c48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d90e      	bls.n	8004c70 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c5e:	4b15      	ldr	r3, [pc, #84]	; (8004cb4 <prvSwitchTimerLists+0xac>)
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3304      	adds	r3, #4
 8004c66:	0019      	movs	r1, r3
 8004c68:	0010      	movs	r0, r2
 8004c6a:	f7fe facc 	bl	8003206 <vListInsert>
 8004c6e:	e00e      	b.n	8004c8e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	2300      	movs	r3, #0
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	2300      	movs	r3, #0
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	f7ff fdce 	bl	800481c <xTimerGenericCommand>
 8004c80:	0003      	movs	r3, r0
 8004c82:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <prvSwitchTimerLists+0x86>
 8004c8a:	b672      	cpsid	i
 8004c8c:	e7fe      	b.n	8004c8c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c8e:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <prvSwitchTimerLists+0xac>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1bb      	bne.n	8004c10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c98:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <prvSwitchTimerLists+0xac>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c9e:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <prvSwitchTimerLists+0xb0>)
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	4b04      	ldr	r3, [pc, #16]	; (8004cb4 <prvSwitchTimerLists+0xac>)
 8004ca4:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8004ca6:	4b04      	ldr	r3, [pc, #16]	; (8004cb8 <prvSwitchTimerLists+0xb0>)
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	601a      	str	r2, [r3, #0]
}
 8004cac:	46c0      	nop			; (mov r8, r8)
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	b006      	add	sp, #24
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	200010d4 	.word	0x200010d4
 8004cb8:	200010d8 	.word	0x200010d8

08004cbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004cc2:	f000 f8d5 	bl	8004e70 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004cc6:	4b16      	ldr	r3, [pc, #88]	; (8004d20 <prvCheckForValidListAndQueue+0x64>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d123      	bne.n	8004d16 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8004cce:	4b15      	ldr	r3, [pc, #84]	; (8004d24 <prvCheckForValidListAndQueue+0x68>)
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f7fe fa4d 	bl	8003170 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004cd6:	4b14      	ldr	r3, [pc, #80]	; (8004d28 <prvCheckForValidListAndQueue+0x6c>)
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f7fe fa49 	bl	8003170 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004cde:	4b13      	ldr	r3, [pc, #76]	; (8004d2c <prvCheckForValidListAndQueue+0x70>)
 8004ce0:	4a10      	ldr	r2, [pc, #64]	; (8004d24 <prvCheckForValidListAndQueue+0x68>)
 8004ce2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ce4:	4b12      	ldr	r3, [pc, #72]	; (8004d30 <prvCheckForValidListAndQueue+0x74>)
 8004ce6:	4a10      	ldr	r2, [pc, #64]	; (8004d28 <prvCheckForValidListAndQueue+0x6c>)
 8004ce8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004cea:	4b12      	ldr	r3, [pc, #72]	; (8004d34 <prvCheckForValidListAndQueue+0x78>)
 8004cec:	4a12      	ldr	r2, [pc, #72]	; (8004d38 <prvCheckForValidListAndQueue+0x7c>)
 8004cee:	2100      	movs	r1, #0
 8004cf0:	9100      	str	r1, [sp, #0]
 8004cf2:	2110      	movs	r1, #16
 8004cf4:	200a      	movs	r0, #10
 8004cf6:	f7fe fb38 	bl	800336a <xQueueGenericCreateStatic>
 8004cfa:	0002      	movs	r2, r0
 8004cfc:	4b08      	ldr	r3, [pc, #32]	; (8004d20 <prvCheckForValidListAndQueue+0x64>)
 8004cfe:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d00:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <prvCheckForValidListAndQueue+0x64>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d006      	beq.n	8004d16 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d08:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <prvCheckForValidListAndQueue+0x64>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a0b      	ldr	r2, [pc, #44]	; (8004d3c <prvCheckForValidListAndQueue+0x80>)
 8004d0e:	0011      	movs	r1, r2
 8004d10:	0018      	movs	r0, r3
 8004d12:	f7fe fea3 	bl	8003a5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d16:	f000 f8bd 	bl	8004e94 <vPortExitCritical>
}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	200010dc 	.word	0x200010dc
 8004d24:	200010ac 	.word	0x200010ac
 8004d28:	200010c0 	.word	0x200010c0
 8004d2c:	200010d4 	.word	0x200010d4
 8004d30:	200010d8 	.word	0x200010d8
 8004d34:	20001188 	.word	0x20001188
 8004d38:	200010e8 	.word	0x200010e8
 8004d3c:	08005390 	.word	0x08005390

08004d40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3b04      	subs	r3, #4
 8004d50:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2280      	movs	r2, #128	; 0x80
 8004d56:	0452      	lsls	r2, r2, #17
 8004d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3b04      	subs	r3, #4
 8004d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3b04      	subs	r3, #4
 8004d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d6c:	4a08      	ldr	r2, [pc, #32]	; (8004d90 <pxPortInitialiseStack+0x50>)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	3b14      	subs	r3, #20
 8004d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	3b20      	subs	r3, #32
 8004d82:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d84:	68fb      	ldr	r3, [r7, #12]
}
 8004d86:	0018      	movs	r0, r3
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	b004      	add	sp, #16
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	46c0      	nop			; (mov r8, r8)
 8004d90:	08004d95 	.word	0x08004d95

08004d94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d9e:	4b08      	ldr	r3, [pc, #32]	; (8004dc0 <prvTaskExitError+0x2c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3301      	adds	r3, #1
 8004da4:	d001      	beq.n	8004daa <prvTaskExitError+0x16>
 8004da6:	b672      	cpsid	i
 8004da8:	e7fe      	b.n	8004da8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8004daa:	b672      	cpsid	i
	while( ulDummy == 0 )
 8004dac:	46c0      	nop			; (mov r8, r8)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0fc      	beq.n	8004dae <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004db4:	46c0      	nop			; (mov r8, r8)
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	46bd      	mov	sp, r7
 8004dba:	b002      	add	sp, #8
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	2000000c 	.word	0x2000000c

08004dc4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004dc8:	46c0      	nop			; (mov r8, r8)
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004dd0:	4a0b      	ldr	r2, [pc, #44]	; (8004e00 <pxCurrentTCBConst2>)
 8004dd2:	6813      	ldr	r3, [r2, #0]
 8004dd4:	6818      	ldr	r0, [r3, #0]
 8004dd6:	3020      	adds	r0, #32
 8004dd8:	f380 8809 	msr	PSP, r0
 8004ddc:	2002      	movs	r0, #2
 8004dde:	f380 8814 	msr	CONTROL, r0
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004de8:	46ae      	mov	lr, r5
 8004dea:	bc08      	pop	{r3}
 8004dec:	bc04      	pop	{r2}
 8004dee:	b662      	cpsie	i
 8004df0:	4718      	bx	r3
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	46c0      	nop			; (mov r8, r8)
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	46c0      	nop			; (mov r8, r8)
 8004dfa:	46c0      	nop			; (mov r8, r8)
 8004dfc:	46c0      	nop			; (mov r8, r8)
 8004dfe:	46c0      	nop			; (mov r8, r8)

08004e00 <pxCurrentTCBConst2>:
 8004e00:	20000bac 	.word	0x20000bac
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004e04:	46c0      	nop			; (mov r8, r8)
 8004e06:	46c0      	nop			; (mov r8, r8)

08004e08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8004e0c:	4b0e      	ldr	r3, [pc, #56]	; (8004e48 <xPortStartScheduler+0x40>)
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4b0d      	ldr	r3, [pc, #52]	; (8004e48 <xPortStartScheduler+0x40>)
 8004e12:	21ff      	movs	r1, #255	; 0xff
 8004e14:	0409      	lsls	r1, r1, #16
 8004e16:	430a      	orrs	r2, r1
 8004e18:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8004e1a:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <xPortStartScheduler+0x40>)
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	4b0a      	ldr	r3, [pc, #40]	; (8004e48 <xPortStartScheduler+0x40>)
 8004e20:	21ff      	movs	r1, #255	; 0xff
 8004e22:	0609      	lsls	r1, r1, #24
 8004e24:	430a      	orrs	r2, r1
 8004e26:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8004e28:	f000 f898 	bl	8004f5c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e2c:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <xPortStartScheduler+0x44>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004e32:	f7ff ffcd 	bl	8004dd0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e36:	f7ff f9b9 	bl	80041ac <vTaskSwitchContext>
	prvTaskExitError();
 8004e3a:	f7ff ffab 	bl	8004d94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	0018      	movs	r0, r3
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	e000ed20 	.word	0xe000ed20
 8004e4c:	2000000c 	.word	0x2000000c

08004e50 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004e54:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <vPortYield+0x1c>)
 8004e56:	2280      	movs	r2, #128	; 0x80
 8004e58:	0552      	lsls	r2, r2, #21
 8004e5a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8004e5c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004e60:	f3bf 8f6f 	isb	sy
}
 8004e64:	46c0      	nop			; (mov r8, r8)
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	e000ed04 	.word	0xe000ed04

08004e70 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004e74:	b672      	cpsid	i
    uxCriticalNesting++;
 8004e76:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <vPortEnterCritical+0x20>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	4b04      	ldr	r3, [pc, #16]	; (8004e90 <vPortEnterCritical+0x20>)
 8004e7e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004e80:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004e84:	f3bf 8f6f 	isb	sy
}
 8004e88:	46c0      	nop			; (mov r8, r8)
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	2000000c 	.word	0x2000000c

08004e94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e98:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <vPortExitCritical+0x2c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <vPortExitCritical+0x10>
 8004ea0:	b672      	cpsid	i
 8004ea2:	e7fe      	b.n	8004ea2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004ea4:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <vPortExitCritical+0x2c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	1e5a      	subs	r2, r3, #1
 8004eaa:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <vPortExitCritical+0x2c>)
 8004eac:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8004eae:	4b04      	ldr	r3, [pc, #16]	; (8004ec0 <vPortExitCritical+0x2c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d100      	bne.n	8004eb8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004eb6:	b662      	cpsie	i
    }
}
 8004eb8:	46c0      	nop			; (mov r8, r8)
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	46c0      	nop			; (mov r8, r8)
 8004ec0:	2000000c 	.word	0x2000000c

08004ec4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004ec4:	f3ef 8010 	mrs	r0, PRIMASK
 8004ec8:	b672      	cpsid	i
 8004eca:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8004ecc:	46c0      	nop			; (mov r8, r8)
 8004ece:	0018      	movs	r0, r3

08004ed0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004ed0:	f380 8810 	msr	PRIMASK, r0
 8004ed4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8004ed6:	46c0      	nop			; (mov r8, r8)
	...

08004ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ee0:	f3ef 8009 	mrs	r0, PSP
 8004ee4:	4b0e      	ldr	r3, [pc, #56]	; (8004f20 <pxCurrentTCBConst>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	3820      	subs	r0, #32
 8004eea:	6010      	str	r0, [r2, #0]
 8004eec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004eee:	4644      	mov	r4, r8
 8004ef0:	464d      	mov	r5, r9
 8004ef2:	4656      	mov	r6, sl
 8004ef4:	465f      	mov	r7, fp
 8004ef6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004ef8:	b508      	push	{r3, lr}
 8004efa:	b672      	cpsid	i
 8004efc:	f7ff f956 	bl	80041ac <vTaskSwitchContext>
 8004f00:	b662      	cpsie	i
 8004f02:	bc0c      	pop	{r2, r3}
 8004f04:	6811      	ldr	r1, [r2, #0]
 8004f06:	6808      	ldr	r0, [r1, #0]
 8004f08:	3010      	adds	r0, #16
 8004f0a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004f0c:	46a0      	mov	r8, r4
 8004f0e:	46a9      	mov	r9, r5
 8004f10:	46b2      	mov	sl, r6
 8004f12:	46bb      	mov	fp, r7
 8004f14:	f380 8809 	msr	PSP, r0
 8004f18:	3820      	subs	r0, #32
 8004f1a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004f1c:	4718      	bx	r3
 8004f1e:	46c0      	nop			; (mov r8, r8)

08004f20 <pxCurrentTCBConst>:
 8004f20:	20000bac 	.word	0x20000bac
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004f24:	46c0      	nop			; (mov r8, r8)
 8004f26:	46c0      	nop			; (mov r8, r8)

08004f28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f2e:	f7ff ffc9 	bl	8004ec4 <ulSetInterruptMaskFromISR>
 8004f32:	0003      	movs	r3, r0
 8004f34:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f36:	f7ff f885 	bl	8004044 <xTaskIncrementTick>
 8004f3a:	1e03      	subs	r3, r0, #0
 8004f3c:	d003      	beq.n	8004f46 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8004f3e:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <xPortSysTickHandler+0x30>)
 8004f40:	2280      	movs	r2, #128	; 0x80
 8004f42:	0552      	lsls	r2, r2, #21
 8004f44:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	0018      	movs	r0, r3
 8004f4a:	f7ff ffc1 	bl	8004ed0 <vClearInterruptMaskFromISR>
}
 8004f4e:	46c0      	nop			; (mov r8, r8)
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b002      	add	sp, #8
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	e000ed04 	.word	0xe000ed04

08004f5c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004f60:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <prvSetupTimerInterrupt+0x34>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004f66:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <prvSetupTimerInterrupt+0x38>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f6c:	4b0a      	ldr	r3, [pc, #40]	; (8004f98 <prvSetupTimerInterrupt+0x3c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	22fa      	movs	r2, #250	; 0xfa
 8004f72:	0091      	lsls	r1, r2, #2
 8004f74:	0018      	movs	r0, r3
 8004f76:	f7fb f8cf 	bl	8000118 <__udivsi3>
 8004f7a:	0003      	movs	r3, r0
 8004f7c:	001a      	movs	r2, r3
 8004f7e:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <prvSetupTimerInterrupt+0x40>)
 8004f80:	3a01      	subs	r2, #1
 8004f82:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004f84:	4b02      	ldr	r3, [pc, #8]	; (8004f90 <prvSetupTimerInterrupt+0x34>)
 8004f86:	2207      	movs	r2, #7
 8004f88:	601a      	str	r2, [r3, #0]
}
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	e000e010 	.word	0xe000e010
 8004f94:	e000e018 	.word	0xe000e018
 8004f98:	20000000 	.word	0x20000000
 8004f9c:	e000e014 	.word	0xe000e014

08004fa0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8004fac:	f7fe ffa4 	bl	8003ef8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fb0:	4b49      	ldr	r3, [pc, #292]	; (80050d8 <pvPortMalloc+0x138>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004fb8:	f000 f8e0 	bl	800517c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004fbc:	4b47      	ldr	r3, [pc, #284]	; (80050dc <pvPortMalloc+0x13c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	d000      	beq.n	8004fc8 <pvPortMalloc+0x28>
 8004fc6:	e079      	b.n	80050bc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d012      	beq.n	8004ff4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8004fce:	2208      	movs	r2, #8
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	189b      	adds	r3, r3, r2
 8004fd4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2207      	movs	r2, #7
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d00a      	beq.n	8004ff4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2207      	movs	r2, #7
 8004fe2:	4393      	bics	r3, r2
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2207      	movs	r2, #7
 8004fec:	4013      	ands	r3, r2
 8004fee:	d001      	beq.n	8004ff4 <pvPortMalloc+0x54>
 8004ff0:	b672      	cpsid	i
 8004ff2:	e7fe      	b.n	8004ff2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d060      	beq.n	80050bc <pvPortMalloc+0x11c>
 8004ffa:	4b39      	ldr	r3, [pc, #228]	; (80050e0 <pvPortMalloc+0x140>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	429a      	cmp	r2, r3
 8005002:	d85b      	bhi.n	80050bc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005004:	4b37      	ldr	r3, [pc, #220]	; (80050e4 <pvPortMalloc+0x144>)
 8005006:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005008:	4b36      	ldr	r3, [pc, #216]	; (80050e4 <pvPortMalloc+0x144>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800500e:	e004      	b.n	800501a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	429a      	cmp	r2, r3
 8005022:	d903      	bls.n	800502c <pvPortMalloc+0x8c>
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1f1      	bne.n	8005010 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800502c:	4b2a      	ldr	r3, [pc, #168]	; (80050d8 <pvPortMalloc+0x138>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	429a      	cmp	r2, r3
 8005034:	d042      	beq.n	80050bc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2208      	movs	r2, #8
 800503c:	189b      	adds	r3, r3, r2
 800503e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	1ad2      	subs	r2, r2, r3
 8005050:	2308      	movs	r3, #8
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	429a      	cmp	r2, r3
 8005056:	d916      	bls.n	8005086 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	18d3      	adds	r3, r2, r3
 800505e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2207      	movs	r2, #7
 8005064:	4013      	ands	r3, r2
 8005066:	d001      	beq.n	800506c <pvPortMalloc+0xcc>
 8005068:	b672      	cpsid	i
 800506a:	e7fe      	b.n	800506a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	1ad2      	subs	r2, r2, r3
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	0018      	movs	r0, r3
 8005082:	f000 f8db 	bl	800523c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005086:	4b16      	ldr	r3, [pc, #88]	; (80050e0 <pvPortMalloc+0x140>)
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	1ad2      	subs	r2, r2, r3
 8005090:	4b13      	ldr	r3, [pc, #76]	; (80050e0 <pvPortMalloc+0x140>)
 8005092:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005094:	4b12      	ldr	r3, [pc, #72]	; (80050e0 <pvPortMalloc+0x140>)
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	4b13      	ldr	r3, [pc, #76]	; (80050e8 <pvPortMalloc+0x148>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	429a      	cmp	r2, r3
 800509e:	d203      	bcs.n	80050a8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050a0:	4b0f      	ldr	r3, [pc, #60]	; (80050e0 <pvPortMalloc+0x140>)
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	4b10      	ldr	r3, [pc, #64]	; (80050e8 <pvPortMalloc+0x148>)
 80050a6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	4b0b      	ldr	r3, [pc, #44]	; (80050dc <pvPortMalloc+0x13c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	431a      	orrs	r2, r3
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050bc:	f7fe ff28 	bl	8003f10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2207      	movs	r2, #7
 80050c4:	4013      	ands	r3, r2
 80050c6:	d001      	beq.n	80050cc <pvPortMalloc+0x12c>
 80050c8:	b672      	cpsid	i
 80050ca:	e7fe      	b.n	80050ca <pvPortMalloc+0x12a>
	return pvReturn;
 80050cc:	68fb      	ldr	r3, [r7, #12]
}
 80050ce:	0018      	movs	r0, r3
 80050d0:	46bd      	mov	sp, r7
 80050d2:	b006      	add	sp, #24
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	20001de0 	.word	0x20001de0
 80050dc:	20001dec 	.word	0x20001dec
 80050e0:	20001de4 	.word	0x20001de4
 80050e4:	20001dd8 	.word	0x20001dd8
 80050e8:	20001de8 	.word	0x20001de8

080050ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d035      	beq.n	800516a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050fe:	2308      	movs	r3, #8
 8005100:	425b      	negs	r3, r3
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	18d3      	adds	r3, r2, r3
 8005106:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	4b18      	ldr	r3, [pc, #96]	; (8005174 <vPortFree+0x88>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4013      	ands	r3, r2
 8005116:	d101      	bne.n	800511c <vPortFree+0x30>
 8005118:	b672      	cpsid	i
 800511a:	e7fe      	b.n	800511a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <vPortFree+0x3c>
 8005124:	b672      	cpsid	i
 8005126:	e7fe      	b.n	8005126 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	4b11      	ldr	r3, [pc, #68]	; (8005174 <vPortFree+0x88>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4013      	ands	r3, r2
 8005132:	d01a      	beq.n	800516a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d116      	bne.n	800516a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <vPortFree+0x88>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	43db      	mvns	r3, r3
 8005146:	401a      	ands	r2, r3
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800514c:	f7fe fed4 	bl	8003ef8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	4b08      	ldr	r3, [pc, #32]	; (8005178 <vPortFree+0x8c>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	18d2      	adds	r2, r2, r3
 800515a:	4b07      	ldr	r3, [pc, #28]	; (8005178 <vPortFree+0x8c>)
 800515c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	0018      	movs	r0, r3
 8005162:	f000 f86b 	bl	800523c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005166:	f7fe fed3 	bl	8003f10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	46bd      	mov	sp, r7
 800516e:	b004      	add	sp, #16
 8005170:	bd80      	pop	{r7, pc}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	20001dec 	.word	0x20001dec
 8005178:	20001de4 	.word	0x20001de4

0800517c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005182:	23c0      	movs	r3, #192	; 0xc0
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005188:	4b26      	ldr	r3, [pc, #152]	; (8005224 <prvHeapInit+0xa8>)
 800518a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2207      	movs	r2, #7
 8005190:	4013      	ands	r3, r2
 8005192:	d00c      	beq.n	80051ae <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3307      	adds	r3, #7
 8005198:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2207      	movs	r2, #7
 800519e:	4393      	bics	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	1ad2      	subs	r2, r2, r3
 80051a8:	4b1e      	ldr	r3, [pc, #120]	; (8005224 <prvHeapInit+0xa8>)
 80051aa:	18d3      	adds	r3, r2, r3
 80051ac:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051b2:	4b1d      	ldr	r3, [pc, #116]	; (8005228 <prvHeapInit+0xac>)
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051b8:	4b1b      	ldr	r3, [pc, #108]	; (8005228 <prvHeapInit+0xac>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	18d3      	adds	r3, r2, r3
 80051c4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051c6:	2208      	movs	r2, #8
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	1a9b      	subs	r3, r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2207      	movs	r2, #7
 80051d2:	4393      	bics	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4b14      	ldr	r3, [pc, #80]	; (800522c <prvHeapInit+0xb0>)
 80051da:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80051dc:	4b13      	ldr	r3, [pc, #76]	; (800522c <prvHeapInit+0xb0>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2200      	movs	r2, #0
 80051e2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051e4:	4b11      	ldr	r3, [pc, #68]	; (800522c <prvHeapInit+0xb0>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	1ad2      	subs	r2, r2, r3
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051fa:	4b0c      	ldr	r3, [pc, #48]	; (800522c <prvHeapInit+0xb0>)
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	4b0a      	ldr	r3, [pc, #40]	; (8005230 <prvHeapInit+0xb4>)
 8005208:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	4b09      	ldr	r3, [pc, #36]	; (8005234 <prvHeapInit+0xb8>)
 8005210:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005212:	4b09      	ldr	r3, [pc, #36]	; (8005238 <prvHeapInit+0xbc>)
 8005214:	2280      	movs	r2, #128	; 0x80
 8005216:	0612      	lsls	r2, r2, #24
 8005218:	601a      	str	r2, [r3, #0]
}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	46bd      	mov	sp, r7
 800521e:	b004      	add	sp, #16
 8005220:	bd80      	pop	{r7, pc}
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	200011d8 	.word	0x200011d8
 8005228:	20001dd8 	.word	0x20001dd8
 800522c:	20001de0 	.word	0x20001de0
 8005230:	20001de8 	.word	0x20001de8
 8005234:	20001de4 	.word	0x20001de4
 8005238:	20001dec 	.word	0x20001dec

0800523c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005244:	4b27      	ldr	r3, [pc, #156]	; (80052e4 <prvInsertBlockIntoFreeList+0xa8>)
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	e002      	b.n	8005250 <prvInsertBlockIntoFreeList+0x14>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	429a      	cmp	r2, r3
 8005258:	d8f7      	bhi.n	800524a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	18d3      	adds	r3, r2, r3
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	429a      	cmp	r2, r3
 800526a:	d108      	bne.n	800527e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	18d2      	adds	r2, r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	18d2      	adds	r2, r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	429a      	cmp	r2, r3
 8005290:	d118      	bne.n	80052c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	4b14      	ldr	r3, [pc, #80]	; (80052e8 <prvInsertBlockIntoFreeList+0xac>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d00d      	beq.n	80052ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	18d2      	adds	r2, r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	e008      	b.n	80052cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052ba:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <prvInsertBlockIntoFreeList+0xac>)
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	e003      	b.n	80052cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d002      	beq.n	80052da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	46bd      	mov	sp, r7
 80052de:	b004      	add	sp, #16
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	20001dd8 	.word	0x20001dd8
 80052e8:	20001de0 	.word	0x20001de0

080052ec <memset>:
 80052ec:	0003      	movs	r3, r0
 80052ee:	1882      	adds	r2, r0, r2
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d100      	bne.n	80052f6 <memset+0xa>
 80052f4:	4770      	bx	lr
 80052f6:	7019      	strb	r1, [r3, #0]
 80052f8:	3301      	adds	r3, #1
 80052fa:	e7f9      	b.n	80052f0 <memset+0x4>

080052fc <__libc_init_array>:
 80052fc:	b570      	push	{r4, r5, r6, lr}
 80052fe:	2600      	movs	r6, #0
 8005300:	4c0c      	ldr	r4, [pc, #48]	; (8005334 <__libc_init_array+0x38>)
 8005302:	4d0d      	ldr	r5, [pc, #52]	; (8005338 <__libc_init_array+0x3c>)
 8005304:	1b64      	subs	r4, r4, r5
 8005306:	10a4      	asrs	r4, r4, #2
 8005308:	42a6      	cmp	r6, r4
 800530a:	d109      	bne.n	8005320 <__libc_init_array+0x24>
 800530c:	2600      	movs	r6, #0
 800530e:	f000 f823 	bl	8005358 <_init>
 8005312:	4c0a      	ldr	r4, [pc, #40]	; (800533c <__libc_init_array+0x40>)
 8005314:	4d0a      	ldr	r5, [pc, #40]	; (8005340 <__libc_init_array+0x44>)
 8005316:	1b64      	subs	r4, r4, r5
 8005318:	10a4      	asrs	r4, r4, #2
 800531a:	42a6      	cmp	r6, r4
 800531c:	d105      	bne.n	800532a <__libc_init_array+0x2e>
 800531e:	bd70      	pop	{r4, r5, r6, pc}
 8005320:	00b3      	lsls	r3, r6, #2
 8005322:	58eb      	ldr	r3, [r5, r3]
 8005324:	4798      	blx	r3
 8005326:	3601      	adds	r6, #1
 8005328:	e7ee      	b.n	8005308 <__libc_init_array+0xc>
 800532a:	00b3      	lsls	r3, r6, #2
 800532c:	58eb      	ldr	r3, [r5, r3]
 800532e:	4798      	blx	r3
 8005330:	3601      	adds	r6, #1
 8005332:	e7f2      	b.n	800531a <__libc_init_array+0x1e>
 8005334:	08005440 	.word	0x08005440
 8005338:	08005440 	.word	0x08005440
 800533c:	08005444 	.word	0x08005444
 8005340:	08005440 	.word	0x08005440

08005344 <memcpy>:
 8005344:	2300      	movs	r3, #0
 8005346:	b510      	push	{r4, lr}
 8005348:	429a      	cmp	r2, r3
 800534a:	d100      	bne.n	800534e <memcpy+0xa>
 800534c:	bd10      	pop	{r4, pc}
 800534e:	5ccc      	ldrb	r4, [r1, r3]
 8005350:	54c4      	strb	r4, [r0, r3]
 8005352:	3301      	adds	r3, #1
 8005354:	e7f8      	b.n	8005348 <memcpy+0x4>
	...

08005358 <_init>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr

08005364 <_fini>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	46c0      	nop			; (mov r8, r8)
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr
