
AgoraVai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003808  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080038c8  080038c8  000138c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003900  08003900  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003900  08003900  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003900  08003900  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003900  08003900  00013900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003904  08003904  00013904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  2000000c  08003914  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  08003914  000205a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012672  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029cb  00000000  00000000  000326e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  000350b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd2  00000000  00000000  00035fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a9a9  00000000  00000000  00036bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000144c6  00000000  00000000  0005155b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099637  00000000  00000000  00065a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003610  00000000  00000000  000ff058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00102668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080038b0 	.word	0x080038b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080038b0 	.word	0x080038b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fd05 	bl	8000c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f845 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f9f5 	bl	800061c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000232:	f000 f8ab 	bl	800038c <MX_I2C2_Init>
  MX_SPI2_Init();
 8000236:	f000 f8e9 	bl	800040c <MX_SPI2_Init>
  MX_TSC_Init();
 800023a:	f000 f925 	bl	8000488 <MX_TSC_Init>
  MX_USB_PCD_Init();
 800023e:	f000 f9c7 	bl	80005d0 <MX_USB_PCD_Init>
  MX_USART4_UART_Init();
 8000242:	f000 f995 	bl	8000570 <MX_USART4_UART_Init>
  MX_USART1_UART_Init();
 8000246:	f000 f963 	bl	8000510 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  HAL_UART_Receive_IT(&huart1, rx_data, 1);
  int j = 0;
 800024a:	2300      	movs	r3, #0
 800024c:	607b      	str	r3, [r7, #4]
  while (1)
  {
	 HAL_UART_Receive(&huart1, rx_data, 1, 10);
 800024e:	4915      	ldr	r1, [pc, #84]	; (80002a4 <main+0x84>)
 8000250:	4815      	ldr	r0, [pc, #84]	; (80002a8 <main+0x88>)
 8000252:	230a      	movs	r3, #10
 8000254:	2201      	movs	r2, #1
 8000256:	f002 fadd 	bl	8002814 <HAL_UART_Receive>
//	 strcpy((char*)rx_data, "Hello!\r\n");
	 if(rx_data[0] == '\n'){
 800025a:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <main+0x84>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b0a      	cmp	r3, #10
 8000260:	d105      	bne.n	800026e <main+0x4e>
		 transfer_cplt++;
 8000262:	4b12      	ldr	r3, [pc, #72]	; (80002ac <main+0x8c>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	1c5a      	adds	r2, r3, #1
 8000268:	4b10      	ldr	r3, [pc, #64]	; (80002ac <main+0x8c>)
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	e002      	b.n	8000274 <main+0x54>
	 }else{
		 transfer_cplt = 0;
 800026e:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <main+0x8c>)
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
	 }
	 if(transfer_cplt <= 2){
 8000274:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <main+0x8c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2b02      	cmp	r3, #2
 800027a:	dce8      	bgt.n	800024e <main+0x2e>
		 HAL_UART_Transmit(&huart4, rx_data, 1, 10);
 800027c:	4909      	ldr	r1, [pc, #36]	; (80002a4 <main+0x84>)
 800027e:	480c      	ldr	r0, [pc, #48]	; (80002b0 <main+0x90>)
 8000280:	230a      	movs	r3, #10
 8000282:	2201      	movs	r2, #1
 8000284:	f002 fa26 	bl	80026d4 <HAL_UART_Transmit>
		 if(j < 100){
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2b63      	cmp	r3, #99	; 0x63
 800028c:	dc07      	bgt.n	800029e <main+0x7e>
			 rx_buffee[j++] = rx_data[0];
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	1c5a      	adds	r2, r3, #1
 8000292:	607a      	str	r2, [r7, #4]
 8000294:	4a03      	ldr	r2, [pc, #12]	; (80002a4 <main+0x84>)
 8000296:	7811      	ldrb	r1, [r2, #0]
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <main+0x94>)
 800029a:	54d1      	strb	r1, [r2, r3]
 800029c:	e7d7      	b.n	800024e <main+0x2e>
		 }else{
			 j=0;
 800029e:	2300      	movs	r3, #0
 80002a0:	607b      	str	r3, [r7, #4]
	 HAL_UART_Receive(&huart1, rx_data, 1, 10);
 80002a2:	e7d4      	b.n	800024e <main+0x2e>
 80002a4:	20000528 	.word	0x20000528
 80002a8:	20000124 	.word	0x20000124
 80002ac:	20000598 	.word	0x20000598
 80002b0:	200001ac 	.word	0x200001ac
 80002b4:	20000534 	.word	0x20000534

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b099      	sub	sp, #100	; 0x64
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	242c      	movs	r4, #44	; 0x2c
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	0018      	movs	r0, r3
 80002c4:	2334      	movs	r3, #52	; 0x34
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f003 fac4 	bl	8003856 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ce:	231c      	movs	r3, #28
 80002d0:	18fb      	adds	r3, r7, r3
 80002d2:	0018      	movs	r0, r3
 80002d4:	2310      	movs	r3, #16
 80002d6:	001a      	movs	r2, r3
 80002d8:	2100      	movs	r1, #0
 80002da:	f003 fabc 	bl	8003856 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002de:	003b      	movs	r3, r7
 80002e0:	0018      	movs	r0, r3
 80002e2:	231c      	movs	r3, #28
 80002e4:	001a      	movs	r2, r3
 80002e6:	2100      	movs	r1, #0
 80002e8:	f003 fab5 	bl	8003856 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80002ec:	0021      	movs	r1, r4
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2222      	movs	r2, #34	; 0x22
 80002f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2201      	movs	r2, #1
 80002f8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2201      	movs	r2, #1
 80002fe:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2210      	movs	r2, #16
 8000304:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2202      	movs	r2, #2
 800030a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2280      	movs	r2, #128	; 0x80
 8000310:	0212      	lsls	r2, r2, #8
 8000312:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2280      	movs	r2, #128	; 0x80
 8000318:	0352      	lsls	r2, r2, #13
 800031a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2200      	movs	r2, #0
 8000320:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000322:	187b      	adds	r3, r7, r1
 8000324:	0018      	movs	r0, r3
 8000326:	f001 fa33 	bl	8001790 <HAL_RCC_OscConfig>
 800032a:	1e03      	subs	r3, r0, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800032e:	f000 f9f1 	bl	8000714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000332:	211c      	movs	r1, #28
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2207      	movs	r2, #7
 8000338:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033a:	187b      	adds	r3, r7, r1
 800033c:	2202      	movs	r2, #2
 800033e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000346:	187b      	adds	r3, r7, r1
 8000348:	2200      	movs	r2, #0
 800034a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800034c:	187b      	adds	r3, r7, r1
 800034e:	2101      	movs	r1, #1
 8000350:	0018      	movs	r0, r3
 8000352:	f001 fda3 	bl	8001e9c <HAL_RCC_ClockConfig>
 8000356:	1e03      	subs	r3, r0, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800035a:	f000 f9db 	bl	8000714 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 800035e:	003b      	movs	r3, r7
 8000360:	4a09      	ldr	r2, [pc, #36]	; (8000388 <SystemClock_Config+0xd0>)
 8000362:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000364:	003b      	movs	r3, r7
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800036a:	003b      	movs	r3, r7
 800036c:	2200      	movs	r2, #0
 800036e:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000370:	003b      	movs	r3, r7
 8000372:	0018      	movs	r0, r3
 8000374:	f001 fefe 	bl	8002174 <HAL_RCCEx_PeriphCLKConfig>
 8000378:	1e03      	subs	r3, r0, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800037c:	f000 f9ca 	bl	8000714 <Error_Handler>
  }
}
 8000380:	46c0      	nop			; (mov r8, r8)
 8000382:	46bd      	mov	sp, r7
 8000384:	b019      	add	sp, #100	; 0x64
 8000386:	bd90      	pop	{r4, r7, pc}
 8000388:	00020001 	.word	0x00020001

0800038c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000390:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <MX_I2C2_Init+0x74>)
 8000392:	4a1c      	ldr	r2, [pc, #112]	; (8000404 <MX_I2C2_Init+0x78>)
 8000394:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000396:	4b1a      	ldr	r3, [pc, #104]	; (8000400 <MX_I2C2_Init+0x74>)
 8000398:	4a1b      	ldr	r2, [pc, #108]	; (8000408 <MX_I2C2_Init+0x7c>)
 800039a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800039c:	4b18      	ldr	r3, [pc, #96]	; (8000400 <MX_I2C2_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003a2:	4b17      	ldr	r3, [pc, #92]	; (8000400 <MX_I2C2_Init+0x74>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a8:	4b15      	ldr	r3, [pc, #84]	; (8000400 <MX_I2C2_Init+0x74>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80003ae:	4b14      	ldr	r3, [pc, #80]	; (8000400 <MX_I2C2_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <MX_I2C2_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <MX_I2C2_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_I2C2_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_I2C2_Init+0x74>)
 80003c8:	0018      	movs	r0, r3
 80003ca:	f000 ff89 	bl	80012e0 <HAL_I2C_Init>
 80003ce:	1e03      	subs	r3, r0, #0
 80003d0:	d001      	beq.n	80003d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80003d2:	f000 f99f 	bl	8000714 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003d6:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <MX_I2C2_Init+0x74>)
 80003d8:	2100      	movs	r1, #0
 80003da:	0018      	movs	r0, r3
 80003dc:	f001 f816 	bl	800140c <HAL_I2CEx_ConfigAnalogFilter>
 80003e0:	1e03      	subs	r3, r0, #0
 80003e2:	d001      	beq.n	80003e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80003e4:	f000 f996 	bl	8000714 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <MX_I2C2_Init+0x74>)
 80003ea:	2100      	movs	r1, #0
 80003ec:	0018      	movs	r0, r3
 80003ee:	f001 f859 	bl	80014a4 <HAL_I2CEx_ConfigDigitalFilter>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003f6:	f000 f98d 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000028 	.word	0x20000028
 8000404:	40005800 	.word	0x40005800
 8000408:	20303e5d 	.word	0x20303e5d

0800040c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000410:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <MX_SPI2_Init+0x74>)
 8000412:	4a1c      	ldr	r2, [pc, #112]	; (8000484 <MX_SPI2_Init+0x78>)
 8000414:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000416:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <MX_SPI2_Init+0x74>)
 8000418:	2282      	movs	r2, #130	; 0x82
 800041a:	0052      	lsls	r2, r2, #1
 800041c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800041e:	4b18      	ldr	r3, [pc, #96]	; (8000480 <MX_SPI2_Init+0x74>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000424:	4b16      	ldr	r3, [pc, #88]	; (8000480 <MX_SPI2_Init+0x74>)
 8000426:	22c0      	movs	r2, #192	; 0xc0
 8000428:	0092      	lsls	r2, r2, #2
 800042a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800042c:	4b14      	ldr	r3, [pc, #80]	; (8000480 <MX_SPI2_Init+0x74>)
 800042e:	2200      	movs	r2, #0
 8000430:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000432:	4b13      	ldr	r3, [pc, #76]	; (8000480 <MX_SPI2_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000438:	4b11      	ldr	r3, [pc, #68]	; (8000480 <MX_SPI2_Init+0x74>)
 800043a:	2280      	movs	r2, #128	; 0x80
 800043c:	0092      	lsls	r2, r2, #2
 800043e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000440:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <MX_SPI2_Init+0x74>)
 8000442:	2208      	movs	r2, #8
 8000444:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <MX_SPI2_Init+0x74>)
 8000448:	2200      	movs	r2, #0
 800044a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800044c:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <MX_SPI2_Init+0x74>)
 800044e:	2200      	movs	r2, #0
 8000450:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000452:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <MX_SPI2_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000458:	4b09      	ldr	r3, [pc, #36]	; (8000480 <MX_SPI2_Init+0x74>)
 800045a:	2207      	movs	r2, #7
 800045c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800045e:	4b08      	ldr	r3, [pc, #32]	; (8000480 <MX_SPI2_Init+0x74>)
 8000460:	2200      	movs	r2, #0
 8000462:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <MX_SPI2_Init+0x74>)
 8000466:	2208      	movs	r2, #8
 8000468:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800046a:	4b05      	ldr	r3, [pc, #20]	; (8000480 <MX_SPI2_Init+0x74>)
 800046c:	0018      	movs	r0, r3
 800046e:	f001 ff7f 	bl	8002370 <HAL_SPI_Init>
 8000472:	1e03      	subs	r3, r0, #0
 8000474:	d001      	beq.n	800047a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000476:	f000 f94d 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	2000007c 	.word	0x2000007c
 8000484:	40003800 	.word	0x40003800

08000488 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 800048c:	4b1e      	ldr	r3, [pc, #120]	; (8000508 <MX_TSC_Init+0x80>)
 800048e:	4a1f      	ldr	r2, [pc, #124]	; (800050c <MX_TSC_Init+0x84>)
 8000490:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 8000492:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <MX_TSC_Init+0x80>)
 8000494:	2280      	movs	r2, #128	; 0x80
 8000496:	0552      	lsls	r2, r2, #21
 8000498:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 800049a:	4b1b      	ldr	r3, [pc, #108]	; (8000508 <MX_TSC_Init+0x80>)
 800049c:	2280      	movs	r2, #128	; 0x80
 800049e:	0452      	lsls	r2, r2, #17
 80004a0:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 80004a2:	4b19      	ldr	r3, [pc, #100]	; (8000508 <MX_TSC_Init+0x80>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 80004a8:	4b17      	ldr	r3, [pc, #92]	; (8000508 <MX_TSC_Init+0x80>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 80004ae:	4b16      	ldr	r3, [pc, #88]	; (8000508 <MX_TSC_Init+0x80>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 80004b4:	4b14      	ldr	r3, [pc, #80]	; (8000508 <MX_TSC_Init+0x80>)
 80004b6:	2280      	movs	r2, #128	; 0x80
 80004b8:	0192      	lsls	r2, r2, #6
 80004ba:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 80004bc:	4b12      	ldr	r3, [pc, #72]	; (8000508 <MX_TSC_Init+0x80>)
 80004be:	22a0      	movs	r2, #160	; 0xa0
 80004c0:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 80004c2:	4b11      	ldr	r3, [pc, #68]	; (8000508 <MX_TSC_Init+0x80>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 80004c8:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <MX_TSC_Init+0x80>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <MX_TSC_Init+0x80>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <MX_TSC_Init+0x80>)
 80004d6:	222c      	movs	r2, #44	; 0x2c
 80004d8:	2100      	movs	r1, #0
 80004da:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 80004dc:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <MX_TSC_Init+0x80>)
 80004de:	2291      	movs	r2, #145	; 0x91
 80004e0:	0092      	lsls	r2, r2, #2
 80004e2:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <MX_TSC_Init+0x80>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 80004ea:	4b07      	ldr	r3, [pc, #28]	; (8000508 <MX_TSC_Init+0x80>)
 80004ec:	2291      	movs	r2, #145	; 0x91
 80004ee:	00d2      	lsls	r2, r2, #3
 80004f0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 80004f2:	4b05      	ldr	r3, [pc, #20]	; (8000508 <MX_TSC_Init+0x80>)
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 fff3 	bl	80024e0 <HAL_TSC_Init>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 80004fe:	f000 f909 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	200000e0 	.word	0x200000e0
 800050c:	40024000 	.word	0x40024000

08000510 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000514:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_USART1_UART_Init+0x58>)
 8000516:	4a15      	ldr	r2, [pc, #84]	; (800056c <MX_USART1_UART_Init+0x5c>)
 8000518:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800051a:	4b13      	ldr	r3, [pc, #76]	; (8000568 <MX_USART1_UART_Init+0x58>)
 800051c:	2296      	movs	r2, #150	; 0x96
 800051e:	0192      	lsls	r2, r2, #6
 8000520:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_USART1_UART_Init+0x58>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_USART1_UART_Init+0x58>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_USART1_UART_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_USART1_UART_Init+0x58>)
 8000536:	220c      	movs	r2, #12
 8000538:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <MX_USART1_UART_Init+0x58>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_USART1_UART_Init+0x58>)
 8000542:	2200      	movs	r2, #0
 8000544:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <MX_USART1_UART_Init+0x58>)
 8000548:	2200      	movs	r2, #0
 800054a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MX_USART1_UART_Init+0x58>)
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000552:	4b05      	ldr	r3, [pc, #20]	; (8000568 <MX_USART1_UART_Init+0x58>)
 8000554:	0018      	movs	r0, r3
 8000556:	f002 f869 	bl	800262c <HAL_UART_Init>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d001      	beq.n	8000562 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800055e:	f000 f8d9 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000124 	.word	0x20000124
 800056c:	40013800 	.word	0x40013800

08000570 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000574:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <MX_USART4_UART_Init+0x58>)
 8000576:	4a15      	ldr	r2, [pc, #84]	; (80005cc <MX_USART4_UART_Init+0x5c>)
 8000578:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800057a:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <MX_USART4_UART_Init+0x58>)
 800057c:	22e1      	movs	r2, #225	; 0xe1
 800057e:	0252      	lsls	r2, r2, #9
 8000580:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000582:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <MX_USART4_UART_Init+0x58>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <MX_USART4_UART_Init+0x58>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <MX_USART4_UART_Init+0x58>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <MX_USART4_UART_Init+0x58>)
 8000596:	220c      	movs	r2, #12
 8000598:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059a:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <MX_USART4_UART_Init+0x58>)
 800059c:	2200      	movs	r2, #0
 800059e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a0:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <MX_USART4_UART_Init+0x58>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <MX_USART4_UART_Init+0x58>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <MX_USART4_UART_Init+0x58>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <MX_USART4_UART_Init+0x58>)
 80005b4:	0018      	movs	r0, r3
 80005b6:	f002 f839 	bl	800262c <HAL_UART_Init>
 80005ba:	1e03      	subs	r3, r0, #0
 80005bc:	d001      	beq.n	80005c2 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80005be:	f000 f8a9 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200001ac 	.word	0x200001ac
 80005cc:	40004c00 	.word	0x40004c00

080005d0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <MX_USB_PCD_Init+0x44>)
 80005d6:	4a10      	ldr	r2, [pc, #64]	; (8000618 <MX_USB_PCD_Init+0x48>)
 80005d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <MX_USB_PCD_Init+0x44>)
 80005dc:	2208      	movs	r2, #8
 80005de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_USB_PCD_Init+0x44>)
 80005e2:	2202      	movs	r2, #2
 80005e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <MX_USB_PCD_Init+0x44>)
 80005e8:	2202      	movs	r2, #2
 80005ea:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80005ec:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_USB_PCD_Init+0x44>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <MX_USB_PCD_Init+0x44>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MX_USB_PCD_Init+0x44>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80005fe:	4b05      	ldr	r3, [pc, #20]	; (8000614 <MX_USB_PCD_Init+0x44>)
 8000600:	0018      	movs	r0, r3
 8000602:	f000 ff9b 	bl	800153c <HAL_PCD_Init>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d001      	beq.n	800060e <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 800060a:	f000 f883 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000234 	.word	0x20000234
 8000618:	40005c00 	.word	0x40005c00

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b089      	sub	sp, #36	; 0x24
 8000620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	240c      	movs	r4, #12
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2314      	movs	r3, #20
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f003 f912 	bl	8003856 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b35      	ldr	r3, [pc, #212]	; (8000708 <MX_GPIO_Init+0xec>)
 8000634:	695a      	ldr	r2, [r3, #20]
 8000636:	4b34      	ldr	r3, [pc, #208]	; (8000708 <MX_GPIO_Init+0xec>)
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	0309      	lsls	r1, r1, #12
 800063c:	430a      	orrs	r2, r1
 800063e:	615a      	str	r2, [r3, #20]
 8000640:	4b31      	ldr	r3, [pc, #196]	; (8000708 <MX_GPIO_Init+0xec>)
 8000642:	695a      	ldr	r2, [r3, #20]
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	031b      	lsls	r3, r3, #12
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b2e      	ldr	r3, [pc, #184]	; (8000708 <MX_GPIO_Init+0xec>)
 8000650:	695a      	ldr	r2, [r3, #20]
 8000652:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <MX_GPIO_Init+0xec>)
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	0289      	lsls	r1, r1, #10
 8000658:	430a      	orrs	r2, r1
 800065a:	615a      	str	r2, [r3, #20]
 800065c:	4b2a      	ldr	r3, [pc, #168]	; (8000708 <MX_GPIO_Init+0xec>)
 800065e:	695a      	ldr	r2, [r3, #20]
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	029b      	lsls	r3, r3, #10
 8000664:	4013      	ands	r3, r2
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066a:	4b27      	ldr	r3, [pc, #156]	; (8000708 <MX_GPIO_Init+0xec>)
 800066c:	695a      	ldr	r2, [r3, #20]
 800066e:	4b26      	ldr	r3, [pc, #152]	; (8000708 <MX_GPIO_Init+0xec>)
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	02c9      	lsls	r1, r1, #11
 8000674:	430a      	orrs	r2, r1
 8000676:	615a      	str	r2, [r3, #20]
 8000678:	4b23      	ldr	r3, [pc, #140]	; (8000708 <MX_GPIO_Init+0xec>)
 800067a:	695a      	ldr	r2, [r3, #20]
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	02db      	lsls	r3, r3, #11
 8000680:	4013      	ands	r3, r2
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 8000686:	4921      	ldr	r1, [pc, #132]	; (800070c <MX_GPIO_Init+0xf0>)
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <MX_GPIO_Init+0xf4>)
 800068a:	2200      	movs	r2, #0
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fe09 	bl	80012a4 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
                           LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 8000692:	193b      	adds	r3, r7, r4
 8000694:	4a1d      	ldr	r2, [pc, #116]	; (800070c <MX_GPIO_Init+0xf0>)
 8000696:	601a      	str	r2, [r3, #0]
                          |LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2201      	movs	r2, #1
 800069c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	4a18      	ldr	r2, [pc, #96]	; (8000710 <MX_GPIO_Init+0xf4>)
 80006ae:	0019      	movs	r1, r3
 80006b0:	0010      	movs	r0, r2
 80006b2:	f000 fc7f 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 80006b6:	0021      	movs	r1, r4
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2206      	movs	r2, #6
 80006bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2290      	movs	r2, #144	; 0x90
 80006c2:	0352      	lsls	r2, r2, #13
 80006c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006cc:	000c      	movs	r4, r1
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	4a0f      	ldr	r2, [pc, #60]	; (8000710 <MX_GPIO_Init+0xf4>)
 80006d2:	0019      	movs	r1, r3
 80006d4:	0010      	movs	r0, r2
 80006d6:	f000 fc6d 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006da:	0021      	movs	r1, r4
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2201      	movs	r2, #1
 80006e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2290      	movs	r2, #144	; 0x90
 80006e6:	0352      	lsls	r2, r2, #13
 80006e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006f0:	187a      	adds	r2, r7, r1
 80006f2:	2390      	movs	r3, #144	; 0x90
 80006f4:	05db      	lsls	r3, r3, #23
 80006f6:	0011      	movs	r1, r2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f000 fc5b 	bl	8000fb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b009      	add	sp, #36	; 0x24
 8000704:	bd90      	pop	{r4, r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	40021000 	.word	0x40021000
 800070c:	000003e1 	.word	0x000003e1
 8000710:	48000800 	.word	0x48000800

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	e7fe      	b.n	800071c <Error_Handler+0x8>
	...

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <HAL_MspInit+0x44>)
 8000728:	699a      	ldr	r2, [r3, #24]
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <HAL_MspInit+0x44>)
 800072c:	2101      	movs	r1, #1
 800072e:	430a      	orrs	r2, r1
 8000730:	619a      	str	r2, [r3, #24]
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <HAL_MspInit+0x44>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	2201      	movs	r2, #1
 8000738:	4013      	ands	r3, r2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_MspInit+0x44>)
 8000740:	69da      	ldr	r2, [r3, #28]
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <HAL_MspInit+0x44>)
 8000744:	2180      	movs	r1, #128	; 0x80
 8000746:	0549      	lsls	r1, r1, #21
 8000748:	430a      	orrs	r2, r1
 800074a:	61da      	str	r2, [r3, #28]
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <HAL_MspInit+0x44>)
 800074e:	69da      	ldr	r2, [r3, #28]
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	055b      	lsls	r3, r3, #21
 8000754:	4013      	ands	r3, r2
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b002      	add	sp, #8
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	40021000 	.word	0x40021000

08000768 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b08b      	sub	sp, #44	; 0x2c
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	2414      	movs	r4, #20
 8000772:	193b      	adds	r3, r7, r4
 8000774:	0018      	movs	r0, r3
 8000776:	2314      	movs	r3, #20
 8000778:	001a      	movs	r2, r3
 800077a:	2100      	movs	r1, #0
 800077c:	f003 f86b 	bl	8003856 <memset>
  if(hi2c->Instance==I2C2)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <HAL_I2C_MspInit+0x90>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d132      	bne.n	80007f0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <HAL_I2C_MspInit+0x94>)
 800078c:	695a      	ldr	r2, [r3, #20]
 800078e:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <HAL_I2C_MspInit+0x94>)
 8000790:	2180      	movs	r1, #128	; 0x80
 8000792:	02c9      	lsls	r1, r1, #11
 8000794:	430a      	orrs	r2, r1
 8000796:	615a      	str	r2, [r3, #20]
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <HAL_I2C_MspInit+0x94>)
 800079a:	695a      	ldr	r2, [r3, #20]
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	02db      	lsls	r3, r3, #11
 80007a0:	4013      	ands	r3, r2
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	22c0      	movs	r2, #192	; 0xc0
 80007aa:	0112      	lsls	r2, r2, #4
 80007ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ae:	0021      	movs	r1, r4
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2212      	movs	r2, #18
 80007b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2201      	movs	r2, #1
 80007ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2203      	movs	r2, #3
 80007c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2201      	movs	r2, #1
 80007c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	4a0d      	ldr	r2, [pc, #52]	; (8000800 <HAL_I2C_MspInit+0x98>)
 80007cc:	0019      	movs	r1, r3
 80007ce:	0010      	movs	r0, r2
 80007d0:	f000 fbf0 	bl	8000fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_I2C_MspInit+0x94>)
 80007d6:	69da      	ldr	r2, [r3, #28]
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <HAL_I2C_MspInit+0x94>)
 80007da:	2180      	movs	r1, #128	; 0x80
 80007dc:	03c9      	lsls	r1, r1, #15
 80007de:	430a      	orrs	r2, r1
 80007e0:	61da      	str	r2, [r3, #28]
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_I2C_MspInit+0x94>)
 80007e4:	69da      	ldr	r2, [r3, #28]
 80007e6:	2380      	movs	r3, #128	; 0x80
 80007e8:	03db      	lsls	r3, r3, #15
 80007ea:	4013      	ands	r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b00b      	add	sp, #44	; 0x2c
 80007f6:	bd90      	pop	{r4, r7, pc}
 80007f8:	40005800 	.word	0x40005800
 80007fc:	40021000 	.word	0x40021000
 8000800:	48000400 	.word	0x48000400

08000804 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b08b      	sub	sp, #44	; 0x2c
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	2414      	movs	r4, #20
 800080e:	193b      	adds	r3, r7, r4
 8000810:	0018      	movs	r0, r3
 8000812:	2314      	movs	r3, #20
 8000814:	001a      	movs	r2, r3
 8000816:	2100      	movs	r1, #0
 8000818:	f003 f81d 	bl	8003856 <memset>
  if(hspi->Instance==SPI2)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <HAL_SPI_MspInit+0x90>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d132      	bne.n	800088c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000826:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <HAL_SPI_MspInit+0x94>)
 8000828:	69da      	ldr	r2, [r3, #28]
 800082a:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <HAL_SPI_MspInit+0x94>)
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	01c9      	lsls	r1, r1, #7
 8000830:	430a      	orrs	r2, r1
 8000832:	61da      	str	r2, [r3, #28]
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <HAL_SPI_MspInit+0x94>)
 8000836:	69da      	ldr	r2, [r3, #28]
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	01db      	lsls	r3, r3, #7
 800083c:	4013      	ands	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_SPI_MspInit+0x94>)
 8000844:	695a      	ldr	r2, [r3, #20]
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <HAL_SPI_MspInit+0x94>)
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	02c9      	lsls	r1, r1, #11
 800084c:	430a      	orrs	r2, r1
 800084e:	615a      	str	r2, [r3, #20]
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <HAL_SPI_MspInit+0x94>)
 8000852:	695a      	ldr	r2, [r3, #20]
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	02db      	lsls	r3, r3, #11
 8000858:	4013      	ands	r3, r2
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 800085e:	193b      	adds	r3, r7, r4
 8000860:	22e0      	movs	r2, #224	; 0xe0
 8000862:	0212      	lsls	r2, r2, #8
 8000864:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	0021      	movs	r1, r4
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2202      	movs	r2, #2
 800086c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2203      	movs	r2, #3
 8000878:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	187b      	adds	r3, r7, r1
 8000882:	4a06      	ldr	r2, [pc, #24]	; (800089c <HAL_SPI_MspInit+0x98>)
 8000884:	0019      	movs	r1, r3
 8000886:	0010      	movs	r0, r2
 8000888:	f000 fb94 	bl	8000fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b00b      	add	sp, #44	; 0x2c
 8000892:	bd90      	pop	{r4, r7, pc}
 8000894:	40003800 	.word	0x40003800
 8000898:	40021000 	.word	0x40021000
 800089c:	48000400 	.word	0x48000400

080008a0 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b08b      	sub	sp, #44	; 0x2c
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	2414      	movs	r4, #20
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	0018      	movs	r0, r3
 80008ae:	2314      	movs	r3, #20
 80008b0:	001a      	movs	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	f002 ffcf 	bl	8003856 <memset>
  if(htsc->Instance==TSC)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a44      	ldr	r2, [pc, #272]	; (80009d0 <HAL_TSC_MspInit+0x130>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d000      	beq.n	80008c4 <HAL_TSC_MspInit+0x24>
 80008c2:	e080      	b.n	80009c6 <HAL_TSC_MspInit+0x126>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 80008c4:	4b43      	ldr	r3, [pc, #268]	; (80009d4 <HAL_TSC_MspInit+0x134>)
 80008c6:	695a      	ldr	r2, [r3, #20]
 80008c8:	4b42      	ldr	r3, [pc, #264]	; (80009d4 <HAL_TSC_MspInit+0x134>)
 80008ca:	2180      	movs	r1, #128	; 0x80
 80008cc:	0449      	lsls	r1, r1, #17
 80008ce:	430a      	orrs	r2, r1
 80008d0:	615a      	str	r2, [r3, #20]
 80008d2:	4b40      	ldr	r3, [pc, #256]	; (80009d4 <HAL_TSC_MspInit+0x134>)
 80008d4:	695a      	ldr	r2, [r3, #20]
 80008d6:	2380      	movs	r3, #128	; 0x80
 80008d8:	045b      	lsls	r3, r3, #17
 80008da:	4013      	ands	r3, r2
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b3c      	ldr	r3, [pc, #240]	; (80009d4 <HAL_TSC_MspInit+0x134>)
 80008e2:	695a      	ldr	r2, [r3, #20]
 80008e4:	4b3b      	ldr	r3, [pc, #236]	; (80009d4 <HAL_TSC_MspInit+0x134>)
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	0289      	lsls	r1, r1, #10
 80008ea:	430a      	orrs	r2, r1
 80008ec:	615a      	str	r2, [r3, #20]
 80008ee:	4b39      	ldr	r3, [pc, #228]	; (80009d4 <HAL_TSC_MspInit+0x134>)
 80008f0:	695a      	ldr	r2, [r3, #20]
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	029b      	lsls	r3, r3, #10
 80008f6:	4013      	ands	r3, r2
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fc:	4b35      	ldr	r3, [pc, #212]	; (80009d4 <HAL_TSC_MspInit+0x134>)
 80008fe:	695a      	ldr	r2, [r3, #20]
 8000900:	4b34      	ldr	r3, [pc, #208]	; (80009d4 <HAL_TSC_MspInit+0x134>)
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	02c9      	lsls	r1, r1, #11
 8000906:	430a      	orrs	r2, r1
 8000908:	615a      	str	r2, [r3, #20]
 800090a:	4b32      	ldr	r3, [pc, #200]	; (80009d4 <HAL_TSC_MspInit+0x134>)
 800090c:	695a      	ldr	r2, [r3, #20]
 800090e:	2380      	movs	r3, #128	; 0x80
 8000910:	02db      	lsls	r3, r3, #11
 8000912:	4013      	ands	r3, r2
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000918:	193b      	adds	r3, r7, r4
 800091a:	2244      	movs	r2, #68	; 0x44
 800091c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	193b      	adds	r3, r7, r4
 8000920:	2202      	movs	r2, #2
 8000922:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	193b      	adds	r3, r7, r4
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	193b      	adds	r3, r7, r4
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000930:	193b      	adds	r3, r7, r4
 8000932:	2203      	movs	r2, #3
 8000934:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	193a      	adds	r2, r7, r4
 8000938:	2390      	movs	r3, #144	; 0x90
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	0011      	movs	r1, r2
 800093e:	0018      	movs	r0, r3
 8000940:	f000 fb38 	bl	8000fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2288      	movs	r2, #136	; 0x88
 8000948:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2212      	movs	r2, #18
 800094e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	193b      	adds	r3, r7, r4
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	193b      	adds	r3, r7, r4
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 800095c:	193b      	adds	r3, r7, r4
 800095e:	2203      	movs	r2, #3
 8000960:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	193a      	adds	r2, r7, r4
 8000964:	2390      	movs	r3, #144	; 0x90
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	0011      	movs	r1, r2
 800096a:	0018      	movs	r0, r3
 800096c:	f000 fb22 	bl	8000fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000970:	193b      	adds	r3, r7, r4
 8000972:	2201      	movs	r2, #1
 8000974:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	193b      	adds	r3, r7, r4
 8000978:	2202      	movs	r2, #2
 800097a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	193b      	adds	r3, r7, r4
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	193b      	adds	r3, r7, r4
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000988:	193b      	adds	r3, r7, r4
 800098a:	2203      	movs	r2, #3
 800098c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	193b      	adds	r3, r7, r4
 8000990:	4a11      	ldr	r2, [pc, #68]	; (80009d8 <HAL_TSC_MspInit+0x138>)
 8000992:	0019      	movs	r1, r3
 8000994:	0010      	movs	r0, r2
 8000996:	f000 fb0d 	bl	8000fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800099a:	0021      	movs	r1, r4
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2202      	movs	r2, #2
 80009a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2212      	movs	r2, #18
 80009a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2203      	movs	r2, #3
 80009b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	4a06      	ldr	r2, [pc, #24]	; (80009d8 <HAL_TSC_MspInit+0x138>)
 80009be:	0019      	movs	r1, r3
 80009c0:	0010      	movs	r0, r2
 80009c2:	f000 faf7 	bl	8000fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b00b      	add	sp, #44	; 0x2c
 80009cc:	bd90      	pop	{r4, r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	40024000 	.word	0x40024000
 80009d4:	40021000 	.word	0x40021000
 80009d8:	48000400 	.word	0x48000400

080009dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b08d      	sub	sp, #52	; 0x34
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	241c      	movs	r4, #28
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	0018      	movs	r0, r3
 80009ea:	2314      	movs	r3, #20
 80009ec:	001a      	movs	r2, r3
 80009ee:	2100      	movs	r1, #0
 80009f0:	f002 ff31 	bl	8003856 <memset>
  if(huart->Instance==USART1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a50      	ldr	r2, [pc, #320]	; (8000b3c <HAL_UART_MspInit+0x160>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d134      	bne.n	8000a68 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009fe:	4b50      	ldr	r3, [pc, #320]	; (8000b40 <HAL_UART_MspInit+0x164>)
 8000a00:	699a      	ldr	r2, [r3, #24]
 8000a02:	4b4f      	ldr	r3, [pc, #316]	; (8000b40 <HAL_UART_MspInit+0x164>)
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	01c9      	lsls	r1, r1, #7
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	619a      	str	r2, [r3, #24]
 8000a0c:	4b4c      	ldr	r3, [pc, #304]	; (8000b40 <HAL_UART_MspInit+0x164>)
 8000a0e:	699a      	ldr	r2, [r3, #24]
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	01db      	lsls	r3, r3, #7
 8000a14:	4013      	ands	r3, r2
 8000a16:	61bb      	str	r3, [r7, #24]
 8000a18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	4b49      	ldr	r3, [pc, #292]	; (8000b40 <HAL_UART_MspInit+0x164>)
 8000a1c:	695a      	ldr	r2, [r3, #20]
 8000a1e:	4b48      	ldr	r3, [pc, #288]	; (8000b40 <HAL_UART_MspInit+0x164>)
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	0289      	lsls	r1, r1, #10
 8000a24:	430a      	orrs	r2, r1
 8000a26:	615a      	str	r2, [r3, #20]
 8000a28:	4b45      	ldr	r3, [pc, #276]	; (8000b40 <HAL_UART_MspInit+0x164>)
 8000a2a:	695a      	ldr	r2, [r3, #20]
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	029b      	lsls	r3, r3, #10
 8000a30:	4013      	ands	r3, r2
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	22c0      	movs	r2, #192	; 0xc0
 8000a3a:	00d2      	lsls	r2, r2, #3
 8000a3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	0021      	movs	r1, r4
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2202      	movs	r2, #2
 8000a44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2203      	movs	r2, #3
 8000a50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2201      	movs	r2, #1
 8000a56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	187a      	adds	r2, r7, r1
 8000a5a:	2390      	movs	r3, #144	; 0x90
 8000a5c:	05db      	lsls	r3, r3, #23
 8000a5e:	0011      	movs	r1, r2
 8000a60:	0018      	movs	r0, r3
 8000a62:	f000 faa7 	bl	8000fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8000a66:	e064      	b.n	8000b32 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART4)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a35      	ldr	r2, [pc, #212]	; (8000b44 <HAL_UART_MspInit+0x168>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d15f      	bne.n	8000b32 <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART4_CLK_ENABLE();
 8000a72:	4b33      	ldr	r3, [pc, #204]	; (8000b40 <HAL_UART_MspInit+0x164>)
 8000a74:	69da      	ldr	r2, [r3, #28]
 8000a76:	4b32      	ldr	r3, [pc, #200]	; (8000b40 <HAL_UART_MspInit+0x164>)
 8000a78:	2180      	movs	r1, #128	; 0x80
 8000a7a:	0309      	lsls	r1, r1, #12
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	61da      	str	r2, [r3, #28]
 8000a80:	4b2f      	ldr	r3, [pc, #188]	; (8000b40 <HAL_UART_MspInit+0x164>)
 8000a82:	69da      	ldr	r2, [r3, #28]
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	031b      	lsls	r3, r3, #12
 8000a88:	4013      	ands	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <HAL_UART_MspInit+0x164>)
 8000a90:	695a      	ldr	r2, [r3, #20]
 8000a92:	4b2b      	ldr	r3, [pc, #172]	; (8000b40 <HAL_UART_MspInit+0x164>)
 8000a94:	2180      	movs	r1, #128	; 0x80
 8000a96:	0289      	lsls	r1, r1, #10
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	615a      	str	r2, [r3, #20]
 8000a9c:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <HAL_UART_MspInit+0x164>)
 8000a9e:	695a      	ldr	r2, [r3, #20]
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	029b      	lsls	r3, r3, #10
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <HAL_UART_MspInit+0x164>)
 8000aac:	695a      	ldr	r2, [r3, #20]
 8000aae:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <HAL_UART_MspInit+0x164>)
 8000ab0:	2180      	movs	r1, #128	; 0x80
 8000ab2:	0309      	lsls	r1, r1, #12
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	615a      	str	r2, [r3, #20]
 8000ab8:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <HAL_UART_MspInit+0x164>)
 8000aba:	695a      	ldr	r2, [r3, #20]
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	031b      	lsls	r3, r3, #12
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ac6:	241c      	movs	r4, #28
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2202      	movs	r2, #2
 8000acc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	193b      	adds	r3, r7, r4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	2203      	movs	r2, #3
 8000ade:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000ae0:	193b      	adds	r3, r7, r4
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	193a      	adds	r2, r7, r4
 8000ae8:	2390      	movs	r3, #144	; 0x90
 8000aea:	05db      	lsls	r3, r3, #23
 8000aec:	0011      	movs	r1, r2
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 fa60 	bl	8000fb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000af4:	0021      	movs	r1, r4
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2280      	movs	r2, #128	; 0x80
 8000afa:	00d2      	lsls	r2, r2, #3
 8000afc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2202      	movs	r2, #2
 8000b02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART4;
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <HAL_UART_MspInit+0x16c>)
 8000b1a:	0019      	movs	r1, r3
 8000b1c:	0010      	movs	r0, r2
 8000b1e:	f000 fa49 	bl	8000fb4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	201d      	movs	r0, #29
 8000b28:	f000 f994 	bl	8000e54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000b2c:	201d      	movs	r0, #29
 8000b2e:	f000 f9a6 	bl	8000e7e <HAL_NVIC_EnableIRQ>
}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b00d      	add	sp, #52	; 0x34
 8000b38:	bd90      	pop	{r4, r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	40013800 	.word	0x40013800
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40004c00 	.word	0x40004c00
 8000b48:	48000800 	.word	0x48000800

08000b4c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <HAL_PCD_MspInit+0x38>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d10d      	bne.n	8000b7a <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_PCD_MspInit+0x3c>)
 8000b60:	69da      	ldr	r2, [r3, #28]
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_PCD_MspInit+0x3c>)
 8000b64:	2180      	movs	r1, #128	; 0x80
 8000b66:	0409      	lsls	r1, r1, #16
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	61da      	str	r2, [r3, #28]
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_PCD_MspInit+0x3c>)
 8000b6e:	69da      	ldr	r2, [r3, #28]
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	041b      	lsls	r3, r3, #16
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b004      	add	sp, #16
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	40005c00 	.word	0x40005c00
 8000b88:	40021000 	.word	0x40021000

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <NMI_Handler+0x4>

08000b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <HardFault_Handler+0x4>

08000b98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 f888 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <USART3_4_IRQHandler+0x14>)
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f001 ff0e 	bl	80029e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	200001ac 	.word	0x200001ac

08000bd4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000be2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000be4:	f7ff fff6 	bl	8000bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bea:	490d      	ldr	r1, [pc, #52]	; (8000c20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <LoopForever+0xe>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c00:	4c0a      	ldr	r4, [pc, #40]	; (8000c2c <LoopForever+0x16>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c0e:	f002 fe2b 	bl	8003868 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c12:	f7ff fb05 	bl	8000220 <main>

08000c16 <LoopForever>:

LoopForever:
    b LoopForever
 8000c16:	e7fe      	b.n	8000c16 <LoopForever>
  ldr   r0, =_estack
 8000c18:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c24:	08003908 	.word	0x08003908
  ldr r2, =_sbss
 8000c28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c2c:	200005a0 	.word	0x200005a0

08000c30 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC1_COMP_IRQHandler>
	...

08000c34 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <HAL_Init+0x24>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_Init+0x24>)
 8000c3e:	2110      	movs	r1, #16
 8000c40:	430a      	orrs	r2, r1
 8000c42:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c44:	2000      	movs	r0, #0
 8000c46:	f000 f809 	bl	8000c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c4a:	f7ff fd69 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	0018      	movs	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	40022000 	.word	0x40022000

08000c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <HAL_InitTick+0x5c>)
 8000c66:	681c      	ldr	r4, [r3, #0]
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <HAL_InitTick+0x60>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	23fa      	movs	r3, #250	; 0xfa
 8000c70:	0098      	lsls	r0, r3, #2
 8000c72:	f7ff fa49 	bl	8000108 <__udivsi3>
 8000c76:	0003      	movs	r3, r0
 8000c78:	0019      	movs	r1, r3
 8000c7a:	0020      	movs	r0, r4
 8000c7c:	f7ff fa44 	bl	8000108 <__udivsi3>
 8000c80:	0003      	movs	r3, r0
 8000c82:	0018      	movs	r0, r3
 8000c84:	f000 f90b 	bl	8000e9e <HAL_SYSTICK_Config>
 8000c88:	1e03      	subs	r3, r0, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e00f      	b.n	8000cb0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d80b      	bhi.n	8000cae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	2301      	movs	r3, #1
 8000c9a:	425b      	negs	r3, r3
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f000 f8d8 	bl	8000e54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_InitTick+0x64>)
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e000      	b.n	8000cb0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b003      	add	sp, #12
 8000cb6:	bd90      	pop	{r4, r7, pc}
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <HAL_IncTick+0x1c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	001a      	movs	r2, r3
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	18d2      	adds	r2, r2, r3
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cd6:	601a      	str	r2, [r3, #0]
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	2000059c 	.word	0x2000059c

08000ce8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b02      	ldr	r3, [pc, #8]	; (8000cf8 <HAL_GetTick+0x10>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	2000059c 	.word	0x2000059c

08000cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	0002      	movs	r2, r0
 8000d04:	1dfb      	adds	r3, r7, #7
 8000d06:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	1dfb      	adds	r3, r7, #7
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d0e:	d809      	bhi.n	8000d24 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	001a      	movs	r2, r3
 8000d16:	231f      	movs	r3, #31
 8000d18:	401a      	ands	r2, r3
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <__NVIC_EnableIRQ+0x30>)
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	4091      	lsls	r1, r2
 8000d20:	000a      	movs	r2, r1
 8000d22:	601a      	str	r2, [r3, #0]
  }
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	e000e100 	.word	0xe000e100

08000d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	0002      	movs	r2, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b7f      	cmp	r3, #127	; 0x7f
 8000d44:	d828      	bhi.n	8000d98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d46:	4a2f      	ldr	r2, [pc, #188]	; (8000e04 <__NVIC_SetPriority+0xd4>)
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	b25b      	sxtb	r3, r3
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	33c0      	adds	r3, #192	; 0xc0
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	589b      	ldr	r3, [r3, r2]
 8000d56:	1dfa      	adds	r2, r7, #7
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	0011      	movs	r1, r2
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	400a      	ands	r2, r1
 8000d60:	00d2      	lsls	r2, r2, #3
 8000d62:	21ff      	movs	r1, #255	; 0xff
 8000d64:	4091      	lsls	r1, r2
 8000d66:	000a      	movs	r2, r1
 8000d68:	43d2      	mvns	r2, r2
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	019b      	lsls	r3, r3, #6
 8000d72:	22ff      	movs	r2, #255	; 0xff
 8000d74:	401a      	ands	r2, r3
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	4003      	ands	r3, r0
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d84:	481f      	ldr	r0, [pc, #124]	; (8000e04 <__NVIC_SetPriority+0xd4>)
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	089b      	lsrs	r3, r3, #2
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	33c0      	adds	r3, #192	; 0xc0
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d96:	e031      	b.n	8000dfc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d98:	4a1b      	ldr	r2, [pc, #108]	; (8000e08 <__NVIC_SetPriority+0xd8>)
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	0019      	movs	r1, r3
 8000da0:	230f      	movs	r3, #15
 8000da2:	400b      	ands	r3, r1
 8000da4:	3b08      	subs	r3, #8
 8000da6:	089b      	lsrs	r3, r3, #2
 8000da8:	3306      	adds	r3, #6
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	18d3      	adds	r3, r2, r3
 8000dae:	3304      	adds	r3, #4
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	1dfa      	adds	r2, r7, #7
 8000db4:	7812      	ldrb	r2, [r2, #0]
 8000db6:	0011      	movs	r1, r2
 8000db8:	2203      	movs	r2, #3
 8000dba:	400a      	ands	r2, r1
 8000dbc:	00d2      	lsls	r2, r2, #3
 8000dbe:	21ff      	movs	r1, #255	; 0xff
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	000a      	movs	r2, r1
 8000dc4:	43d2      	mvns	r2, r2
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	019b      	lsls	r3, r3, #6
 8000dce:	22ff      	movs	r2, #255	; 0xff
 8000dd0:	401a      	ands	r2, r3
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	2303      	movs	r3, #3
 8000dda:	4003      	ands	r3, r0
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de0:	4809      	ldr	r0, [pc, #36]	; (8000e08 <__NVIC_SetPriority+0xd8>)
 8000de2:	1dfb      	adds	r3, r7, #7
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	001c      	movs	r4, r3
 8000de8:	230f      	movs	r3, #15
 8000dea:	4023      	ands	r3, r4
 8000dec:	3b08      	subs	r3, #8
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	430a      	orrs	r2, r1
 8000df2:	3306      	adds	r3, #6
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	18c3      	adds	r3, r0, r3
 8000df8:	3304      	adds	r3, #4
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b003      	add	sp, #12
 8000e02:	bd90      	pop	{r4, r7, pc}
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	1e5a      	subs	r2, r3, #1
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	045b      	lsls	r3, r3, #17
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d301      	bcc.n	8000e24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e20:	2301      	movs	r3, #1
 8000e22:	e010      	b.n	8000e46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <SysTick_Config+0x44>)
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	425b      	negs	r3, r3
 8000e30:	2103      	movs	r1, #3
 8000e32:	0018      	movs	r0, r3
 8000e34:	f7ff ff7c 	bl	8000d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <SysTick_Config+0x44>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <SysTick_Config+0x44>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	0018      	movs	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b002      	add	sp, #8
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	210f      	movs	r1, #15
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	1c02      	adds	r2, r0, #0
 8000e64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	0011      	movs	r1, r2
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff ff5d 	bl	8000d30 <__NVIC_SetPriority>
}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b004      	add	sp, #16
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	0002      	movs	r2, r0
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff ff33 	bl	8000cfc <__NVIC_EnableIRQ>
}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b002      	add	sp, #8
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f7ff ffaf 	bl	8000e0c <SysTick_Config>
 8000eae:	0003      	movs	r3, r0
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b002      	add	sp, #8
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2221      	movs	r2, #33	; 0x21
 8000ec4:	5c9b      	ldrb	r3, [r3, r2]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d008      	beq.n	8000ede <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2204      	movs	r2, #4
 8000ed0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2220      	movs	r2, #32
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e020      	b.n	8000f20 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	210e      	movs	r1, #14
 8000eea:	438a      	bics	r2, r1
 8000eec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2101      	movs	r1, #1
 8000efa:	438a      	bics	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f06:	2101      	movs	r1, #1
 8000f08:	4091      	lsls	r1, r2
 8000f0a:	000a      	movs	r2, r1
 8000f0c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2221      	movs	r2, #33	; 0x21
 8000f12:	2101      	movs	r1, #1
 8000f14:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2220      	movs	r2, #32
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	0018      	movs	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b002      	add	sp, #8
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f30:	210f      	movs	r1, #15
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2221      	movs	r2, #33	; 0x21
 8000f3c:	5c9b      	ldrb	r3, [r3, r2]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d006      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2204      	movs	r2, #4
 8000f48:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
 8000f50:	e028      	b.n	8000fa4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	210e      	movs	r1, #14
 8000f5e:	438a      	bics	r2, r1
 8000f60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	438a      	bics	r2, r1
 8000f70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	000a      	movs	r2, r1
 8000f80:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2221      	movs	r2, #33	; 0x21
 8000f86:	2101      	movs	r1, #1
 8000f88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	2100      	movs	r1, #0
 8000f90:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d004      	beq.n	8000fa4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	0010      	movs	r0, r2
 8000fa2:	4798      	blx	r3
    }
  }
  return status;
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	18fb      	adds	r3, r7, r3
 8000fa8:	781b      	ldrb	r3, [r3, #0]
}
 8000faa:	0018      	movs	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b004      	add	sp, #16
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc2:	e155      	b.n	8001270 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	4091      	lsls	r1, r2
 8000fce:	000a      	movs	r2, r1
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d100      	bne.n	8000fdc <HAL_GPIO_Init+0x28>
 8000fda:	e146      	b.n	800126a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d005      	beq.n	8000ff4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2203      	movs	r2, #3
 8000fee:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d130      	bne.n	8001056 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	409a      	lsls	r2, r3
 8001002:	0013      	movs	r3, r2
 8001004:	43da      	mvns	r2, r3
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	409a      	lsls	r2, r3
 8001016:	0013      	movs	r3, r2
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800102a:	2201      	movs	r2, #1
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
 8001030:	0013      	movs	r3, r2
 8001032:	43da      	mvns	r2, r3
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	2201      	movs	r2, #1
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
 8001048:	0013      	movs	r3, r2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2203      	movs	r2, #3
 800105c:	4013      	ands	r3, r2
 800105e:	2b03      	cmp	r3, #3
 8001060:	d017      	beq.n	8001092 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	43da      	mvns	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	409a      	lsls	r2, r3
 8001084:	0013      	movs	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2203      	movs	r2, #3
 8001098:	4013      	ands	r3, r2
 800109a:	2b02      	cmp	r3, #2
 800109c:	d123      	bne.n	80010e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	08da      	lsrs	r2, r3, #3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3208      	adds	r2, #8
 80010a6:	0092      	lsls	r2, r2, #2
 80010a8:	58d3      	ldr	r3, [r2, r3]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	2207      	movs	r2, #7
 80010b0:	4013      	ands	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	220f      	movs	r2, #15
 80010b6:	409a      	lsls	r2, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	43da      	mvns	r2, r3
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	691a      	ldr	r2, [r3, #16]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	2107      	movs	r1, #7
 80010ca:	400b      	ands	r3, r1
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	409a      	lsls	r2, r3
 80010d0:	0013      	movs	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	0092      	lsls	r2, r2, #2
 80010e2:	6939      	ldr	r1, [r7, #16]
 80010e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	409a      	lsls	r2, r3
 80010f4:	0013      	movs	r3, r2
 80010f6:	43da      	mvns	r2, r3
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2203      	movs	r2, #3
 8001104:	401a      	ands	r2, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	409a      	lsls	r2, r3
 800110c:	0013      	movs	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	23c0      	movs	r3, #192	; 0xc0
 8001120:	029b      	lsls	r3, r3, #10
 8001122:	4013      	ands	r3, r2
 8001124:	d100      	bne.n	8001128 <HAL_GPIO_Init+0x174>
 8001126:	e0a0      	b.n	800126a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001128:	4b57      	ldr	r3, [pc, #348]	; (8001288 <HAL_GPIO_Init+0x2d4>)
 800112a:	699a      	ldr	r2, [r3, #24]
 800112c:	4b56      	ldr	r3, [pc, #344]	; (8001288 <HAL_GPIO_Init+0x2d4>)
 800112e:	2101      	movs	r1, #1
 8001130:	430a      	orrs	r2, r1
 8001132:	619a      	str	r2, [r3, #24]
 8001134:	4b54      	ldr	r3, [pc, #336]	; (8001288 <HAL_GPIO_Init+0x2d4>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	2201      	movs	r2, #1
 800113a:	4013      	ands	r3, r2
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001140:	4a52      	ldr	r2, [pc, #328]	; (800128c <HAL_GPIO_Init+0x2d8>)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	3302      	adds	r3, #2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	589b      	ldr	r3, [r3, r2]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	2203      	movs	r2, #3
 8001152:	4013      	ands	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	409a      	lsls	r2, r3
 800115a:	0013      	movs	r3, r2
 800115c:	43da      	mvns	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	2390      	movs	r3, #144	; 0x90
 8001168:	05db      	lsls	r3, r3, #23
 800116a:	429a      	cmp	r2, r3
 800116c:	d019      	beq.n	80011a2 <HAL_GPIO_Init+0x1ee>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a47      	ldr	r2, [pc, #284]	; (8001290 <HAL_GPIO_Init+0x2dc>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d013      	beq.n	800119e <HAL_GPIO_Init+0x1ea>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a46      	ldr	r2, [pc, #280]	; (8001294 <HAL_GPIO_Init+0x2e0>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d00d      	beq.n	800119a <HAL_GPIO_Init+0x1e6>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a45      	ldr	r2, [pc, #276]	; (8001298 <HAL_GPIO_Init+0x2e4>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d007      	beq.n	8001196 <HAL_GPIO_Init+0x1e2>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a44      	ldr	r2, [pc, #272]	; (800129c <HAL_GPIO_Init+0x2e8>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d101      	bne.n	8001192 <HAL_GPIO_Init+0x1de>
 800118e:	2304      	movs	r3, #4
 8001190:	e008      	b.n	80011a4 <HAL_GPIO_Init+0x1f0>
 8001192:	2305      	movs	r3, #5
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x1f0>
 8001196:	2303      	movs	r3, #3
 8001198:	e004      	b.n	80011a4 <HAL_GPIO_Init+0x1f0>
 800119a:	2302      	movs	r3, #2
 800119c:	e002      	b.n	80011a4 <HAL_GPIO_Init+0x1f0>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <HAL_GPIO_Init+0x1f0>
 80011a2:	2300      	movs	r3, #0
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	2103      	movs	r1, #3
 80011a8:	400a      	ands	r2, r1
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	4093      	lsls	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011b4:	4935      	ldr	r1, [pc, #212]	; (800128c <HAL_GPIO_Init+0x2d8>)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3302      	adds	r3, #2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c2:	4b37      	ldr	r3, [pc, #220]	; (80012a0 <HAL_GPIO_Init+0x2ec>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	43da      	mvns	r2, r3
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	035b      	lsls	r3, r3, #13
 80011da:	4013      	ands	r3, r2
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011e6:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <HAL_GPIO_Init+0x2ec>)
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011ec:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <HAL_GPIO_Init+0x2ec>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	43da      	mvns	r2, r3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	039b      	lsls	r3, r3, #14
 8001204:	4013      	ands	r3, r2
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001210:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <HAL_GPIO_Init+0x2ec>)
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001216:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <HAL_GPIO_Init+0x2ec>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43da      	mvns	r2, r3
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	029b      	lsls	r3, r3, #10
 800122e:	4013      	ands	r3, r2
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800123a:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <HAL_GPIO_Init+0x2ec>)
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <HAL_GPIO_Init+0x2ec>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	43da      	mvns	r2, r3
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	025b      	lsls	r3, r3, #9
 8001258:	4013      	ands	r3, r2
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_GPIO_Init+0x2ec>)
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3301      	adds	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	40da      	lsrs	r2, r3
 8001278:	1e13      	subs	r3, r2, #0
 800127a:	d000      	beq.n	800127e <HAL_GPIO_Init+0x2ca>
 800127c:	e6a2      	b.n	8000fc4 <HAL_GPIO_Init+0x10>
  } 
}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	46c0      	nop			; (mov r8, r8)
 8001282:	46bd      	mov	sp, r7
 8001284:	b006      	add	sp, #24
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40021000 	.word	0x40021000
 800128c:	40010000 	.word	0x40010000
 8001290:	48000400 	.word	0x48000400
 8001294:	48000800 	.word	0x48000800
 8001298:	48000c00 	.word	0x48000c00
 800129c:	48001000 	.word	0x48001000
 80012a0:	40010400 	.word	0x40010400

080012a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	0008      	movs	r0, r1
 80012ae:	0011      	movs	r1, r2
 80012b0:	1cbb      	adds	r3, r7, #2
 80012b2:	1c02      	adds	r2, r0, #0
 80012b4:	801a      	strh	r2, [r3, #0]
 80012b6:	1c7b      	adds	r3, r7, #1
 80012b8:	1c0a      	adds	r2, r1, #0
 80012ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012bc:	1c7b      	adds	r3, r7, #1
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d004      	beq.n	80012ce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012c4:	1cbb      	adds	r3, r7, #2
 80012c6:	881a      	ldrh	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012cc:	e003      	b.n	80012d6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ce:	1cbb      	adds	r3, r7, #2
 80012d0:	881a      	ldrh	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	b002      	add	sp, #8
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e082      	b.n	80013f8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2241      	movs	r2, #65	; 0x41
 80012f6:	5c9b      	ldrb	r3, [r3, r2]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d107      	bne.n	800130e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2240      	movs	r2, #64	; 0x40
 8001302:	2100      	movs	r1, #0
 8001304:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	0018      	movs	r0, r3
 800130a:	f7ff fa2d 	bl	8000768 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2241      	movs	r2, #65	; 0x41
 8001312:	2124      	movs	r1, #36	; 0x24
 8001314:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2101      	movs	r1, #1
 8001322:	438a      	bics	r2, r1
 8001324:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4934      	ldr	r1, [pc, #208]	; (8001400 <HAL_I2C_Init+0x120>)
 8001330:	400a      	ands	r2, r1
 8001332:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4931      	ldr	r1, [pc, #196]	; (8001404 <HAL_I2C_Init+0x124>)
 8001340:	400a      	ands	r2, r1
 8001342:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d108      	bne.n	800135e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	0209      	lsls	r1, r1, #8
 8001358:	430a      	orrs	r2, r1
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	e007      	b.n	800136e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2184      	movs	r1, #132	; 0x84
 8001368:	0209      	lsls	r1, r1, #8
 800136a:	430a      	orrs	r2, r1
 800136c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d104      	bne.n	8001380 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2280      	movs	r2, #128	; 0x80
 800137c:	0112      	lsls	r2, r2, #4
 800137e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	491f      	ldr	r1, [pc, #124]	; (8001408 <HAL_I2C_Init+0x128>)
 800138c:	430a      	orrs	r2, r1
 800138e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68da      	ldr	r2, [r3, #12]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	491a      	ldr	r1, [pc, #104]	; (8001404 <HAL_I2C_Init+0x124>)
 800139c:	400a      	ands	r2, r1
 800139e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691a      	ldr	r2, [r3, #16]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	431a      	orrs	r2, r3
 80013aa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69d9      	ldr	r1, [r3, #28]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1a      	ldr	r2, [r3, #32]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2101      	movs	r1, #1
 80013d6:	430a      	orrs	r2, r1
 80013d8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2241      	movs	r2, #65	; 0x41
 80013e4:	2120      	movs	r1, #32
 80013e6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2242      	movs	r2, #66	; 0x42
 80013f2:	2100      	movs	r1, #0
 80013f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	0018      	movs	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b002      	add	sp, #8
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	f0ffffff 	.word	0xf0ffffff
 8001404:	ffff7fff 	.word	0xffff7fff
 8001408:	02008000 	.word	0x02008000

0800140c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2241      	movs	r2, #65	; 0x41
 800141a:	5c9b      	ldrb	r3, [r3, r2]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b20      	cmp	r3, #32
 8001420:	d138      	bne.n	8001494 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2240      	movs	r2, #64	; 0x40
 8001426:	5c9b      	ldrb	r3, [r3, r2]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d101      	bne.n	8001430 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800142c:	2302      	movs	r3, #2
 800142e:	e032      	b.n	8001496 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2240      	movs	r2, #64	; 0x40
 8001434:	2101      	movs	r1, #1
 8001436:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2241      	movs	r2, #65	; 0x41
 800143c:	2124      	movs	r1, #36	; 0x24
 800143e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2101      	movs	r1, #1
 800144c:	438a      	bics	r2, r1
 800144e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4911      	ldr	r1, [pc, #68]	; (80014a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800145c:	400a      	ands	r2, r1
 800145e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6819      	ldr	r1, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2101      	movs	r1, #1
 800147c:	430a      	orrs	r2, r1
 800147e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2241      	movs	r2, #65	; 0x41
 8001484:	2120      	movs	r1, #32
 8001486:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2240      	movs	r2, #64	; 0x40
 800148c:	2100      	movs	r1, #0
 800148e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001490:	2300      	movs	r3, #0
 8001492:	e000      	b.n	8001496 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001494:	2302      	movs	r3, #2
  }
}
 8001496:	0018      	movs	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	b002      	add	sp, #8
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	ffffefff 	.word	0xffffefff

080014a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2241      	movs	r2, #65	; 0x41
 80014b2:	5c9b      	ldrb	r3, [r3, r2]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b20      	cmp	r3, #32
 80014b8:	d139      	bne.n	800152e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2240      	movs	r2, #64	; 0x40
 80014be:	5c9b      	ldrb	r3, [r3, r2]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e033      	b.n	8001530 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2240      	movs	r2, #64	; 0x40
 80014cc:	2101      	movs	r1, #1
 80014ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2241      	movs	r2, #65	; 0x41
 80014d4:	2124      	movs	r1, #36	; 0x24
 80014d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2101      	movs	r1, #1
 80014e4:	438a      	bics	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4a11      	ldr	r2, [pc, #68]	; (8001538 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	4313      	orrs	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2101      	movs	r1, #1
 8001516:	430a      	orrs	r2, r1
 8001518:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2241      	movs	r2, #65	; 0x41
 800151e:	2120      	movs	r1, #32
 8001520:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2240      	movs	r2, #64	; 0x40
 8001526:	2100      	movs	r1, #0
 8001528:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	e000      	b.n	8001530 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800152e:	2302      	movs	r3, #2
  }
}
 8001530:	0018      	movs	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	b004      	add	sp, #16
 8001536:	bd80      	pop	{r7, pc}
 8001538:	fffff0ff 	.word	0xfffff0ff

0800153c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800153c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153e:	b08b      	sub	sp, #44	; 0x2c
 8001540:	af06      	add	r7, sp, #24
 8001542:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e0f0      	b.n	8001730 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a79      	ldr	r2, [pc, #484]	; (8001738 <HAL_PCD_Init+0x1fc>)
 8001552:	5c9b      	ldrb	r3, [r3, r2]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d108      	bne.n	800156c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	23aa      	movs	r3, #170	; 0xaa
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	2100      	movs	r1, #0
 8001562:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	0018      	movs	r0, r3
 8001568:	f7ff faf0 	bl	8000b4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a72      	ldr	r2, [pc, #456]	; (8001738 <HAL_PCD_Init+0x1fc>)
 8001570:	2103      	movs	r1, #3
 8001572:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	0018      	movs	r0, r3
 800157a:	f002 f92b 	bl	80037d4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800157e:	230f      	movs	r3, #15
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
 8001586:	e049      	b.n	800161c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001588:	200f      	movs	r0, #15
 800158a:	183b      	adds	r3, r7, r0
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	0013      	movs	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	189b      	adds	r3, r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	18cb      	adds	r3, r1, r3
 800159c:	3301      	adds	r3, #1
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015a2:	183b      	adds	r3, r7, r0
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	0013      	movs	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	189b      	adds	r3, r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	183a      	adds	r2, r7, r0
 80015b4:	7812      	ldrb	r2, [r2, #0]
 80015b6:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015b8:	183b      	adds	r3, r7, r0
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	0013      	movs	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	189b      	adds	r3, r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	18cb      	adds	r3, r1, r3
 80015ca:	3303      	adds	r3, #3
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015d0:	183b      	adds	r3, r7, r0
 80015d2:	781a      	ldrb	r2, [r3, #0]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	0013      	movs	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	189b      	adds	r3, r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	18cb      	adds	r3, r1, r3
 80015e0:	3338      	adds	r3, #56	; 0x38
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015e6:	183b      	adds	r3, r7, r0
 80015e8:	781a      	ldrb	r2, [r3, #0]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	0013      	movs	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	189b      	adds	r3, r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	18cb      	adds	r3, r1, r3
 80015f6:	333c      	adds	r3, #60	; 0x3c
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015fc:	183b      	adds	r3, r7, r0
 80015fe:	781a      	ldrb	r2, [r3, #0]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	0013      	movs	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	189b      	adds	r3, r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	18cb      	adds	r3, r1, r3
 800160c:	3340      	adds	r3, #64	; 0x40
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001612:	183b      	adds	r3, r7, r0
 8001614:	781a      	ldrb	r2, [r3, #0]
 8001616:	183b      	adds	r3, r7, r0
 8001618:	3201      	adds	r2, #1
 800161a:	701a      	strb	r2, [r3, #0]
 800161c:	210f      	movs	r1, #15
 800161e:	187b      	adds	r3, r7, r1
 8001620:	781a      	ldrb	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	429a      	cmp	r2, r3
 8001628:	d3ae      	bcc.n	8001588 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800162a:	187b      	adds	r3, r7, r1
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
 8001630:	e056      	b.n	80016e0 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001632:	240f      	movs	r4, #15
 8001634:	193b      	adds	r3, r7, r4
 8001636:	781a      	ldrb	r2, [r3, #0]
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	236a      	movs	r3, #106	; 0x6a
 800163c:	33ff      	adds	r3, #255	; 0xff
 800163e:	0019      	movs	r1, r3
 8001640:	0013      	movs	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	189b      	adds	r3, r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	18c3      	adds	r3, r0, r3
 800164a:	185b      	adds	r3, r3, r1
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001650:	193b      	adds	r3, r7, r4
 8001652:	781a      	ldrb	r2, [r3, #0]
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	23b4      	movs	r3, #180	; 0xb4
 8001658:	0059      	lsls	r1, r3, #1
 800165a:	0013      	movs	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	189b      	adds	r3, r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	18c3      	adds	r3, r0, r3
 8001664:	185b      	adds	r3, r3, r1
 8001666:	193a      	adds	r2, r7, r4
 8001668:	7812      	ldrb	r2, [r2, #0]
 800166a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800166c:	193b      	adds	r3, r7, r4
 800166e:	781a      	ldrb	r2, [r3, #0]
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	236c      	movs	r3, #108	; 0x6c
 8001674:	33ff      	adds	r3, #255	; 0xff
 8001676:	0019      	movs	r1, r3
 8001678:	0013      	movs	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	189b      	adds	r3, r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	18c3      	adds	r3, r0, r3
 8001682:	185b      	adds	r3, r3, r1
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001688:	193b      	adds	r3, r7, r4
 800168a:	781a      	ldrb	r2, [r3, #0]
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	23bc      	movs	r3, #188	; 0xbc
 8001690:	0059      	lsls	r1, r3, #1
 8001692:	0013      	movs	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	189b      	adds	r3, r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	18c3      	adds	r3, r0, r3
 800169c:	185b      	adds	r3, r3, r1
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016a2:	193b      	adds	r3, r7, r4
 80016a4:	781a      	ldrb	r2, [r3, #0]
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	23be      	movs	r3, #190	; 0xbe
 80016aa:	0059      	lsls	r1, r3, #1
 80016ac:	0013      	movs	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	189b      	adds	r3, r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	18c3      	adds	r3, r0, r3
 80016b6:	185b      	adds	r3, r3, r1
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016bc:	193b      	adds	r3, r7, r4
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	23c0      	movs	r3, #192	; 0xc0
 80016c4:	0059      	lsls	r1, r3, #1
 80016c6:	0013      	movs	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	189b      	adds	r3, r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	18c3      	adds	r3, r0, r3
 80016d0:	185b      	adds	r3, r3, r1
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d6:	193b      	adds	r3, r7, r4
 80016d8:	781a      	ldrb	r2, [r3, #0]
 80016da:	193b      	adds	r3, r7, r4
 80016dc:	3201      	adds	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	230f      	movs	r3, #15
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	781a      	ldrb	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d3a1      	bcc.n	8001632 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	466a      	mov	r2, sp
 80016f6:	0011      	movs	r1, r2
 80016f8:	001a      	movs	r2, r3
 80016fa:	3210      	adds	r2, #16
 80016fc:	ca70      	ldmia	r2!, {r4, r5, r6}
 80016fe:	c170      	stmia	r1!, {r4, r5, r6}
 8001700:	ca30      	ldmia	r2!, {r4, r5}
 8001702:	c130      	stmia	r1!, {r4, r5}
 8001704:	6859      	ldr	r1, [r3, #4]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	f002 f87d 	bl	8003808 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2224      	movs	r2, #36	; 0x24
 8001712:	2100      	movs	r1, #0
 8001714:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a07      	ldr	r2, [pc, #28]	; (8001738 <HAL_PCD_Init+0x1fc>)
 800171a:	2101      	movs	r1, #1
 800171c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d103      	bne.n	800172e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	0018      	movs	r0, r3
 800172a:	f000 f807 	bl	800173c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	0018      	movs	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	b005      	add	sp, #20
 8001736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001738:	000002a9 	.word	0x000002a9

0800173c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	23ba      	movs	r3, #186	; 0xba
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	2101      	movs	r1, #1
 8001752:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	23b8      	movs	r3, #184	; 0xb8
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	2100      	movs	r1, #0
 800175c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2254      	movs	r2, #84	; 0x54
 8001762:	5a9b      	ldrh	r3, [r3, r2]
 8001764:	b29b      	uxth	r3, r3
 8001766:	2201      	movs	r2, #1
 8001768:	4313      	orrs	r3, r2
 800176a:	b299      	uxth	r1, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2254      	movs	r2, #84	; 0x54
 8001770:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2254      	movs	r2, #84	; 0x54
 8001776:	5a9b      	ldrh	r3, [r3, r2]
 8001778:	b29b      	uxth	r3, r3
 800177a:	2202      	movs	r2, #2
 800177c:	4313      	orrs	r3, r2
 800177e:	b299      	uxth	r1, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2254      	movs	r2, #84	; 0x54
 8001784:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	0018      	movs	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	b004      	add	sp, #16
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	f000 fb76 	bl	8001e90 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2201      	movs	r2, #1
 80017aa:	4013      	ands	r3, r2
 80017ac:	d100      	bne.n	80017b0 <HAL_RCC_OscConfig+0x20>
 80017ae:	e08e      	b.n	80018ce <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017b0:	4bc5      	ldr	r3, [pc, #788]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	220c      	movs	r2, #12
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d00e      	beq.n	80017da <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017bc:	4bc2      	ldr	r3, [pc, #776]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	220c      	movs	r2, #12
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d117      	bne.n	80017f8 <HAL_RCC_OscConfig+0x68>
 80017c8:	4bbf      	ldr	r3, [pc, #764]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	23c0      	movs	r3, #192	; 0xc0
 80017ce:	025b      	lsls	r3, r3, #9
 80017d0:	401a      	ands	r2, r3
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	025b      	lsls	r3, r3, #9
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d10e      	bne.n	80017f8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017da:	4bbb      	ldr	r3, [pc, #748]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	029b      	lsls	r3, r3, #10
 80017e2:	4013      	ands	r3, r2
 80017e4:	d100      	bne.n	80017e8 <HAL_RCC_OscConfig+0x58>
 80017e6:	e071      	b.n	80018cc <HAL_RCC_OscConfig+0x13c>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d000      	beq.n	80017f2 <HAL_RCC_OscConfig+0x62>
 80017f0:	e06c      	b.n	80018cc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	f000 fb4c 	bl	8001e90 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d107      	bne.n	8001810 <HAL_RCC_OscConfig+0x80>
 8001800:	4bb1      	ldr	r3, [pc, #708]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4bb0      	ldr	r3, [pc, #704]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 8001806:	2180      	movs	r1, #128	; 0x80
 8001808:	0249      	lsls	r1, r1, #9
 800180a:	430a      	orrs	r2, r1
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	e02f      	b.n	8001870 <HAL_RCC_OscConfig+0xe0>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10c      	bne.n	8001832 <HAL_RCC_OscConfig+0xa2>
 8001818:	4bab      	ldr	r3, [pc, #684]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4baa      	ldr	r3, [pc, #680]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 800181e:	49ab      	ldr	r1, [pc, #684]	; (8001acc <HAL_RCC_OscConfig+0x33c>)
 8001820:	400a      	ands	r2, r1
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	4ba8      	ldr	r3, [pc, #672]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4ba7      	ldr	r3, [pc, #668]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 800182a:	49a9      	ldr	r1, [pc, #676]	; (8001ad0 <HAL_RCC_OscConfig+0x340>)
 800182c:	400a      	ands	r2, r1
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	e01e      	b.n	8001870 <HAL_RCC_OscConfig+0xe0>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b05      	cmp	r3, #5
 8001838:	d10e      	bne.n	8001858 <HAL_RCC_OscConfig+0xc8>
 800183a:	4ba3      	ldr	r3, [pc, #652]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4ba2      	ldr	r3, [pc, #648]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 8001840:	2180      	movs	r1, #128	; 0x80
 8001842:	02c9      	lsls	r1, r1, #11
 8001844:	430a      	orrs	r2, r1
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	4b9f      	ldr	r3, [pc, #636]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b9e      	ldr	r3, [pc, #632]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 800184e:	2180      	movs	r1, #128	; 0x80
 8001850:	0249      	lsls	r1, r1, #9
 8001852:	430a      	orrs	r2, r1
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0xe0>
 8001858:	4b9b      	ldr	r3, [pc, #620]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b9a      	ldr	r3, [pc, #616]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 800185e:	499b      	ldr	r1, [pc, #620]	; (8001acc <HAL_RCC_OscConfig+0x33c>)
 8001860:	400a      	ands	r2, r1
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	4b98      	ldr	r3, [pc, #608]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b97      	ldr	r3, [pc, #604]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 800186a:	4999      	ldr	r1, [pc, #612]	; (8001ad0 <HAL_RCC_OscConfig+0x340>)
 800186c:	400a      	ands	r2, r1
 800186e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d014      	beq.n	80018a2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7ff fa36 	bl	8000ce8 <HAL_GetTick>
 800187c:	0003      	movs	r3, r0
 800187e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001882:	f7ff fa31 	bl	8000ce8 <HAL_GetTick>
 8001886:	0002      	movs	r2, r0
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b64      	cmp	r3, #100	; 0x64
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e2fd      	b.n	8001e90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001894:	4b8c      	ldr	r3, [pc, #560]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	029b      	lsls	r3, r3, #10
 800189c:	4013      	ands	r3, r2
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0xf2>
 80018a0:	e015      	b.n	80018ce <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff fa21 	bl	8000ce8 <HAL_GetTick>
 80018a6:	0003      	movs	r3, r0
 80018a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ac:	f7ff fa1c 	bl	8000ce8 <HAL_GetTick>
 80018b0:	0002      	movs	r2, r0
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b64      	cmp	r3, #100	; 0x64
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e2e8      	b.n	8001e90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018be:	4b82      	ldr	r3, [pc, #520]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	029b      	lsls	r3, r3, #10
 80018c6:	4013      	ands	r3, r2
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x11c>
 80018ca:	e000      	b.n	80018ce <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2202      	movs	r2, #2
 80018d4:	4013      	ands	r3, r2
 80018d6:	d100      	bne.n	80018da <HAL_RCC_OscConfig+0x14a>
 80018d8:	e06c      	b.n	80019b4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018da:	4b7b      	ldr	r3, [pc, #492]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	220c      	movs	r2, #12
 80018e0:	4013      	ands	r3, r2
 80018e2:	d00e      	beq.n	8001902 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80018e4:	4b78      	ldr	r3, [pc, #480]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	220c      	movs	r2, #12
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d11f      	bne.n	8001930 <HAL_RCC_OscConfig+0x1a0>
 80018f0:	4b75      	ldr	r3, [pc, #468]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	23c0      	movs	r3, #192	; 0xc0
 80018f6:	025b      	lsls	r3, r3, #9
 80018f8:	401a      	ands	r2, r3
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	429a      	cmp	r2, r3
 8001900:	d116      	bne.n	8001930 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001902:	4b71      	ldr	r3, [pc, #452]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2202      	movs	r2, #2
 8001908:	4013      	ands	r3, r2
 800190a:	d005      	beq.n	8001918 <HAL_RCC_OscConfig+0x188>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d001      	beq.n	8001918 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e2bb      	b.n	8001e90 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001918:	4b6b      	ldr	r3, [pc, #428]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	22f8      	movs	r2, #248	; 0xf8
 800191e:	4393      	bics	r3, r2
 8001920:	0019      	movs	r1, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00da      	lsls	r2, r3, #3
 8001928:	4b67      	ldr	r3, [pc, #412]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 800192a:	430a      	orrs	r2, r1
 800192c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192e:	e041      	b.n	80019b4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d024      	beq.n	8001982 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001938:	4b63      	ldr	r3, [pc, #396]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b62      	ldr	r3, [pc, #392]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 800193e:	2101      	movs	r1, #1
 8001940:	430a      	orrs	r2, r1
 8001942:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff f9d0 	bl	8000ce8 <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800194e:	f7ff f9cb 	bl	8000ce8 <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e297      	b.n	8001e90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001960:	4b59      	ldr	r3, [pc, #356]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2202      	movs	r2, #2
 8001966:	4013      	ands	r3, r2
 8001968:	d0f1      	beq.n	800194e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196a:	4b57      	ldr	r3, [pc, #348]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	22f8      	movs	r2, #248	; 0xf8
 8001970:	4393      	bics	r3, r2
 8001972:	0019      	movs	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	00da      	lsls	r2, r3, #3
 800197a:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 800197c:	430a      	orrs	r2, r1
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	e018      	b.n	80019b4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001982:	4b51      	ldr	r3, [pc, #324]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	4b50      	ldr	r3, [pc, #320]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 8001988:	2101      	movs	r1, #1
 800198a:	438a      	bics	r2, r1
 800198c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198e:	f7ff f9ab 	bl	8000ce8 <HAL_GetTick>
 8001992:	0003      	movs	r3, r0
 8001994:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001998:	f7ff f9a6 	bl	8000ce8 <HAL_GetTick>
 800199c:	0002      	movs	r2, r0
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e272      	b.n	8001e90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019aa:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2202      	movs	r2, #2
 80019b0:	4013      	ands	r3, r2
 80019b2:	d1f1      	bne.n	8001998 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2208      	movs	r2, #8
 80019ba:	4013      	ands	r3, r2
 80019bc:	d036      	beq.n	8001a2c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d019      	beq.n	80019fa <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c6:	4b40      	ldr	r3, [pc, #256]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 80019c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ca:	4b3f      	ldr	r3, [pc, #252]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 80019cc:	2101      	movs	r1, #1
 80019ce:	430a      	orrs	r2, r1
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d2:	f7ff f989 	bl	8000ce8 <HAL_GetTick>
 80019d6:	0003      	movs	r3, r0
 80019d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019dc:	f7ff f984 	bl	8000ce8 <HAL_GetTick>
 80019e0:	0002      	movs	r2, r0
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e250      	b.n	8001e90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ee:	4b36      	ldr	r3, [pc, #216]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	2202      	movs	r2, #2
 80019f4:	4013      	ands	r3, r2
 80019f6:	d0f1      	beq.n	80019dc <HAL_RCC_OscConfig+0x24c>
 80019f8:	e018      	b.n	8001a2c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fa:	4b33      	ldr	r3, [pc, #204]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 80019fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019fe:	4b32      	ldr	r3, [pc, #200]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 8001a00:	2101      	movs	r1, #1
 8001a02:	438a      	bics	r2, r1
 8001a04:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a06:	f7ff f96f 	bl	8000ce8 <HAL_GetTick>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a10:	f7ff f96a 	bl	8000ce8 <HAL_GetTick>
 8001a14:	0002      	movs	r2, r0
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e236      	b.n	8001e90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a22:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	2202      	movs	r2, #2
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d1f1      	bne.n	8001a10 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2204      	movs	r2, #4
 8001a32:	4013      	ands	r3, r2
 8001a34:	d100      	bne.n	8001a38 <HAL_RCC_OscConfig+0x2a8>
 8001a36:	e0b5      	b.n	8001ba4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a38:	201f      	movs	r0, #31
 8001a3a:	183b      	adds	r3, r7, r0
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a40:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 8001a42:	69da      	ldr	r2, [r3, #28]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	055b      	lsls	r3, r3, #21
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d110      	bne.n	8001a6e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 8001a4e:	69da      	ldr	r2, [r3, #28]
 8001a50:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 8001a52:	2180      	movs	r1, #128	; 0x80
 8001a54:	0549      	lsls	r1, r1, #21
 8001a56:	430a      	orrs	r2, r1
 8001a58:	61da      	str	r2, [r3, #28]
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 8001a5c:	69da      	ldr	r2, [r3, #28]
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	055b      	lsls	r3, r3, #21
 8001a62:	4013      	ands	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a68:	183b      	adds	r3, r7, r0
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_RCC_OscConfig+0x344>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4013      	ands	r3, r2
 8001a78:	d11a      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <HAL_RCC_OscConfig+0x344>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <HAL_RCC_OscConfig+0x344>)
 8001a80:	2180      	movs	r1, #128	; 0x80
 8001a82:	0049      	lsls	r1, r1, #1
 8001a84:	430a      	orrs	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a88:	f7ff f92e 	bl	8000ce8 <HAL_GetTick>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a92:	f7ff f929 	bl	8000ce8 <HAL_GetTick>
 8001a96:	0002      	movs	r2, r0
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b64      	cmp	r3, #100	; 0x64
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e1f5      	b.n	8001e90 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_RCC_OscConfig+0x344>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4013      	ands	r3, r2
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d10f      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x348>
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 8001aba:	6a1a      	ldr	r2, [r3, #32]
 8001abc:	4b02      	ldr	r3, [pc, #8]	; (8001ac8 <HAL_RCC_OscConfig+0x338>)
 8001abe:	2101      	movs	r1, #1
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	621a      	str	r2, [r3, #32]
 8001ac4:	e036      	b.n	8001b34 <HAL_RCC_OscConfig+0x3a4>
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	fffeffff 	.word	0xfffeffff
 8001ad0:	fffbffff 	.word	0xfffbffff
 8001ad4:	40007000 	.word	0x40007000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10c      	bne.n	8001afa <HAL_RCC_OscConfig+0x36a>
 8001ae0:	4bca      	ldr	r3, [pc, #808]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001ae2:	6a1a      	ldr	r2, [r3, #32]
 8001ae4:	4bc9      	ldr	r3, [pc, #804]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	438a      	bics	r2, r1
 8001aea:	621a      	str	r2, [r3, #32]
 8001aec:	4bc7      	ldr	r3, [pc, #796]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001aee:	6a1a      	ldr	r2, [r3, #32]
 8001af0:	4bc6      	ldr	r3, [pc, #792]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001af2:	2104      	movs	r1, #4
 8001af4:	438a      	bics	r2, r1
 8001af6:	621a      	str	r2, [r3, #32]
 8001af8:	e01c      	b.n	8001b34 <HAL_RCC_OscConfig+0x3a4>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b05      	cmp	r3, #5
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x38c>
 8001b02:	4bc2      	ldr	r3, [pc, #776]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001b04:	6a1a      	ldr	r2, [r3, #32]
 8001b06:	4bc1      	ldr	r3, [pc, #772]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001b08:	2104      	movs	r1, #4
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	621a      	str	r2, [r3, #32]
 8001b0e:	4bbf      	ldr	r3, [pc, #764]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001b10:	6a1a      	ldr	r2, [r3, #32]
 8001b12:	4bbe      	ldr	r3, [pc, #760]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001b14:	2101      	movs	r1, #1
 8001b16:	430a      	orrs	r2, r1
 8001b18:	621a      	str	r2, [r3, #32]
 8001b1a:	e00b      	b.n	8001b34 <HAL_RCC_OscConfig+0x3a4>
 8001b1c:	4bbb      	ldr	r3, [pc, #748]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001b1e:	6a1a      	ldr	r2, [r3, #32]
 8001b20:	4bba      	ldr	r3, [pc, #744]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001b22:	2101      	movs	r1, #1
 8001b24:	438a      	bics	r2, r1
 8001b26:	621a      	str	r2, [r3, #32]
 8001b28:	4bb8      	ldr	r3, [pc, #736]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001b2a:	6a1a      	ldr	r2, [r3, #32]
 8001b2c:	4bb7      	ldr	r3, [pc, #732]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001b2e:	2104      	movs	r1, #4
 8001b30:	438a      	bics	r2, r1
 8001b32:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d014      	beq.n	8001b66 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3c:	f7ff f8d4 	bl	8000ce8 <HAL_GetTick>
 8001b40:	0003      	movs	r3, r0
 8001b42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b44:	e009      	b.n	8001b5a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b46:	f7ff f8cf 	bl	8000ce8 <HAL_GetTick>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	4aaf      	ldr	r2, [pc, #700]	; (8001e10 <HAL_RCC_OscConfig+0x680>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e19a      	b.n	8001e90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5a:	4bac      	ldr	r3, [pc, #688]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	4013      	ands	r3, r2
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x3b6>
 8001b64:	e013      	b.n	8001b8e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b66:	f7ff f8bf 	bl	8000ce8 <HAL_GetTick>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6e:	e009      	b.n	8001b84 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b70:	f7ff f8ba 	bl	8000ce8 <HAL_GetTick>
 8001b74:	0002      	movs	r2, r0
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	4aa5      	ldr	r2, [pc, #660]	; (8001e10 <HAL_RCC_OscConfig+0x680>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e185      	b.n	8001e90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b84:	4ba1      	ldr	r3, [pc, #644]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	2202      	movs	r2, #2
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b8e:	231f      	movs	r3, #31
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b98:	4b9c      	ldr	r3, [pc, #624]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001b9a:	69da      	ldr	r2, [r3, #28]
 8001b9c:	4b9b      	ldr	r3, [pc, #620]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001b9e:	499d      	ldr	r1, [pc, #628]	; (8001e14 <HAL_RCC_OscConfig+0x684>)
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2210      	movs	r2, #16
 8001baa:	4013      	ands	r3, r2
 8001bac:	d063      	beq.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d12a      	bne.n	8001c0c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bb6:	4b95      	ldr	r3, [pc, #596]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bba:	4b94      	ldr	r3, [pc, #592]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001bbc:	2104      	movs	r1, #4
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001bc2:	4b92      	ldr	r3, [pc, #584]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc6:	4b91      	ldr	r3, [pc, #580]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001bc8:	2101      	movs	r1, #1
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bce:	f7ff f88b 	bl	8000ce8 <HAL_GetTick>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bd8:	f7ff f886 	bl	8000ce8 <HAL_GetTick>
 8001bdc:	0002      	movs	r2, r0
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e152      	b.n	8001e90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001bea:	4b88      	ldr	r3, [pc, #544]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bee:	2202      	movs	r2, #2
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d0f1      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001bf4:	4b85      	ldr	r3, [pc, #532]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf8:	22f8      	movs	r2, #248	; 0xf8
 8001bfa:	4393      	bics	r3, r2
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	00da      	lsls	r2, r3, #3
 8001c04:	4b81      	ldr	r3, [pc, #516]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001c06:	430a      	orrs	r2, r1
 8001c08:	635a      	str	r2, [r3, #52]	; 0x34
 8001c0a:	e034      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	3305      	adds	r3, #5
 8001c12:	d111      	bne.n	8001c38 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001c14:	4b7d      	ldr	r3, [pc, #500]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c18:	4b7c      	ldr	r3, [pc, #496]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	438a      	bics	r2, r1
 8001c1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c20:	4b7a      	ldr	r3, [pc, #488]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c24:	22f8      	movs	r2, #248	; 0xf8
 8001c26:	4393      	bics	r3, r2
 8001c28:	0019      	movs	r1, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	00da      	lsls	r2, r3, #3
 8001c30:	4b76      	ldr	r3, [pc, #472]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001c32:	430a      	orrs	r2, r1
 8001c34:	635a      	str	r2, [r3, #52]	; 0x34
 8001c36:	e01e      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c38:	4b74      	ldr	r3, [pc, #464]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c3c:	4b73      	ldr	r3, [pc, #460]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001c3e:	2104      	movs	r1, #4
 8001c40:	430a      	orrs	r2, r1
 8001c42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001c44:	4b71      	ldr	r3, [pc, #452]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c48:	4b70      	ldr	r3, [pc, #448]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	438a      	bics	r2, r1
 8001c4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c50:	f7ff f84a 	bl	8000ce8 <HAL_GetTick>
 8001c54:	0003      	movs	r3, r0
 8001c56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c5a:	f7ff f845 	bl	8000ce8 <HAL_GetTick>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e111      	b.n	8001e90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c6c:	4b67      	ldr	r3, [pc, #412]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c70:	2202      	movs	r2, #2
 8001c72:	4013      	ands	r3, r2
 8001c74:	d1f1      	bne.n	8001c5a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d05c      	beq.n	8001d3a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c80:	4b62      	ldr	r3, [pc, #392]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	220c      	movs	r2, #12
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b0c      	cmp	r3, #12
 8001c8a:	d00e      	beq.n	8001caa <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001c8c:	4b5f      	ldr	r3, [pc, #380]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	220c      	movs	r2, #12
 8001c92:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d114      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001c98:	4b5c      	ldr	r3, [pc, #368]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	23c0      	movs	r3, #192	; 0xc0
 8001c9e:	025b      	lsls	r3, r3, #9
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	23c0      	movs	r3, #192	; 0xc0
 8001ca4:	025b      	lsls	r3, r3, #9
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d10b      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001caa:	4b58      	ldr	r3, [pc, #352]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	029b      	lsls	r3, r3, #10
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d040      	beq.n	8001d38 <HAL_RCC_OscConfig+0x5a8>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d03c      	beq.n	8001d38 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e0e6      	b.n	8001e90 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d01b      	beq.n	8001d02 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001cca:	4b50      	ldr	r3, [pc, #320]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cce:	4b4f      	ldr	r3, [pc, #316]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001cd0:	2180      	movs	r1, #128	; 0x80
 8001cd2:	0249      	lsls	r1, r1, #9
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7ff f806 	bl	8000ce8 <HAL_GetTick>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ce2:	f7ff f801 	bl	8000ce8 <HAL_GetTick>
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e0cd      	b.n	8001e90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001cf4:	4b45      	ldr	r3, [pc, #276]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	029b      	lsls	r3, r3, #10
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x552>
 8001d00:	e01b      	b.n	8001d3a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001d02:	4b42      	ldr	r3, [pc, #264]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d06:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001d08:	4943      	ldr	r1, [pc, #268]	; (8001e18 <HAL_RCC_OscConfig+0x688>)
 8001d0a:	400a      	ands	r2, r1
 8001d0c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7fe ffeb 	bl	8000ce8 <HAL_GetTick>
 8001d12:	0003      	movs	r3, r0
 8001d14:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d18:	f7fe ffe6 	bl	8000ce8 <HAL_GetTick>
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e0b2      	b.n	8001e90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001d2a:	4b38      	ldr	r3, [pc, #224]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	029b      	lsls	r3, r3, #10
 8001d32:	4013      	ands	r3, r2
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x588>
 8001d36:	e000      	b.n	8001d3a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001d38:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d100      	bne.n	8001d44 <HAL_RCC_OscConfig+0x5b4>
 8001d42:	e0a4      	b.n	8001e8e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d44:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	220c      	movs	r2, #12
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d100      	bne.n	8001d52 <HAL_RCC_OscConfig+0x5c2>
 8001d50:	e078      	b.n	8001e44 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d14c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5a:	4b2c      	ldr	r3, [pc, #176]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001d60:	492e      	ldr	r1, [pc, #184]	; (8001e1c <HAL_RCC_OscConfig+0x68c>)
 8001d62:	400a      	ands	r2, r1
 8001d64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7fe ffbf 	bl	8000ce8 <HAL_GetTick>
 8001d6a:	0003      	movs	r3, r0
 8001d6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d70:	f7fe ffba 	bl	8000ce8 <HAL_GetTick>
 8001d74:	0002      	movs	r2, r0
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e086      	b.n	8001e90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d82:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	049b      	lsls	r3, r3, #18
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	220f      	movs	r2, #15
 8001d94:	4393      	bics	r3, r2
 8001d96:	0019      	movs	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4a1e      	ldr	r2, [pc, #120]	; (8001e20 <HAL_RCC_OscConfig+0x690>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	0019      	movs	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db4:	431a      	orrs	r2, r3
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001dc2:	2180      	movs	r1, #128	; 0x80
 8001dc4:	0449      	lsls	r1, r1, #17
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dca:	f7fe ff8d 	bl	8000ce8 <HAL_GetTick>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7fe ff88 	bl	8000ce8 <HAL_GetTick>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e054      	b.n	8001e90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	049b      	lsls	r3, r3, #18
 8001dee:	4013      	ands	r3, r2
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x644>
 8001df2:	e04c      	b.n	8001e8e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <HAL_RCC_OscConfig+0x67c>)
 8001dfa:	4908      	ldr	r1, [pc, #32]	; (8001e1c <HAL_RCC_OscConfig+0x68c>)
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7fe ff72 	bl	8000ce8 <HAL_GetTick>
 8001e04:	0003      	movs	r3, r0
 8001e06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e08:	e015      	b.n	8001e36 <HAL_RCC_OscConfig+0x6a6>
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	00001388 	.word	0x00001388
 8001e14:	efffffff 	.word	0xefffffff
 8001e18:	fffeffff 	.word	0xfffeffff
 8001e1c:	feffffff 	.word	0xfeffffff
 8001e20:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e24:	f7fe ff60 	bl	8000ce8 <HAL_GetTick>
 8001e28:	0002      	movs	r2, r0
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e02c      	b.n	8001e90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e36:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <HAL_RCC_OscConfig+0x708>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	049b      	lsls	r3, r3, #18
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x694>
 8001e42:	e024      	b.n	8001e8e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e01f      	b.n	8001e90 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <HAL_RCC_OscConfig+0x708>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <HAL_RCC_OscConfig+0x708>)
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	23c0      	movs	r3, #192	; 0xc0
 8001e60:	025b      	lsls	r3, r3, #9
 8001e62:	401a      	ands	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d10e      	bne.n	8001e8a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	220f      	movs	r2, #15
 8001e70:	401a      	ands	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d107      	bne.n	8001e8a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	23f0      	movs	r3, #240	; 0xf0
 8001e7e:	039b      	lsls	r3, r3, #14
 8001e80:	401a      	ands	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d001      	beq.n	8001e8e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	0018      	movs	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b008      	add	sp, #32
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000

08001e9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0bf      	b.n	8002030 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b61      	ldr	r3, [pc, #388]	; (8002038 <HAL_RCC_ClockConfig+0x19c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d911      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b5e      	ldr	r3, [pc, #376]	; (8002038 <HAL_RCC_ClockConfig+0x19c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	4393      	bics	r3, r2
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	4b5b      	ldr	r3, [pc, #364]	; (8002038 <HAL_RCC_ClockConfig+0x19c>)
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed0:	4b59      	ldr	r3, [pc, #356]	; (8002038 <HAL_RCC_ClockConfig+0x19c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d001      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e0a6      	b.n	8002030 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d015      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d006      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ef6:	4b51      	ldr	r3, [pc, #324]	; (800203c <HAL_RCC_ClockConfig+0x1a0>)
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	4b50      	ldr	r3, [pc, #320]	; (800203c <HAL_RCC_ClockConfig+0x1a0>)
 8001efc:	21e0      	movs	r1, #224	; 0xe0
 8001efe:	00c9      	lsls	r1, r1, #3
 8001f00:	430a      	orrs	r2, r1
 8001f02:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f04:	4b4d      	ldr	r3, [pc, #308]	; (800203c <HAL_RCC_ClockConfig+0x1a0>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	22f0      	movs	r2, #240	; 0xf0
 8001f0a:	4393      	bics	r3, r2
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	4b4a      	ldr	r3, [pc, #296]	; (800203c <HAL_RCC_ClockConfig+0x1a0>)
 8001f14:	430a      	orrs	r2, r1
 8001f16:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d04c      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2a:	4b44      	ldr	r3, [pc, #272]	; (800203c <HAL_RCC_ClockConfig+0x1a0>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	029b      	lsls	r3, r3, #10
 8001f32:	4013      	ands	r3, r2
 8001f34:	d120      	bne.n	8001f78 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e07a      	b.n	8002030 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f42:	4b3e      	ldr	r3, [pc, #248]	; (800203c <HAL_RCC_ClockConfig+0x1a0>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	049b      	lsls	r3, r3, #18
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d114      	bne.n	8001f78 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e06e      	b.n	8002030 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f5a:	4b38      	ldr	r3, [pc, #224]	; (800203c <HAL_RCC_ClockConfig+0x1a0>)
 8001f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	029b      	lsls	r3, r3, #10
 8001f62:	4013      	ands	r3, r2
 8001f64:	d108      	bne.n	8001f78 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e062      	b.n	8002030 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6a:	4b34      	ldr	r3, [pc, #208]	; (800203c <HAL_RCC_ClockConfig+0x1a0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	4013      	ands	r3, r2
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e05b      	b.n	8002030 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f78:	4b30      	ldr	r3, [pc, #192]	; (800203c <HAL_RCC_ClockConfig+0x1a0>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	4393      	bics	r3, r2
 8001f80:	0019      	movs	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	4b2d      	ldr	r3, [pc, #180]	; (800203c <HAL_RCC_ClockConfig+0x1a0>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f8c:	f7fe feac 	bl	8000ce8 <HAL_GetTick>
 8001f90:	0003      	movs	r3, r0
 8001f92:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f94:	e009      	b.n	8001faa <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f96:	f7fe fea7 	bl	8000ce8 <HAL_GetTick>
 8001f9a:	0002      	movs	r2, r0
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	4a27      	ldr	r2, [pc, #156]	; (8002040 <HAL_RCC_ClockConfig+0x1a4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e042      	b.n	8002030 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <HAL_RCC_ClockConfig+0x1a0>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	220c      	movs	r2, #12
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d1ec      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <HAL_RCC_ClockConfig+0x19c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d211      	bcs.n	8001fee <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_RCC_ClockConfig+0x19c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	4393      	bics	r3, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	4b18      	ldr	r3, [pc, #96]	; (8002038 <HAL_RCC_ClockConfig+0x19c>)
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fdc:	4b16      	ldr	r3, [pc, #88]	; (8002038 <HAL_RCC_ClockConfig+0x19c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e020      	b.n	8002030 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d009      	beq.n	800200c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff8:	4b10      	ldr	r3, [pc, #64]	; (800203c <HAL_RCC_ClockConfig+0x1a0>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4a11      	ldr	r2, [pc, #68]	; (8002044 <HAL_RCC_ClockConfig+0x1a8>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	0019      	movs	r1, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_RCC_ClockConfig+0x1a0>)
 8002008:	430a      	orrs	r2, r1
 800200a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800200c:	f000 f820 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 8002010:	0001      	movs	r1, r0
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_RCC_ClockConfig+0x1a0>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	220f      	movs	r2, #15
 800201a:	4013      	ands	r3, r2
 800201c:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <HAL_RCC_ClockConfig+0x1ac>)
 800201e:	5cd3      	ldrb	r3, [r2, r3]
 8002020:	000a      	movs	r2, r1
 8002022:	40da      	lsrs	r2, r3
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_RCC_ClockConfig+0x1b0>)
 8002026:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002028:	2000      	movs	r0, #0
 800202a:	f7fe fe17 	bl	8000c5c <HAL_InitTick>
  
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	0018      	movs	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	b004      	add	sp, #16
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40022000 	.word	0x40022000
 800203c:	40021000 	.word	0x40021000
 8002040:	00001388 	.word	0x00001388
 8002044:	fffff8ff 	.word	0xfffff8ff
 8002048:	080038c8 	.word	0x080038c8
 800204c:	20000000 	.word	0x20000000

08002050 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800206a:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <HAL_RCC_GetSysClockFreq+0xd0>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	220c      	movs	r2, #12
 8002074:	4013      	ands	r3, r2
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d046      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0xb8>
 800207a:	d848      	bhi.n	800210e <HAL_RCC_GetSysClockFreq+0xbe>
 800207c:	2b04      	cmp	r3, #4
 800207e:	d002      	beq.n	8002086 <HAL_RCC_GetSysClockFreq+0x36>
 8002080:	2b08      	cmp	r3, #8
 8002082:	d003      	beq.n	800208c <HAL_RCC_GetSysClockFreq+0x3c>
 8002084:	e043      	b.n	800210e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002086:	4b27      	ldr	r3, [pc, #156]	; (8002124 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002088:	613b      	str	r3, [r7, #16]
      break;
 800208a:	e043      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	0c9b      	lsrs	r3, r3, #18
 8002090:	220f      	movs	r2, #15
 8002092:	4013      	ands	r3, r2
 8002094:	4a24      	ldr	r2, [pc, #144]	; (8002128 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002096:	5cd3      	ldrb	r3, [r2, r3]
 8002098:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800209a:	4b21      	ldr	r3, [pc, #132]	; (8002120 <HAL_RCC_GetSysClockFreq+0xd0>)
 800209c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209e:	220f      	movs	r2, #15
 80020a0:	4013      	ands	r3, r2
 80020a2:	4a22      	ldr	r2, [pc, #136]	; (800212c <HAL_RCC_GetSysClockFreq+0xdc>)
 80020a4:	5cd3      	ldrb	r3, [r2, r3]
 80020a6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	23c0      	movs	r3, #192	; 0xc0
 80020ac:	025b      	lsls	r3, r3, #9
 80020ae:	401a      	ands	r2, r3
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	025b      	lsls	r3, r3, #9
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d109      	bne.n	80020cc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	481a      	ldr	r0, [pc, #104]	; (8002124 <HAL_RCC_GetSysClockFreq+0xd4>)
 80020bc:	f7fe f824 	bl	8000108 <__udivsi3>
 80020c0:	0003      	movs	r3, r0
 80020c2:	001a      	movs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4353      	muls	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	e01a      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	23c0      	movs	r3, #192	; 0xc0
 80020d0:	025b      	lsls	r3, r3, #9
 80020d2:	401a      	ands	r2, r3
 80020d4:	23c0      	movs	r3, #192	; 0xc0
 80020d6:	025b      	lsls	r3, r3, #9
 80020d8:	429a      	cmp	r2, r3
 80020da:	d109      	bne.n	80020f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	4814      	ldr	r0, [pc, #80]	; (8002130 <HAL_RCC_GetSysClockFreq+0xe0>)
 80020e0:	f7fe f812 	bl	8000108 <__udivsi3>
 80020e4:	0003      	movs	r3, r0
 80020e6:	001a      	movs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4353      	muls	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	e008      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	480c      	ldr	r0, [pc, #48]	; (8002124 <HAL_RCC_GetSysClockFreq+0xd4>)
 80020f4:	f7fe f808 	bl	8000108 <__udivsi3>
 80020f8:	0003      	movs	r3, r0
 80020fa:	001a      	movs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4353      	muls	r3, r2
 8002100:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	613b      	str	r3, [r7, #16]
      break;
 8002106:	e005      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002108:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_RCC_GetSysClockFreq+0xe0>)
 800210a:	613b      	str	r3, [r7, #16]
      break;
 800210c:	e002      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800210e:	4b05      	ldr	r3, [pc, #20]	; (8002124 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002110:	613b      	str	r3, [r7, #16]
      break;
 8002112:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002114:	693b      	ldr	r3, [r7, #16]
}
 8002116:	0018      	movs	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	b006      	add	sp, #24
 800211c:	bd80      	pop	{r7, pc}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	40021000 	.word	0x40021000
 8002124:	007a1200 	.word	0x007a1200
 8002128:	080038e0 	.word	0x080038e0
 800212c:	080038f0 	.word	0x080038f0
 8002130:	02dc6c00 	.word	0x02dc6c00

08002134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002138:	4b02      	ldr	r3, [pc, #8]	; (8002144 <HAL_RCC_GetHCLKFreq+0x10>)
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	0018      	movs	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	20000000 	.word	0x20000000

08002148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800214c:	f7ff fff2 	bl	8002134 <HAL_RCC_GetHCLKFreq>
 8002150:	0001      	movs	r1, r0
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	0a1b      	lsrs	r3, r3, #8
 8002158:	2207      	movs	r2, #7
 800215a:	4013      	ands	r3, r2
 800215c:	4a04      	ldr	r2, [pc, #16]	; (8002170 <HAL_RCC_GetPCLK1Freq+0x28>)
 800215e:	5cd3      	ldrb	r3, [r2, r3]
 8002160:	40d9      	lsrs	r1, r3
 8002162:	000b      	movs	r3, r1
}    
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	40021000 	.word	0x40021000
 8002170:	080038d8 	.word	0x080038d8

08002174 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	025b      	lsls	r3, r3, #9
 800218c:	4013      	ands	r3, r2
 800218e:	d100      	bne.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002190:	e08e      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002192:	2017      	movs	r0, #23
 8002194:	183b      	adds	r3, r7, r0
 8002196:	2200      	movs	r2, #0
 8002198:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219a:	4b6e      	ldr	r3, [pc, #440]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800219c:	69da      	ldr	r2, [r3, #28]
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	055b      	lsls	r3, r3, #21
 80021a2:	4013      	ands	r3, r2
 80021a4:	d110      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	4b6b      	ldr	r3, [pc, #428]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021a8:	69da      	ldr	r2, [r3, #28]
 80021aa:	4b6a      	ldr	r3, [pc, #424]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021ac:	2180      	movs	r1, #128	; 0x80
 80021ae:	0549      	lsls	r1, r1, #21
 80021b0:	430a      	orrs	r2, r1
 80021b2:	61da      	str	r2, [r3, #28]
 80021b4:	4b67      	ldr	r3, [pc, #412]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021b6:	69da      	ldr	r2, [r3, #28]
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	055b      	lsls	r3, r3, #21
 80021bc:	4013      	ands	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c2:	183b      	adds	r3, r7, r0
 80021c4:	2201      	movs	r2, #1
 80021c6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	4b63      	ldr	r3, [pc, #396]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4013      	ands	r3, r2
 80021d2:	d11a      	bne.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021d4:	4b60      	ldr	r3, [pc, #384]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b5f      	ldr	r3, [pc, #380]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80021da:	2180      	movs	r1, #128	; 0x80
 80021dc:	0049      	lsls	r1, r1, #1
 80021de:	430a      	orrs	r2, r1
 80021e0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e2:	f7fe fd81 	bl	8000ce8 <HAL_GetTick>
 80021e6:	0003      	movs	r3, r0
 80021e8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ea:	e008      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ec:	f7fe fd7c 	bl	8000ce8 <HAL_GetTick>
 80021f0:	0002      	movs	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b64      	cmp	r3, #100	; 0x64
 80021f8:	d901      	bls.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e0a6      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fe:	4b56      	ldr	r3, [pc, #344]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4013      	ands	r3, r2
 8002208:	d0f0      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800220a:	4b52      	ldr	r3, [pc, #328]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800220c:	6a1a      	ldr	r2, [r3, #32]
 800220e:	23c0      	movs	r3, #192	; 0xc0
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4013      	ands	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d034      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	23c0      	movs	r3, #192	; 0xc0
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4013      	ands	r3, r2
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	429a      	cmp	r2, r3
 800222a:	d02c      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800222c:	4b49      	ldr	r3, [pc, #292]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	4a4a      	ldr	r2, [pc, #296]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002232:	4013      	ands	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002236:	4b47      	ldr	r3, [pc, #284]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002238:	6a1a      	ldr	r2, [r3, #32]
 800223a:	4b46      	ldr	r3, [pc, #280]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800223c:	2180      	movs	r1, #128	; 0x80
 800223e:	0249      	lsls	r1, r1, #9
 8002240:	430a      	orrs	r2, r1
 8002242:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002244:	4b43      	ldr	r3, [pc, #268]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002246:	6a1a      	ldr	r2, [r3, #32]
 8002248:	4b42      	ldr	r3, [pc, #264]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800224a:	4945      	ldr	r1, [pc, #276]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800224c:	400a      	ands	r2, r1
 800224e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002250:	4b40      	ldr	r3, [pc, #256]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	4013      	ands	r3, r2
 800225c:	d013      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7fe fd43 	bl	8000ce8 <HAL_GetTick>
 8002262:	0003      	movs	r3, r0
 8002264:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002266:	e009      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002268:	f7fe fd3e 	bl	8000ce8 <HAL_GetTick>
 800226c:	0002      	movs	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	4a3c      	ldr	r2, [pc, #240]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d901      	bls.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e067      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227c:	4b35      	ldr	r3, [pc, #212]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	2202      	movs	r2, #2
 8002282:	4013      	ands	r3, r2
 8002284:	d0f0      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002286:	4b33      	ldr	r3, [pc, #204]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4a34      	ldr	r2, [pc, #208]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800228c:	4013      	ands	r3, r2
 800228e:	0019      	movs	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	4b2f      	ldr	r3, [pc, #188]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002296:	430a      	orrs	r2, r1
 8002298:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800229a:	2317      	movs	r3, #23
 800229c:	18fb      	adds	r3, r7, r3
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d105      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a4:	4b2b      	ldr	r3, [pc, #172]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022a6:	69da      	ldr	r2, [r3, #28]
 80022a8:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022aa:	492f      	ldr	r1, [pc, #188]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80022ac:	400a      	ands	r2, r1
 80022ae:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2201      	movs	r2, #1
 80022b6:	4013      	ands	r3, r2
 80022b8:	d009      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022ba:	4b26      	ldr	r3, [pc, #152]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	2203      	movs	r2, #3
 80022c0:	4393      	bics	r3, r2
 80022c2:	0019      	movs	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	4b22      	ldr	r3, [pc, #136]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022ca:	430a      	orrs	r2, r1
 80022cc:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2202      	movs	r2, #2
 80022d4:	4013      	ands	r3, r2
 80022d6:	d009      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022d8:	4b1e      	ldr	r3, [pc, #120]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	4a23      	ldr	r2, [pc, #140]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022de:	4013      	ands	r3, r2
 80022e0:	0019      	movs	r1, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022e8:	430a      	orrs	r2, r1
 80022ea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2220      	movs	r2, #32
 80022f2:	4013      	ands	r3, r2
 80022f4:	d009      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022f6:	4b17      	ldr	r3, [pc, #92]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	2210      	movs	r2, #16
 80022fc:	4393      	bics	r3, r2
 80022fe:	0019      	movs	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002306:	430a      	orrs	r2, r1
 8002308:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	029b      	lsls	r3, r3, #10
 8002312:	4013      	ands	r3, r2
 8002314:	d009      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002316:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	2280      	movs	r2, #128	; 0x80
 800231c:	4393      	bics	r3, r2
 800231e:	0019      	movs	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699a      	ldr	r2, [r3, #24]
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002326:	430a      	orrs	r2, r1
 8002328:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4013      	ands	r3, r2
 8002334:	d009      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002336:	4b07      	ldr	r3, [pc, #28]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	2240      	movs	r2, #64	; 0x40
 800233c:	4393      	bics	r3, r2
 800233e:	0019      	movs	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	695a      	ldr	r2, [r3, #20]
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002346:	430a      	orrs	r2, r1
 8002348:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	0018      	movs	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	b006      	add	sp, #24
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000
 8002358:	40007000 	.word	0x40007000
 800235c:	fffffcff 	.word	0xfffffcff
 8002360:	fffeffff 	.word	0xfffeffff
 8002364:	00001388 	.word	0x00001388
 8002368:	efffffff 	.word	0xefffffff
 800236c:	fffcffff 	.word	0xfffcffff

08002370 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e0a8      	b.n	80024d4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	2b00      	cmp	r3, #0
 8002388:	d109      	bne.n	800239e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	2382      	movs	r3, #130	; 0x82
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	429a      	cmp	r2, r3
 8002394:	d009      	beq.n	80023aa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	61da      	str	r2, [r3, #28]
 800239c:	e005      	b.n	80023aa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	225d      	movs	r2, #93	; 0x5d
 80023b4:	5c9b      	ldrb	r3, [r3, r2]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d107      	bne.n	80023cc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	225c      	movs	r2, #92	; 0x5c
 80023c0:	2100      	movs	r1, #0
 80023c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	0018      	movs	r0, r3
 80023c8:	f7fe fa1c 	bl	8000804 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	225d      	movs	r2, #93	; 0x5d
 80023d0:	2102      	movs	r1, #2
 80023d2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2140      	movs	r1, #64	; 0x40
 80023e0:	438a      	bics	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	23e0      	movs	r3, #224	; 0xe0
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d902      	bls.n	80023f6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	e002      	b.n	80023fc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	015b      	lsls	r3, r3, #5
 80023fa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	23f0      	movs	r3, #240	; 0xf0
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	429a      	cmp	r2, r3
 8002406:	d008      	beq.n	800241a <HAL_SPI_Init+0xaa>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	23e0      	movs	r3, #224	; 0xe0
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	429a      	cmp	r2, r3
 8002412:	d002      	beq.n	800241a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	2382      	movs	r3, #130	; 0x82
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	401a      	ands	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6899      	ldr	r1, [r3, #8]
 8002428:	2384      	movs	r3, #132	; 0x84
 800242a:	021b      	lsls	r3, r3, #8
 800242c:	400b      	ands	r3, r1
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	2102      	movs	r1, #2
 8002436:	400b      	ands	r3, r1
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	2101      	movs	r1, #1
 8002440:	400b      	ands	r3, r1
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6999      	ldr	r1, [r3, #24]
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	400b      	ands	r3, r1
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	2138      	movs	r1, #56	; 0x38
 8002456:	400b      	ands	r3, r1
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	2180      	movs	r1, #128	; 0x80
 8002460:	400b      	ands	r3, r1
 8002462:	431a      	orrs	r2, r3
 8002464:	0011      	movs	r1, r2
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	019b      	lsls	r3, r3, #6
 800246e:	401a      	ands	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	0c1b      	lsrs	r3, r3, #16
 800247e:	2204      	movs	r2, #4
 8002480:	401a      	ands	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	2110      	movs	r1, #16
 8002488:	400b      	ands	r3, r1
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002490:	2108      	movs	r1, #8
 8002492:	400b      	ands	r3, r1
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68d9      	ldr	r1, [r3, #12]
 800249a:	23f0      	movs	r3, #240	; 0xf0
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	400b      	ands	r3, r1
 80024a0:	431a      	orrs	r2, r3
 80024a2:	0011      	movs	r1, r2
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	2380      	movs	r3, #128	; 0x80
 80024a8:	015b      	lsls	r3, r3, #5
 80024aa:	401a      	ands	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	69da      	ldr	r2, [r3, #28]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4907      	ldr	r1, [pc, #28]	; (80024dc <HAL_SPI_Init+0x16c>)
 80024c0:	400a      	ands	r2, r1
 80024c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	225d      	movs	r2, #93	; 0x5d
 80024ce:	2101      	movs	r1, #1
 80024d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b004      	add	sp, #16
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	fffff7ff 	.word	0xfffff7ff

080024e0 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e074      	b.n	80025dc <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	223c      	movs	r2, #60	; 0x3c
 80024f6:	5c9b      	ldrb	r3, [r3, r2]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d107      	bne.n	800250e <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	223d      	movs	r2, #61	; 0x3d
 8002502:	2100      	movs	r1, #0
 8002504:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	0018      	movs	r0, r3
 800250a:	f7fe f9c9 	bl	80008a0 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	223c      	movs	r2, #60	; 0x3c
 8002512:	2102      	movs	r1, #2
 8002514:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2201      	movs	r2, #1
 800251c:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6819      	ldr	r1, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800252c:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8002534:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800253a:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8002540:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8002546:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 800254c:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8002552:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7b1b      	ldrb	r3, [r3, #12]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d108      	bne.n	8002576 <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2180      	movs	r1, #128	; 0x80
 8002570:	0249      	lsls	r1, r1, #9
 8002572:	430a      	orrs	r2, r1
 8002574:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	43d2      	mvns	r2, r2
 800258c:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025a6:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681c      	ldr	r4, [r3, #0]
 80025b0:	0010      	movs	r0, r2
 80025b2:	f000 f817 	bl	80025e4 <TSC_extract_groups>
 80025b6:	0003      	movs	r3, r0
 80025b8:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2103      	movs	r1, #3
 80025c6:	438a      	bics	r2, r1
 80025c8:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2203      	movs	r2, #3
 80025d0:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	223c      	movs	r2, #60	; 0x3c
 80025d6:	2101      	movs	r1, #1
 80025d8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	0018      	movs	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	b003      	add	sp, #12
 80025e2:	bd90      	pop	{r4, r7, pc}

080025e4 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80025f0:	2300      	movs	r3, #0
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	e011      	b.n	800261a <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	220f      	movs	r2, #15
 80025fc:	409a      	lsls	r2, r3
 80025fe:	0013      	movs	r3, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	4013      	ands	r3, r2
 8002604:	d006      	beq.n	8002614 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8002606:	2201      	movs	r2, #1
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	409a      	lsls	r2, r3
 800260c:	0013      	movs	r3, r2
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	3301      	adds	r3, #1
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b07      	cmp	r3, #7
 800261e:	d9ea      	bls.n	80025f6 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8002620:	68fb      	ldr	r3, [r7, #12]
}
 8002622:	0018      	movs	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	b004      	add	sp, #16
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e044      	b.n	80026c8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002642:	2b00      	cmp	r3, #0
 8002644:	d107      	bne.n	8002656 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2278      	movs	r2, #120	; 0x78
 800264a:	2100      	movs	r1, #0
 800264c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	0018      	movs	r0, r3
 8002652:	f7fe f9c3 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2224      	movs	r2, #36	; 0x24
 800265a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2101      	movs	r1, #1
 8002668:	438a      	bics	r2, r1
 800266a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	0018      	movs	r0, r3
 8002670:	f000 fcb4 	bl	8002fdc <UART_SetConfig>
 8002674:	0003      	movs	r3, r0
 8002676:	2b01      	cmp	r3, #1
 8002678:	d101      	bne.n	800267e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e024      	b.n	80026c8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	0018      	movs	r0, r3
 800268a:	f000 fe2f 	bl	80032ec <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	490d      	ldr	r1, [pc, #52]	; (80026d0 <HAL_UART_Init+0xa4>)
 800269a:	400a      	ands	r2, r1
 800269c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	212a      	movs	r1, #42	; 0x2a
 80026aa:	438a      	bics	r2, r1
 80026ac:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2101      	movs	r1, #1
 80026ba:	430a      	orrs	r2, r1
 80026bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	0018      	movs	r0, r3
 80026c2:	f000 fec7 	bl	8003454 <UART_CheckIdleState>
 80026c6:	0003      	movs	r3, r0
}
 80026c8:	0018      	movs	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b002      	add	sp, #8
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	ffffb7ff 	.word	0xffffb7ff

080026d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	; 0x28
 80026d8:	af02      	add	r7, sp, #8
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	1dbb      	adds	r3, r7, #6
 80026e2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	d000      	beq.n	80026ee <HAL_UART_Transmit+0x1a>
 80026ec:	e08d      	b.n	800280a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_UART_Transmit+0x28>
 80026f4:	1dbb      	adds	r3, r7, #6
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e085      	b.n	800280c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	015b      	lsls	r3, r3, #5
 8002708:	429a      	cmp	r2, r3
 800270a:	d109      	bne.n	8002720 <HAL_UART_Transmit+0x4c>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2201      	movs	r2, #1
 8002718:	4013      	ands	r3, r2
 800271a:	d001      	beq.n	8002720 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e075      	b.n	800280c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2284      	movs	r2, #132	; 0x84
 8002724:	2100      	movs	r1, #0
 8002726:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2221      	movs	r2, #33	; 0x21
 800272c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800272e:	f7fe fadb 	bl	8000ce8 <HAL_GetTick>
 8002732:	0003      	movs	r3, r0
 8002734:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1dba      	adds	r2, r7, #6
 800273a:	2150      	movs	r1, #80	; 0x50
 800273c:	8812      	ldrh	r2, [r2, #0]
 800273e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1dba      	adds	r2, r7, #6
 8002744:	2152      	movs	r1, #82	; 0x52
 8002746:	8812      	ldrh	r2, [r2, #0]
 8002748:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	015b      	lsls	r3, r3, #5
 8002752:	429a      	cmp	r2, r3
 8002754:	d108      	bne.n	8002768 <HAL_UART_Transmit+0x94>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d104      	bne.n	8002768 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	e003      	b.n	8002770 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800276c:	2300      	movs	r3, #0
 800276e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002770:	e030      	b.n	80027d4 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	0013      	movs	r3, r2
 800277c:	2200      	movs	r2, #0
 800277e:	2180      	movs	r1, #128	; 0x80
 8002780:	f000 ff10 	bl	80035a4 <UART_WaitOnFlagUntilTimeout>
 8002784:	1e03      	subs	r3, r0, #0
 8002786:	d004      	beq.n	8002792 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2220      	movs	r2, #32
 800278c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e03c      	b.n	800280c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10b      	bne.n	80027b0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	881a      	ldrh	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	05d2      	lsls	r2, r2, #23
 80027a2:	0dd2      	lsrs	r2, r2, #23
 80027a4:	b292      	uxth	r2, r2
 80027a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	3302      	adds	r3, #2
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	e008      	b.n	80027c2 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	781a      	ldrb	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	b292      	uxth	r2, r2
 80027ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	3301      	adds	r3, #1
 80027c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2252      	movs	r2, #82	; 0x52
 80027c6:	5a9b      	ldrh	r3, [r3, r2]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b299      	uxth	r1, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2252      	movs	r2, #82	; 0x52
 80027d2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2252      	movs	r2, #82	; 0x52
 80027d8:	5a9b      	ldrh	r3, [r3, r2]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1c8      	bne.n	8002772 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	0013      	movs	r3, r2
 80027ea:	2200      	movs	r2, #0
 80027ec:	2140      	movs	r1, #64	; 0x40
 80027ee:	f000 fed9 	bl	80035a4 <UART_WaitOnFlagUntilTimeout>
 80027f2:	1e03      	subs	r3, r0, #0
 80027f4:	d004      	beq.n	8002800 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2220      	movs	r2, #32
 80027fa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e005      	b.n	800280c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	e000      	b.n	800280c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800280a:	2302      	movs	r3, #2
  }
}
 800280c:	0018      	movs	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	b008      	add	sp, #32
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	; 0x28
 8002818:	af02      	add	r7, sp, #8
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	1dbb      	adds	r3, r7, #6
 8002822:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2280      	movs	r2, #128	; 0x80
 8002828:	589b      	ldr	r3, [r3, r2]
 800282a:	2b20      	cmp	r3, #32
 800282c:	d000      	beq.n	8002830 <HAL_UART_Receive+0x1c>
 800282e:	e0d1      	b.n	80029d4 <HAL_UART_Receive+0x1c0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_UART_Receive+0x2a>
 8002836:	1dbb      	adds	r3, r7, #6
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e0c9      	b.n	80029d6 <HAL_UART_Receive+0x1c2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	2380      	movs	r3, #128	; 0x80
 8002848:	015b      	lsls	r3, r3, #5
 800284a:	429a      	cmp	r2, r3
 800284c:	d109      	bne.n	8002862 <HAL_UART_Receive+0x4e>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d105      	bne.n	8002862 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2201      	movs	r2, #1
 800285a:	4013      	ands	r3, r2
 800285c:	d001      	beq.n	8002862 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e0b9      	b.n	80029d6 <HAL_UART_Receive+0x1c2>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2284      	movs	r2, #132	; 0x84
 8002866:	2100      	movs	r1, #0
 8002868:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2280      	movs	r2, #128	; 0x80
 800286e:	2122      	movs	r1, #34	; 0x22
 8002870:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002878:	f7fe fa36 	bl	8000ce8 <HAL_GetTick>
 800287c:	0003      	movs	r3, r0
 800287e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1dba      	adds	r2, r7, #6
 8002884:	2158      	movs	r1, #88	; 0x58
 8002886:	8812      	ldrh	r2, [r2, #0]
 8002888:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1dba      	adds	r2, r7, #6
 800288e:	215a      	movs	r1, #90	; 0x5a
 8002890:	8812      	ldrh	r2, [r2, #0]
 8002892:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	015b      	lsls	r3, r3, #5
 800289c:	429a      	cmp	r2, r3
 800289e:	d10d      	bne.n	80028bc <HAL_UART_Receive+0xa8>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d104      	bne.n	80028b2 <HAL_UART_Receive+0x9e>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	225c      	movs	r2, #92	; 0x5c
 80028ac:	494c      	ldr	r1, [pc, #304]	; (80029e0 <HAL_UART_Receive+0x1cc>)
 80028ae:	5299      	strh	r1, [r3, r2]
 80028b0:	e02e      	b.n	8002910 <HAL_UART_Receive+0xfc>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	225c      	movs	r2, #92	; 0x5c
 80028b6:	21ff      	movs	r1, #255	; 0xff
 80028b8:	5299      	strh	r1, [r3, r2]
 80028ba:	e029      	b.n	8002910 <HAL_UART_Receive+0xfc>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10d      	bne.n	80028e0 <HAL_UART_Receive+0xcc>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d104      	bne.n	80028d6 <HAL_UART_Receive+0xc2>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	225c      	movs	r2, #92	; 0x5c
 80028d0:	21ff      	movs	r1, #255	; 0xff
 80028d2:	5299      	strh	r1, [r3, r2]
 80028d4:	e01c      	b.n	8002910 <HAL_UART_Receive+0xfc>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	225c      	movs	r2, #92	; 0x5c
 80028da:	217f      	movs	r1, #127	; 0x7f
 80028dc:	5299      	strh	r1, [r3, r2]
 80028de:	e017      	b.n	8002910 <HAL_UART_Receive+0xfc>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	055b      	lsls	r3, r3, #21
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d10d      	bne.n	8002908 <HAL_UART_Receive+0xf4>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d104      	bne.n	80028fe <HAL_UART_Receive+0xea>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	225c      	movs	r2, #92	; 0x5c
 80028f8:	217f      	movs	r1, #127	; 0x7f
 80028fa:	5299      	strh	r1, [r3, r2]
 80028fc:	e008      	b.n	8002910 <HAL_UART_Receive+0xfc>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	225c      	movs	r2, #92	; 0x5c
 8002902:	213f      	movs	r1, #63	; 0x3f
 8002904:	5299      	strh	r1, [r3, r2]
 8002906:	e003      	b.n	8002910 <HAL_UART_Receive+0xfc>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	225c      	movs	r2, #92	; 0x5c
 800290c:	2100      	movs	r1, #0
 800290e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002910:	2312      	movs	r3, #18
 8002912:	18fb      	adds	r3, r7, r3
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	215c      	movs	r1, #92	; 0x5c
 8002918:	5a52      	ldrh	r2, [r2, r1]
 800291a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	015b      	lsls	r3, r3, #5
 8002924:	429a      	cmp	r2, r3
 8002926:	d108      	bne.n	800293a <HAL_UART_Receive+0x126>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	61bb      	str	r3, [r7, #24]
 8002938:	e003      	b.n	8002942 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002942:	e03b      	b.n	80029bc <HAL_UART_Receive+0x1a8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	0013      	movs	r3, r2
 800294e:	2200      	movs	r2, #0
 8002950:	2120      	movs	r1, #32
 8002952:	f000 fe27 	bl	80035a4 <UART_WaitOnFlagUntilTimeout>
 8002956:	1e03      	subs	r3, r0, #0
 8002958:	d005      	beq.n	8002966 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2280      	movs	r2, #128	; 0x80
 800295e:	2120      	movs	r1, #32
 8002960:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e037      	b.n	80029d6 <HAL_UART_Receive+0x1c2>
      }
      if (pdata8bits == NULL)
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10e      	bne.n	800298a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002972:	b29b      	uxth	r3, r3
 8002974:	2212      	movs	r2, #18
 8002976:	18ba      	adds	r2, r7, r2
 8002978:	8812      	ldrh	r2, [r2, #0]
 800297a:	4013      	ands	r3, r2
 800297c:	b29a      	uxth	r2, r3
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	3302      	adds	r3, #2
 8002986:	61bb      	str	r3, [r7, #24]
 8002988:	e00f      	b.n	80029aa <HAL_UART_Receive+0x196>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002990:	b29b      	uxth	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2212      	movs	r2, #18
 8002996:	18ba      	adds	r2, r7, r2
 8002998:	8812      	ldrh	r2, [r2, #0]
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	4013      	ands	r3, r2
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	3301      	adds	r3, #1
 80029a8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	225a      	movs	r2, #90	; 0x5a
 80029ae:	5a9b      	ldrh	r3, [r3, r2]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b299      	uxth	r1, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	225a      	movs	r2, #90	; 0x5a
 80029ba:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	225a      	movs	r2, #90	; 0x5a
 80029c0:	5a9b      	ldrh	r3, [r3, r2]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1bd      	bne.n	8002944 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2280      	movs	r2, #128	; 0x80
 80029cc:	2120      	movs	r1, #32
 80029ce:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e000      	b.n	80029d6 <HAL_UART_Receive+0x1c2>
  }
  else
  {
    return HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
  }
}
 80029d6:	0018      	movs	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	b008      	add	sp, #32
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	000001ff 	.word	0x000001ff

080029e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b0ab      	sub	sp, #172	; 0xac
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	22a4      	movs	r2, #164	; 0xa4
 80029f4:	18b9      	adds	r1, r7, r2
 80029f6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	20a0      	movs	r0, #160	; 0xa0
 8002a00:	1839      	adds	r1, r7, r0
 8002a02:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	219c      	movs	r1, #156	; 0x9c
 8002a0c:	1879      	adds	r1, r7, r1
 8002a0e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a10:	0011      	movs	r1, r2
 8002a12:	18bb      	adds	r3, r7, r2
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a99      	ldr	r2, [pc, #612]	; (8002c7c <HAL_UART_IRQHandler+0x298>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2298      	movs	r2, #152	; 0x98
 8002a1c:	18bc      	adds	r4, r7, r2
 8002a1e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002a20:	18bb      	adds	r3, r7, r2
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d114      	bne.n	8002a52 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a28:	187b      	adds	r3, r7, r1
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d00f      	beq.n	8002a52 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a32:	183b      	adds	r3, r7, r0
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2220      	movs	r2, #32
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d00a      	beq.n	8002a52 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d100      	bne.n	8002a46 <HAL_UART_IRQHandler+0x62>
 8002a44:	e29e      	b.n	8002f84 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	0010      	movs	r0, r2
 8002a4e:	4798      	blx	r3
      }
      return;
 8002a50:	e298      	b.n	8002f84 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a52:	2398      	movs	r3, #152	; 0x98
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d100      	bne.n	8002a5e <HAL_UART_IRQHandler+0x7a>
 8002a5c:	e114      	b.n	8002c88 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a5e:	239c      	movs	r3, #156	; 0x9c
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2201      	movs	r2, #1
 8002a66:	4013      	ands	r3, r2
 8002a68:	d106      	bne.n	8002a78 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a6a:	23a0      	movs	r3, #160	; 0xa0
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a83      	ldr	r2, [pc, #524]	; (8002c80 <HAL_UART_IRQHandler+0x29c>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	d100      	bne.n	8002a78 <HAL_UART_IRQHandler+0x94>
 8002a76:	e107      	b.n	8002c88 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a78:	23a4      	movs	r3, #164	; 0xa4
 8002a7a:	18fb      	adds	r3, r7, r3
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	4013      	ands	r3, r2
 8002a82:	d012      	beq.n	8002aaa <HAL_UART_IRQHandler+0xc6>
 8002a84:	23a0      	movs	r3, #160	; 0xa0
 8002a86:	18fb      	adds	r3, r7, r3
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d00b      	beq.n	8002aaa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2201      	movs	r2, #1
 8002a98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2284      	movs	r2, #132	; 0x84
 8002a9e:	589b      	ldr	r3, [r3, r2]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2184      	movs	r1, #132	; 0x84
 8002aa8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002aaa:	23a4      	movs	r3, #164	; 0xa4
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d011      	beq.n	8002ada <HAL_UART_IRQHandler+0xf6>
 8002ab6:	239c      	movs	r3, #156	; 0x9c
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2201      	movs	r2, #1
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d00b      	beq.n	8002ada <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2284      	movs	r2, #132	; 0x84
 8002ace:	589b      	ldr	r3, [r3, r2]
 8002ad0:	2204      	movs	r2, #4
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2184      	movs	r1, #132	; 0x84
 8002ad8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ada:	23a4      	movs	r3, #164	; 0xa4
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d011      	beq.n	8002b0a <HAL_UART_IRQHandler+0x126>
 8002ae6:	239c      	movs	r3, #156	; 0x9c
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2201      	movs	r2, #1
 8002aee:	4013      	ands	r3, r2
 8002af0:	d00b      	beq.n	8002b0a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2204      	movs	r2, #4
 8002af8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2284      	movs	r2, #132	; 0x84
 8002afe:	589b      	ldr	r3, [r3, r2]
 8002b00:	2202      	movs	r2, #2
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2184      	movs	r1, #132	; 0x84
 8002b08:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b0a:	23a4      	movs	r3, #164	; 0xa4
 8002b0c:	18fb      	adds	r3, r7, r3
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2208      	movs	r2, #8
 8002b12:	4013      	ands	r3, r2
 8002b14:	d017      	beq.n	8002b46 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b16:	23a0      	movs	r3, #160	; 0xa0
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d105      	bne.n	8002b2e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b22:	239c      	movs	r3, #156	; 0x9c
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b2c:	d00b      	beq.n	8002b46 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2208      	movs	r2, #8
 8002b34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2284      	movs	r2, #132	; 0x84
 8002b3a:	589b      	ldr	r3, [r3, r2]
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2184      	movs	r1, #132	; 0x84
 8002b44:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b46:	23a4      	movs	r3, #164	; 0xa4
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	4013      	ands	r3, r2
 8002b52:	d013      	beq.n	8002b7c <HAL_UART_IRQHandler+0x198>
 8002b54:	23a0      	movs	r3, #160	; 0xa0
 8002b56:	18fb      	adds	r3, r7, r3
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	2380      	movs	r3, #128	; 0x80
 8002b5c:	04db      	lsls	r3, r3, #19
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d00c      	beq.n	8002b7c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2280      	movs	r2, #128	; 0x80
 8002b68:	0112      	lsls	r2, r2, #4
 8002b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2284      	movs	r2, #132	; 0x84
 8002b70:	589b      	ldr	r3, [r3, r2]
 8002b72:	2220      	movs	r2, #32
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2184      	movs	r1, #132	; 0x84
 8002b7a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2284      	movs	r2, #132	; 0x84
 8002b80:	589b      	ldr	r3, [r3, r2]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d100      	bne.n	8002b88 <HAL_UART_IRQHandler+0x1a4>
 8002b86:	e1ff      	b.n	8002f88 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b88:	23a4      	movs	r3, #164	; 0xa4
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	4013      	ands	r3, r2
 8002b92:	d00e      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b94:	23a0      	movs	r3, #160	; 0xa0
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d008      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d004      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	0010      	movs	r0, r2
 8002bb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2284      	movs	r2, #132	; 0x84
 8002bb6:	589b      	ldr	r3, [r3, r2]
 8002bb8:	2194      	movs	r1, #148	; 0x94
 8002bba:	187a      	adds	r2, r7, r1
 8002bbc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2240      	movs	r2, #64	; 0x40
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b40      	cmp	r3, #64	; 0x40
 8002bca:	d004      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002bcc:	187b      	adds	r3, r7, r1
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2228      	movs	r2, #40	; 0x28
 8002bd2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bd4:	d047      	beq.n	8002c66 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f000 fd4d 	bl	8003678 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2240      	movs	r2, #64	; 0x40
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b40      	cmp	r3, #64	; 0x40
 8002bea:	d137      	bne.n	8002c5c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bec:	f3ef 8310 	mrs	r3, PRIMASK
 8002bf0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bf4:	2090      	movs	r0, #144	; 0x90
 8002bf6:	183a      	adds	r2, r7, r0
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c00:	f383 8810 	msr	PRIMASK, r3
}
 8002c04:	46c0      	nop			; (mov r8, r8)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2140      	movs	r1, #64	; 0x40
 8002c12:	438a      	bics	r2, r1
 8002c14:	609a      	str	r2, [r3, #8]
 8002c16:	183b      	adds	r3, r7, r0
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c1e:	f383 8810 	msr	PRIMASK, r3
}
 8002c22:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d012      	beq.n	8002c52 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c30:	4a14      	ldr	r2, [pc, #80]	; (8002c84 <HAL_UART_IRQHandler+0x2a0>)
 8002c32:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f7fe f975 	bl	8000f28 <HAL_DMA_Abort_IT>
 8002c3e:	1e03      	subs	r3, r0, #0
 8002c40:	d01a      	beq.n	8002c78 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c50:	e012      	b.n	8002c78 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	0018      	movs	r0, r3
 8002c56:	f000 f9ad 	bl	8002fb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5a:	e00d      	b.n	8002c78 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f000 f9a8 	bl	8002fb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c64:	e008      	b.n	8002c78 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f000 f9a3 	bl	8002fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2284      	movs	r2, #132	; 0x84
 8002c72:	2100      	movs	r1, #0
 8002c74:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002c76:	e187      	b.n	8002f88 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c78:	46c0      	nop			; (mov r8, r8)
    return;
 8002c7a:	e185      	b.n	8002f88 <HAL_UART_IRQHandler+0x5a4>
 8002c7c:	0000080f 	.word	0x0000080f
 8002c80:	04000120 	.word	0x04000120
 8002c84:	08003741 	.word	0x08003741

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d000      	beq.n	8002c92 <HAL_UART_IRQHandler+0x2ae>
 8002c90:	e139      	b.n	8002f06 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c92:	23a4      	movs	r3, #164	; 0xa4
 8002c94:	18fb      	adds	r3, r7, r3
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2210      	movs	r2, #16
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d100      	bne.n	8002ca0 <HAL_UART_IRQHandler+0x2bc>
 8002c9e:	e132      	b.n	8002f06 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ca0:	23a0      	movs	r3, #160	; 0xa0
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2210      	movs	r2, #16
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d100      	bne.n	8002cae <HAL_UART_IRQHandler+0x2ca>
 8002cac:	e12b      	b.n	8002f06 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2210      	movs	r2, #16
 8002cb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2240      	movs	r2, #64	; 0x40
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b40      	cmp	r3, #64	; 0x40
 8002cc2:	d000      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x2e2>
 8002cc4:	e09f      	b.n	8002e06 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	217e      	movs	r1, #126	; 0x7e
 8002cd0:	187b      	adds	r3, r7, r1
 8002cd2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002cd4:	187b      	adds	r3, r7, r1
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d100      	bne.n	8002cde <HAL_UART_IRQHandler+0x2fa>
 8002cdc:	e156      	b.n	8002f8c <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2258      	movs	r2, #88	; 0x58
 8002ce2:	5a9b      	ldrh	r3, [r3, r2]
 8002ce4:	187a      	adds	r2, r7, r1
 8002ce6:	8812      	ldrh	r2, [r2, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d300      	bcc.n	8002cee <HAL_UART_IRQHandler+0x30a>
 8002cec:	e14e      	b.n	8002f8c <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	187a      	adds	r2, r7, r1
 8002cf2:	215a      	movs	r1, #90	; 0x5a
 8002cf4:	8812      	ldrh	r2, [r2, #0]
 8002cf6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	d06f      	beq.n	8002de2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d02:	f3ef 8310 	mrs	r3, PRIMASK
 8002d06:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d12:	f383 8810 	msr	PRIMASK, r3
}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	499e      	ldr	r1, [pc, #632]	; (8002f9c <HAL_UART_IRQHandler+0x5b8>)
 8002d24:	400a      	ands	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d2a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2e:	f383 8810 	msr	PRIMASK, r3
}
 8002d32:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d34:	f3ef 8310 	mrs	r3, PRIMASK
 8002d38:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d3c:	677b      	str	r3, [r7, #116]	; 0x74
 8002d3e:	2301      	movs	r3, #1
 8002d40:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d44:	f383 8810 	msr	PRIMASK, r3
}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2101      	movs	r1, #1
 8002d56:	438a      	bics	r2, r1
 8002d58:	609a      	str	r2, [r3, #8]
 8002d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d5c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d60:	f383 8810 	msr	PRIMASK, r3
}
 8002d64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d66:	f3ef 8310 	mrs	r3, PRIMASK
 8002d6a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d6e:	673b      	str	r3, [r7, #112]	; 0x70
 8002d70:	2301      	movs	r3, #1
 8002d72:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d76:	f383 8810 	msr	PRIMASK, r3
}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2140      	movs	r1, #64	; 0x40
 8002d88:	438a      	bics	r2, r1
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d8e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d92:	f383 8810 	msr	PRIMASK, r3
}
 8002d96:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2280      	movs	r2, #128	; 0x80
 8002d9c:	2120      	movs	r1, #32
 8002d9e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002da6:	f3ef 8310 	mrs	r3, PRIMASK
 8002daa:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002db0:	2301      	movs	r3, #1
 8002db2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002db6:	f383 8810 	msr	PRIMASK, r3
}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2110      	movs	r1, #16
 8002dc8:	438a      	bics	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dce:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dd2:	f383 8810 	msr	PRIMASK, r3
}
 8002dd6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f7fe f86b 	bl	8000eb8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2202      	movs	r2, #2
 8002de6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2258      	movs	r2, #88	; 0x58
 8002dec:	5a9a      	ldrh	r2, [r3, r2]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	215a      	movs	r1, #90	; 0x5a
 8002df2:	5a5b      	ldrh	r3, [r3, r1]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	0011      	movs	r1, r2
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f000 f8e0 	bl	8002fc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e04:	e0c2      	b.n	8002f8c <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2258      	movs	r2, #88	; 0x58
 8002e0a:	5a99      	ldrh	r1, [r3, r2]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	225a      	movs	r2, #90	; 0x5a
 8002e10:	5a9b      	ldrh	r3, [r3, r2]
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	208e      	movs	r0, #142	; 0x8e
 8002e16:	183b      	adds	r3, r7, r0
 8002e18:	1a8a      	subs	r2, r1, r2
 8002e1a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	225a      	movs	r2, #90	; 0x5a
 8002e20:	5a9b      	ldrh	r3, [r3, r2]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d100      	bne.n	8002e2a <HAL_UART_IRQHandler+0x446>
 8002e28:	e0b2      	b.n	8002f90 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8002e2a:	183b      	adds	r3, r7, r0
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d100      	bne.n	8002e34 <HAL_UART_IRQHandler+0x450>
 8002e32:	e0ad      	b.n	8002f90 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e34:	f3ef 8310 	mrs	r3, PRIMASK
 8002e38:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e3c:	2488      	movs	r4, #136	; 0x88
 8002e3e:	193a      	adds	r2, r7, r4
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	2301      	movs	r3, #1
 8002e44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f383 8810 	msr	PRIMASK, r3
}
 8002e4c:	46c0      	nop			; (mov r8, r8)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4951      	ldr	r1, [pc, #324]	; (8002fa0 <HAL_UART_IRQHandler+0x5bc>)
 8002e5a:	400a      	ands	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	193b      	adds	r3, r7, r4
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f383 8810 	msr	PRIMASK, r3
}
 8002e6a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e6c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e70:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e72:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e74:	2484      	movs	r4, #132	; 0x84
 8002e76:	193a      	adds	r2, r7, r4
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f383 8810 	msr	PRIMASK, r3
}
 8002e84:	46c0      	nop			; (mov r8, r8)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2101      	movs	r1, #1
 8002e92:	438a      	bics	r2, r1
 8002e94:	609a      	str	r2, [r3, #8]
 8002e96:	193b      	adds	r3, r7, r4
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	f383 8810 	msr	PRIMASK, r3
}
 8002ea2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2280      	movs	r2, #128	; 0x80
 8002ea8:	2120      	movs	r1, #32
 8002eaa:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ec0:	2480      	movs	r4, #128	; 0x80
 8002ec2:	193a      	adds	r2, r7, r4
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ecc:	f383 8810 	msr	PRIMASK, r3
}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2110      	movs	r1, #16
 8002ede:	438a      	bics	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	193b      	adds	r3, r7, r4
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eea:	f383 8810 	msr	PRIMASK, r3
}
 8002eee:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ef6:	183b      	adds	r3, r7, r0
 8002ef8:	881a      	ldrh	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	0011      	movs	r1, r2
 8002efe:	0018      	movs	r0, r3
 8002f00:	f000 f860 	bl	8002fc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f04:	e044      	b.n	8002f90 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f06:	23a4      	movs	r3, #164	; 0xa4
 8002f08:	18fb      	adds	r3, r7, r3
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	035b      	lsls	r3, r3, #13
 8002f10:	4013      	ands	r3, r2
 8002f12:	d010      	beq.n	8002f36 <HAL_UART_IRQHandler+0x552>
 8002f14:	239c      	movs	r3, #156	; 0x9c
 8002f16:	18fb      	adds	r3, r7, r3
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	03db      	lsls	r3, r3, #15
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d009      	beq.n	8002f36 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2280      	movs	r2, #128	; 0x80
 8002f28:	0352      	lsls	r2, r2, #13
 8002f2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f000 fc48 	bl	80037c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f34:	e02f      	b.n	8002f96 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f36:	23a4      	movs	r3, #164	; 0xa4
 8002f38:	18fb      	adds	r3, r7, r3
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2280      	movs	r2, #128	; 0x80
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d00f      	beq.n	8002f62 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f42:	23a0      	movs	r3, #160	; 0xa0
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2280      	movs	r2, #128	; 0x80
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d009      	beq.n	8002f62 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d01e      	beq.n	8002f94 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	0010      	movs	r0, r2
 8002f5e:	4798      	blx	r3
    }
    return;
 8002f60:	e018      	b.n	8002f94 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f62:	23a4      	movs	r3, #164	; 0xa4
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2240      	movs	r2, #64	; 0x40
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d013      	beq.n	8002f96 <HAL_UART_IRQHandler+0x5b2>
 8002f6e:	23a0      	movs	r3, #160	; 0xa0
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2240      	movs	r2, #64	; 0x40
 8002f76:	4013      	ands	r3, r2
 8002f78:	d00d      	beq.n	8002f96 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f000 fbf6 	bl	800376e <UART_EndTransmit_IT>
    return;
 8002f82:	e008      	b.n	8002f96 <HAL_UART_IRQHandler+0x5b2>
      return;
 8002f84:	46c0      	nop			; (mov r8, r8)
 8002f86:	e006      	b.n	8002f96 <HAL_UART_IRQHandler+0x5b2>
    return;
 8002f88:	46c0      	nop			; (mov r8, r8)
 8002f8a:	e004      	b.n	8002f96 <HAL_UART_IRQHandler+0x5b2>
      return;
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	e002      	b.n	8002f96 <HAL_UART_IRQHandler+0x5b2>
      return;
 8002f90:	46c0      	nop			; (mov r8, r8)
 8002f92:	e000      	b.n	8002f96 <HAL_UART_IRQHandler+0x5b2>
    return;
 8002f94:	46c0      	nop			; (mov r8, r8)
  }

}
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b02b      	add	sp, #172	; 0xac
 8002f9a:	bd90      	pop	{r4, r7, pc}
 8002f9c:	fffffeff 	.word	0xfffffeff
 8002fa0:	fffffedf 	.word	0xfffffedf

08002fa4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002fac:	46c0      	nop			; (mov r8, r8)
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b002      	add	sp, #8
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b002      	add	sp, #8
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	000a      	movs	r2, r1
 8002fce:	1cbb      	adds	r3, r7, #2
 8002fd0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	b002      	add	sp, #8
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fe4:	231e      	movs	r3, #30
 8002fe6:	18fb      	adds	r3, r7, r3
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4aaf      	ldr	r2, [pc, #700]	; (80032c8 <UART_SetConfig+0x2ec>)
 800300c:	4013      	ands	r3, r2
 800300e:	0019      	movs	r1, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	430a      	orrs	r2, r1
 8003018:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4aaa      	ldr	r2, [pc, #680]	; (80032cc <UART_SetConfig+0x2f0>)
 8003022:	4013      	ands	r3, r2
 8003024:	0019      	movs	r1, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	4313      	orrs	r3, r2
 8003040:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4aa1      	ldr	r2, [pc, #644]	; (80032d0 <UART_SetConfig+0x2f4>)
 800304a:	4013      	ands	r3, r2
 800304c:	0019      	movs	r1, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	430a      	orrs	r2, r1
 8003056:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a9d      	ldr	r2, [pc, #628]	; (80032d4 <UART_SetConfig+0x2f8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d127      	bne.n	80030b2 <UART_SetConfig+0xd6>
 8003062:	4b9d      	ldr	r3, [pc, #628]	; (80032d8 <UART_SetConfig+0x2fc>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	2203      	movs	r2, #3
 8003068:	4013      	ands	r3, r2
 800306a:	2b03      	cmp	r3, #3
 800306c:	d00d      	beq.n	800308a <UART_SetConfig+0xae>
 800306e:	d81b      	bhi.n	80030a8 <UART_SetConfig+0xcc>
 8003070:	2b02      	cmp	r3, #2
 8003072:	d014      	beq.n	800309e <UART_SetConfig+0xc2>
 8003074:	d818      	bhi.n	80030a8 <UART_SetConfig+0xcc>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <UART_SetConfig+0xa4>
 800307a:	2b01      	cmp	r3, #1
 800307c:	d00a      	beq.n	8003094 <UART_SetConfig+0xb8>
 800307e:	e013      	b.n	80030a8 <UART_SetConfig+0xcc>
 8003080:	231f      	movs	r3, #31
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	2200      	movs	r2, #0
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e065      	b.n	8003156 <UART_SetConfig+0x17a>
 800308a:	231f      	movs	r3, #31
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	2202      	movs	r2, #2
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	e060      	b.n	8003156 <UART_SetConfig+0x17a>
 8003094:	231f      	movs	r3, #31
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	2204      	movs	r2, #4
 800309a:	701a      	strb	r2, [r3, #0]
 800309c:	e05b      	b.n	8003156 <UART_SetConfig+0x17a>
 800309e:	231f      	movs	r3, #31
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	2208      	movs	r2, #8
 80030a4:	701a      	strb	r2, [r3, #0]
 80030a6:	e056      	b.n	8003156 <UART_SetConfig+0x17a>
 80030a8:	231f      	movs	r3, #31
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	2210      	movs	r2, #16
 80030ae:	701a      	strb	r2, [r3, #0]
 80030b0:	e051      	b.n	8003156 <UART_SetConfig+0x17a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a89      	ldr	r2, [pc, #548]	; (80032dc <UART_SetConfig+0x300>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d134      	bne.n	8003126 <UART_SetConfig+0x14a>
 80030bc:	4b86      	ldr	r3, [pc, #536]	; (80032d8 <UART_SetConfig+0x2fc>)
 80030be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030c0:	23c0      	movs	r3, #192	; 0xc0
 80030c2:	029b      	lsls	r3, r3, #10
 80030c4:	4013      	ands	r3, r2
 80030c6:	22c0      	movs	r2, #192	; 0xc0
 80030c8:	0292      	lsls	r2, r2, #10
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d017      	beq.n	80030fe <UART_SetConfig+0x122>
 80030ce:	22c0      	movs	r2, #192	; 0xc0
 80030d0:	0292      	lsls	r2, r2, #10
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d822      	bhi.n	800311c <UART_SetConfig+0x140>
 80030d6:	2280      	movs	r2, #128	; 0x80
 80030d8:	0292      	lsls	r2, r2, #10
 80030da:	4293      	cmp	r3, r2
 80030dc:	d019      	beq.n	8003112 <UART_SetConfig+0x136>
 80030de:	2280      	movs	r2, #128	; 0x80
 80030e0:	0292      	lsls	r2, r2, #10
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d81a      	bhi.n	800311c <UART_SetConfig+0x140>
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d004      	beq.n	80030f4 <UART_SetConfig+0x118>
 80030ea:	2280      	movs	r2, #128	; 0x80
 80030ec:	0252      	lsls	r2, r2, #9
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00a      	beq.n	8003108 <UART_SetConfig+0x12c>
 80030f2:	e013      	b.n	800311c <UART_SetConfig+0x140>
 80030f4:	231f      	movs	r3, #31
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
 80030fc:	e02b      	b.n	8003156 <UART_SetConfig+0x17a>
 80030fe:	231f      	movs	r3, #31
 8003100:	18fb      	adds	r3, r7, r3
 8003102:	2202      	movs	r2, #2
 8003104:	701a      	strb	r2, [r3, #0]
 8003106:	e026      	b.n	8003156 <UART_SetConfig+0x17a>
 8003108:	231f      	movs	r3, #31
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	2204      	movs	r2, #4
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	e021      	b.n	8003156 <UART_SetConfig+0x17a>
 8003112:	231f      	movs	r3, #31
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	2208      	movs	r2, #8
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	e01c      	b.n	8003156 <UART_SetConfig+0x17a>
 800311c:	231f      	movs	r3, #31
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	2210      	movs	r2, #16
 8003122:	701a      	strb	r2, [r3, #0]
 8003124:	e017      	b.n	8003156 <UART_SetConfig+0x17a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a6d      	ldr	r2, [pc, #436]	; (80032e0 <UART_SetConfig+0x304>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d104      	bne.n	800313a <UART_SetConfig+0x15e>
 8003130:	231f      	movs	r3, #31
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	2200      	movs	r2, #0
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	e00d      	b.n	8003156 <UART_SetConfig+0x17a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a69      	ldr	r2, [pc, #420]	; (80032e4 <UART_SetConfig+0x308>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d104      	bne.n	800314e <UART_SetConfig+0x172>
 8003144:	231f      	movs	r3, #31
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
 800314c:	e003      	b.n	8003156 <UART_SetConfig+0x17a>
 800314e:	231f      	movs	r3, #31
 8003150:	18fb      	adds	r3, r7, r3
 8003152:	2210      	movs	r2, #16
 8003154:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69da      	ldr	r2, [r3, #28]
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	021b      	lsls	r3, r3, #8
 800315e:	429a      	cmp	r2, r3
 8003160:	d15c      	bne.n	800321c <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8003162:	231f      	movs	r3, #31
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b08      	cmp	r3, #8
 800316a:	d015      	beq.n	8003198 <UART_SetConfig+0x1bc>
 800316c:	dc18      	bgt.n	80031a0 <UART_SetConfig+0x1c4>
 800316e:	2b04      	cmp	r3, #4
 8003170:	d00d      	beq.n	800318e <UART_SetConfig+0x1b2>
 8003172:	dc15      	bgt.n	80031a0 <UART_SetConfig+0x1c4>
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <UART_SetConfig+0x1a2>
 8003178:	2b02      	cmp	r3, #2
 800317a:	d005      	beq.n	8003188 <UART_SetConfig+0x1ac>
 800317c:	e010      	b.n	80031a0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800317e:	f7fe ffe3 	bl	8002148 <HAL_RCC_GetPCLK1Freq>
 8003182:	0003      	movs	r3, r0
 8003184:	61bb      	str	r3, [r7, #24]
        break;
 8003186:	e012      	b.n	80031ae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003188:	4b57      	ldr	r3, [pc, #348]	; (80032e8 <UART_SetConfig+0x30c>)
 800318a:	61bb      	str	r3, [r7, #24]
        break;
 800318c:	e00f      	b.n	80031ae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800318e:	f7fe ff5f 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 8003192:	0003      	movs	r3, r0
 8003194:	61bb      	str	r3, [r7, #24]
        break;
 8003196:	e00a      	b.n	80031ae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003198:	2380      	movs	r3, #128	; 0x80
 800319a:	021b      	lsls	r3, r3, #8
 800319c:	61bb      	str	r3, [r7, #24]
        break;
 800319e:	e006      	b.n	80031ae <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031a4:	231e      	movs	r3, #30
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	2201      	movs	r2, #1
 80031aa:	701a      	strb	r2, [r3, #0]
        break;
 80031ac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d100      	bne.n	80031b6 <UART_SetConfig+0x1da>
 80031b4:	e07a      	b.n	80032ac <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	005a      	lsls	r2, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	085b      	lsrs	r3, r3, #1
 80031c0:	18d2      	adds	r2, r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	0019      	movs	r1, r3
 80031c8:	0010      	movs	r0, r2
 80031ca:	f7fc ff9d 	bl	8000108 <__udivsi3>
 80031ce:	0003      	movs	r3, r0
 80031d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b0f      	cmp	r3, #15
 80031d6:	d91c      	bls.n	8003212 <UART_SetConfig+0x236>
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	2380      	movs	r3, #128	; 0x80
 80031dc:	025b      	lsls	r3, r3, #9
 80031de:	429a      	cmp	r2, r3
 80031e0:	d217      	bcs.n	8003212 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	200e      	movs	r0, #14
 80031e8:	183b      	adds	r3, r7, r0
 80031ea:	210f      	movs	r1, #15
 80031ec:	438a      	bics	r2, r1
 80031ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	085b      	lsrs	r3, r3, #1
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2207      	movs	r2, #7
 80031f8:	4013      	ands	r3, r2
 80031fa:	b299      	uxth	r1, r3
 80031fc:	183b      	adds	r3, r7, r0
 80031fe:	183a      	adds	r2, r7, r0
 8003200:	8812      	ldrh	r2, [r2, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	183a      	adds	r2, r7, r0
 800320c:	8812      	ldrh	r2, [r2, #0]
 800320e:	60da      	str	r2, [r3, #12]
 8003210:	e04c      	b.n	80032ac <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003212:	231e      	movs	r3, #30
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	2201      	movs	r2, #1
 8003218:	701a      	strb	r2, [r3, #0]
 800321a:	e047      	b.n	80032ac <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800321c:	231f      	movs	r3, #31
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b08      	cmp	r3, #8
 8003224:	d015      	beq.n	8003252 <UART_SetConfig+0x276>
 8003226:	dc18      	bgt.n	800325a <UART_SetConfig+0x27e>
 8003228:	2b04      	cmp	r3, #4
 800322a:	d00d      	beq.n	8003248 <UART_SetConfig+0x26c>
 800322c:	dc15      	bgt.n	800325a <UART_SetConfig+0x27e>
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <UART_SetConfig+0x25c>
 8003232:	2b02      	cmp	r3, #2
 8003234:	d005      	beq.n	8003242 <UART_SetConfig+0x266>
 8003236:	e010      	b.n	800325a <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003238:	f7fe ff86 	bl	8002148 <HAL_RCC_GetPCLK1Freq>
 800323c:	0003      	movs	r3, r0
 800323e:	61bb      	str	r3, [r7, #24]
        break;
 8003240:	e012      	b.n	8003268 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003242:	4b29      	ldr	r3, [pc, #164]	; (80032e8 <UART_SetConfig+0x30c>)
 8003244:	61bb      	str	r3, [r7, #24]
        break;
 8003246:	e00f      	b.n	8003268 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003248:	f7fe ff02 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 800324c:	0003      	movs	r3, r0
 800324e:	61bb      	str	r3, [r7, #24]
        break;
 8003250:	e00a      	b.n	8003268 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	021b      	lsls	r3, r3, #8
 8003256:	61bb      	str	r3, [r7, #24]
        break;
 8003258:	e006      	b.n	8003268 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800325e:	231e      	movs	r3, #30
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	2201      	movs	r2, #1
 8003264:	701a      	strb	r2, [r3, #0]
        break;
 8003266:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d01e      	beq.n	80032ac <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	085a      	lsrs	r2, r3, #1
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	18d2      	adds	r2, r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	0019      	movs	r1, r3
 800327e:	0010      	movs	r0, r2
 8003280:	f7fc ff42 	bl	8000108 <__udivsi3>
 8003284:	0003      	movs	r3, r0
 8003286:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	2b0f      	cmp	r3, #15
 800328c:	d90a      	bls.n	80032a4 <UART_SetConfig+0x2c8>
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	025b      	lsls	r3, r3, #9
 8003294:	429a      	cmp	r2, r3
 8003296:	d205      	bcs.n	80032a4 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	b29a      	uxth	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	e003      	b.n	80032ac <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80032a4:	231e      	movs	r3, #30
 80032a6:	18fb      	adds	r3, r7, r3
 80032a8:	2201      	movs	r2, #1
 80032aa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80032b8:	231e      	movs	r3, #30
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	781b      	ldrb	r3, [r3, #0]
}
 80032be:	0018      	movs	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b008      	add	sp, #32
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	efff69f3 	.word	0xefff69f3
 80032cc:	ffffcfff 	.word	0xffffcfff
 80032d0:	fffff4ff 	.word	0xfffff4ff
 80032d4:	40013800 	.word	0x40013800
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40004400 	.word	0x40004400
 80032e0:	40004800 	.word	0x40004800
 80032e4:	40004c00 	.word	0x40004c00
 80032e8:	007a1200 	.word	0x007a1200

080032ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	2201      	movs	r2, #1
 80032fa:	4013      	ands	r3, r2
 80032fc:	d00b      	beq.n	8003316 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4a4a      	ldr	r2, [pc, #296]	; (8003430 <UART_AdvFeatureConfig+0x144>)
 8003306:	4013      	ands	r3, r2
 8003308:	0019      	movs	r1, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	2202      	movs	r2, #2
 800331c:	4013      	ands	r3, r2
 800331e:	d00b      	beq.n	8003338 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	4a43      	ldr	r2, [pc, #268]	; (8003434 <UART_AdvFeatureConfig+0x148>)
 8003328:	4013      	ands	r3, r2
 800332a:	0019      	movs	r1, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	2204      	movs	r2, #4
 800333e:	4013      	ands	r3, r2
 8003340:	d00b      	beq.n	800335a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4a3b      	ldr	r2, [pc, #236]	; (8003438 <UART_AdvFeatureConfig+0x14c>)
 800334a:	4013      	ands	r3, r2
 800334c:	0019      	movs	r1, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	2208      	movs	r2, #8
 8003360:	4013      	ands	r3, r2
 8003362:	d00b      	beq.n	800337c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	4a34      	ldr	r2, [pc, #208]	; (800343c <UART_AdvFeatureConfig+0x150>)
 800336c:	4013      	ands	r3, r2
 800336e:	0019      	movs	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	2210      	movs	r2, #16
 8003382:	4013      	ands	r3, r2
 8003384:	d00b      	beq.n	800339e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	4a2c      	ldr	r2, [pc, #176]	; (8003440 <UART_AdvFeatureConfig+0x154>)
 800338e:	4013      	ands	r3, r2
 8003390:	0019      	movs	r1, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	2220      	movs	r2, #32
 80033a4:	4013      	ands	r3, r2
 80033a6:	d00b      	beq.n	80033c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	4a25      	ldr	r2, [pc, #148]	; (8003444 <UART_AdvFeatureConfig+0x158>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	0019      	movs	r1, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	2240      	movs	r2, #64	; 0x40
 80033c6:	4013      	ands	r3, r2
 80033c8:	d01d      	beq.n	8003406 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	4a1d      	ldr	r2, [pc, #116]	; (8003448 <UART_AdvFeatureConfig+0x15c>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	0019      	movs	r1, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033e6:	2380      	movs	r3, #128	; 0x80
 80033e8:	035b      	lsls	r3, r3, #13
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d10b      	bne.n	8003406 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4a15      	ldr	r2, [pc, #84]	; (800344c <UART_AdvFeatureConfig+0x160>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	0019      	movs	r1, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	2280      	movs	r2, #128	; 0x80
 800340c:	4013      	ands	r3, r2
 800340e:	d00b      	beq.n	8003428 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4a0e      	ldr	r2, [pc, #56]	; (8003450 <UART_AdvFeatureConfig+0x164>)
 8003418:	4013      	ands	r3, r2
 800341a:	0019      	movs	r1, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	605a      	str	r2, [r3, #4]
  }
}
 8003428:	46c0      	nop			; (mov r8, r8)
 800342a:	46bd      	mov	sp, r7
 800342c:	b002      	add	sp, #8
 800342e:	bd80      	pop	{r7, pc}
 8003430:	fffdffff 	.word	0xfffdffff
 8003434:	fffeffff 	.word	0xfffeffff
 8003438:	fffbffff 	.word	0xfffbffff
 800343c:	ffff7fff 	.word	0xffff7fff
 8003440:	ffffefff 	.word	0xffffefff
 8003444:	ffffdfff 	.word	0xffffdfff
 8003448:	ffefffff 	.word	0xffefffff
 800344c:	ff9fffff 	.word	0xff9fffff
 8003450:	fff7ffff 	.word	0xfff7ffff

08003454 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b092      	sub	sp, #72	; 0x48
 8003458:	af02      	add	r7, sp, #8
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2284      	movs	r2, #132	; 0x84
 8003460:	2100      	movs	r1, #0
 8003462:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003464:	f7fd fc40 	bl	8000ce8 <HAL_GetTick>
 8003468:	0003      	movs	r3, r0
 800346a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2208      	movs	r2, #8
 8003474:	4013      	ands	r3, r2
 8003476:	2b08      	cmp	r3, #8
 8003478:	d12c      	bne.n	80034d4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800347a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347c:	2280      	movs	r2, #128	; 0x80
 800347e:	0391      	lsls	r1, r2, #14
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4a46      	ldr	r2, [pc, #280]	; (800359c <UART_CheckIdleState+0x148>)
 8003484:	9200      	str	r2, [sp, #0]
 8003486:	2200      	movs	r2, #0
 8003488:	f000 f88c 	bl	80035a4 <UART_WaitOnFlagUntilTimeout>
 800348c:	1e03      	subs	r3, r0, #0
 800348e:	d021      	beq.n	80034d4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003490:	f3ef 8310 	mrs	r3, PRIMASK
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003498:	63bb      	str	r3, [r7, #56]	; 0x38
 800349a:	2301      	movs	r3, #1
 800349c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a0:	f383 8810 	msr	PRIMASK, r3
}
 80034a4:	46c0      	nop			; (mov r8, r8)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2180      	movs	r1, #128	; 0x80
 80034b2:	438a      	bics	r2, r1
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034bc:	f383 8810 	msr	PRIMASK, r3
}
 80034c0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2220      	movs	r2, #32
 80034c6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2278      	movs	r2, #120	; 0x78
 80034cc:	2100      	movs	r1, #0
 80034ce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e05f      	b.n	8003594 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2204      	movs	r2, #4
 80034dc:	4013      	ands	r3, r2
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d146      	bne.n	8003570 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e4:	2280      	movs	r2, #128	; 0x80
 80034e6:	03d1      	lsls	r1, r2, #15
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	4a2c      	ldr	r2, [pc, #176]	; (800359c <UART_CheckIdleState+0x148>)
 80034ec:	9200      	str	r2, [sp, #0]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f000 f858 	bl	80035a4 <UART_WaitOnFlagUntilTimeout>
 80034f4:	1e03      	subs	r3, r0, #0
 80034f6:	d03b      	beq.n	8003570 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f8:	f3ef 8310 	mrs	r3, PRIMASK
 80034fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80034fe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003500:	637b      	str	r3, [r7, #52]	; 0x34
 8003502:	2301      	movs	r3, #1
 8003504:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f383 8810 	msr	PRIMASK, r3
}
 800350c:	46c0      	nop			; (mov r8, r8)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4921      	ldr	r1, [pc, #132]	; (80035a0 <UART_CheckIdleState+0x14c>)
 800351a:	400a      	ands	r2, r1
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003520:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f383 8810 	msr	PRIMASK, r3
}
 8003528:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800352a:	f3ef 8310 	mrs	r3, PRIMASK
 800352e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003530:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003532:	633b      	str	r3, [r7, #48]	; 0x30
 8003534:	2301      	movs	r3, #1
 8003536:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f383 8810 	msr	PRIMASK, r3
}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2101      	movs	r1, #1
 800354c:	438a      	bics	r2, r1
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003552:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	f383 8810 	msr	PRIMASK, r3
}
 800355a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2280      	movs	r2, #128	; 0x80
 8003560:	2120      	movs	r1, #32
 8003562:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2278      	movs	r2, #120	; 0x78
 8003568:	2100      	movs	r1, #0
 800356a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e011      	b.n	8003594 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2280      	movs	r2, #128	; 0x80
 800357a:	2120      	movs	r1, #32
 800357c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2278      	movs	r2, #120	; 0x78
 800358e:	2100      	movs	r1, #0
 8003590:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	b010      	add	sp, #64	; 0x40
 800359a:	bd80      	pop	{r7, pc}
 800359c:	01ffffff 	.word	0x01ffffff
 80035a0:	fffffedf 	.word	0xfffffedf

080035a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	1dfb      	adds	r3, r7, #7
 80035b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b4:	e04b      	b.n	800364e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	3301      	adds	r3, #1
 80035ba:	d048      	beq.n	800364e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035bc:	f7fd fb94 	bl	8000ce8 <HAL_GetTick>
 80035c0:	0002      	movs	r2, r0
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d302      	bcc.n	80035d2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e04b      	b.n	800366e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2204      	movs	r2, #4
 80035de:	4013      	ands	r3, r2
 80035e0:	d035      	beq.n	800364e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	2208      	movs	r2, #8
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d111      	bne.n	8003614 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2208      	movs	r2, #8
 80035f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	0018      	movs	r0, r3
 80035fc:	f000 f83c 	bl	8003678 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2284      	movs	r2, #132	; 0x84
 8003604:	2108      	movs	r1, #8
 8003606:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2278      	movs	r2, #120	; 0x78
 800360c:	2100      	movs	r1, #0
 800360e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e02c      	b.n	800366e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	69da      	ldr	r2, [r3, #28]
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	401a      	ands	r2, r3
 8003620:	2380      	movs	r3, #128	; 0x80
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	429a      	cmp	r2, r3
 8003626:	d112      	bne.n	800364e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2280      	movs	r2, #128	; 0x80
 800362e:	0112      	lsls	r2, r2, #4
 8003630:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	0018      	movs	r0, r3
 8003636:	f000 f81f 	bl	8003678 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2284      	movs	r2, #132	; 0x84
 800363e:	2120      	movs	r1, #32
 8003640:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2278      	movs	r2, #120	; 0x78
 8003646:	2100      	movs	r1, #0
 8003648:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e00f      	b.n	800366e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	4013      	ands	r3, r2
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	425a      	negs	r2, r3
 800365e:	4153      	adcs	r3, r2
 8003660:	b2db      	uxtb	r3, r3
 8003662:	001a      	movs	r2, r3
 8003664:	1dfb      	adds	r3, r7, #7
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d0a4      	beq.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	0018      	movs	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	b004      	add	sp, #16
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08e      	sub	sp, #56	; 0x38
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003680:	f3ef 8310 	mrs	r3, PRIMASK
 8003684:	617b      	str	r3, [r7, #20]
  return(result);
 8003686:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003688:	637b      	str	r3, [r7, #52]	; 0x34
 800368a:	2301      	movs	r3, #1
 800368c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	f383 8810 	msr	PRIMASK, r3
}
 8003694:	46c0      	nop			; (mov r8, r8)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4926      	ldr	r1, [pc, #152]	; (800373c <UART_EndRxTransfer+0xc4>)
 80036a2:	400a      	ands	r2, r1
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f383 8810 	msr	PRIMASK, r3
}
 80036b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036b2:	f3ef 8310 	mrs	r3, PRIMASK
 80036b6:	623b      	str	r3, [r7, #32]
  return(result);
 80036b8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ba:	633b      	str	r3, [r7, #48]	; 0x30
 80036bc:	2301      	movs	r3, #1
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	f383 8810 	msr	PRIMASK, r3
}
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2101      	movs	r1, #1
 80036d4:	438a      	bics	r2, r1
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036da:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	f383 8810 	msr	PRIMASK, r3
}
 80036e2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d118      	bne.n	800371e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ec:	f3ef 8310 	mrs	r3, PRIMASK
 80036f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80036f2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f6:	2301      	movs	r3, #1
 80036f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f383 8810 	msr	PRIMASK, r3
}
 8003700:	46c0      	nop			; (mov r8, r8)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2110      	movs	r1, #16
 800370e:	438a      	bics	r2, r1
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003714:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f383 8810 	msr	PRIMASK, r3
}
 800371c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2280      	movs	r2, #128	; 0x80
 8003722:	2120      	movs	r1, #32
 8003724:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	46bd      	mov	sp, r7
 8003736:	b00e      	add	sp, #56	; 0x38
 8003738:	bd80      	pop	{r7, pc}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	fffffedf 	.word	0xfffffedf

08003740 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	225a      	movs	r2, #90	; 0x5a
 8003752:	2100      	movs	r1, #0
 8003754:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2252      	movs	r2, #82	; 0x52
 800375a:	2100      	movs	r1, #0
 800375c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	0018      	movs	r0, r3
 8003762:	f7ff fc27 	bl	8002fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	46bd      	mov	sp, r7
 800376a:	b004      	add	sp, #16
 800376c:	bd80      	pop	{r7, pc}

0800376e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b086      	sub	sp, #24
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003776:	f3ef 8310 	mrs	r3, PRIMASK
 800377a:	60bb      	str	r3, [r7, #8]
  return(result);
 800377c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	2301      	movs	r3, #1
 8003782:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f383 8810 	msr	PRIMASK, r3
}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2140      	movs	r1, #64	; 0x40
 8003798:	438a      	bics	r2, r1
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f383 8810 	msr	PRIMASK, r3
}
 80037a6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	0018      	movs	r0, r3
 80037b8:	f7ff fbf4 	bl	8002fa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b006      	add	sp, #24
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80037cc:	46c0      	nop			; (mov r8, r8)
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b002      	add	sp, #8
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80037dc:	4b09      	ldr	r3, [pc, #36]	; (8003804 <USB_DisableGlobalInt+0x30>)
 80037de:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2240      	movs	r2, #64	; 0x40
 80037e4:	5a9b      	ldrh	r3, [r3, r2]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	b292      	uxth	r2, r2
 80037ec:	43d2      	mvns	r2, r2
 80037ee:	b292      	uxth	r2, r2
 80037f0:	4013      	ands	r3, r2
 80037f2:	b299      	uxth	r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2240      	movs	r2, #64	; 0x40
 80037f8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	0018      	movs	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	b004      	add	sp, #16
 8003802:	bd80      	pop	{r7, pc}
 8003804:	0000bf80 	.word	0x0000bf80

08003808 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003808:	b084      	sub	sp, #16
 800380a:	b590      	push	{r4, r7, lr}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	2004      	movs	r0, #4
 8003814:	2410      	movs	r4, #16
 8003816:	1900      	adds	r0, r0, r4
 8003818:	2408      	movs	r4, #8
 800381a:	46a4      	mov	ip, r4
 800381c:	44bc      	add	ip, r7
 800381e:	4460      	add	r0, ip
 8003820:	6001      	str	r1, [r0, #0]
 8003822:	6042      	str	r2, [r0, #4]
 8003824:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2240      	movs	r2, #64	; 0x40
 800382a:	2101      	movs	r1, #1
 800382c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2240      	movs	r2, #64	; 0x40
 8003832:	2100      	movs	r1, #0
 8003834:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2244      	movs	r2, #68	; 0x44
 800383a:	2100      	movs	r1, #0
 800383c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2250      	movs	r2, #80	; 0x50
 8003842:	2100      	movs	r1, #0
 8003844:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	0018      	movs	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	b003      	add	sp, #12
 800384e:	bc90      	pop	{r4, r7}
 8003850:	bc08      	pop	{r3}
 8003852:	b004      	add	sp, #16
 8003854:	4718      	bx	r3

08003856 <memset>:
 8003856:	0003      	movs	r3, r0
 8003858:	1882      	adds	r2, r0, r2
 800385a:	4293      	cmp	r3, r2
 800385c:	d100      	bne.n	8003860 <memset+0xa>
 800385e:	4770      	bx	lr
 8003860:	7019      	strb	r1, [r3, #0]
 8003862:	3301      	adds	r3, #1
 8003864:	e7f9      	b.n	800385a <memset+0x4>
	...

08003868 <__libc_init_array>:
 8003868:	b570      	push	{r4, r5, r6, lr}
 800386a:	2600      	movs	r6, #0
 800386c:	4c0c      	ldr	r4, [pc, #48]	; (80038a0 <__libc_init_array+0x38>)
 800386e:	4d0d      	ldr	r5, [pc, #52]	; (80038a4 <__libc_init_array+0x3c>)
 8003870:	1b64      	subs	r4, r4, r5
 8003872:	10a4      	asrs	r4, r4, #2
 8003874:	42a6      	cmp	r6, r4
 8003876:	d109      	bne.n	800388c <__libc_init_array+0x24>
 8003878:	2600      	movs	r6, #0
 800387a:	f000 f819 	bl	80038b0 <_init>
 800387e:	4c0a      	ldr	r4, [pc, #40]	; (80038a8 <__libc_init_array+0x40>)
 8003880:	4d0a      	ldr	r5, [pc, #40]	; (80038ac <__libc_init_array+0x44>)
 8003882:	1b64      	subs	r4, r4, r5
 8003884:	10a4      	asrs	r4, r4, #2
 8003886:	42a6      	cmp	r6, r4
 8003888:	d105      	bne.n	8003896 <__libc_init_array+0x2e>
 800388a:	bd70      	pop	{r4, r5, r6, pc}
 800388c:	00b3      	lsls	r3, r6, #2
 800388e:	58eb      	ldr	r3, [r5, r3]
 8003890:	4798      	blx	r3
 8003892:	3601      	adds	r6, #1
 8003894:	e7ee      	b.n	8003874 <__libc_init_array+0xc>
 8003896:	00b3      	lsls	r3, r6, #2
 8003898:	58eb      	ldr	r3, [r5, r3]
 800389a:	4798      	blx	r3
 800389c:	3601      	adds	r6, #1
 800389e:	e7f2      	b.n	8003886 <__libc_init_array+0x1e>
 80038a0:	08003900 	.word	0x08003900
 80038a4:	08003900 	.word	0x08003900
 80038a8:	08003904 	.word	0x08003904
 80038ac:	08003900 	.word	0x08003900

080038b0 <_init>:
 80038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b6:	bc08      	pop	{r3}
 80038b8:	469e      	mov	lr, r3
 80038ba:	4770      	bx	lr

080038bc <_fini>:
 80038bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c2:	bc08      	pop	{r3}
 80038c4:	469e      	mov	lr, r3
 80038c6:	4770      	bx	lr
