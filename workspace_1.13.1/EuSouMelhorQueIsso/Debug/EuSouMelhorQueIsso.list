
EuSouMelhorQueIsso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005dac  08005dac  00015dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e80  08005e80  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08005e80  08005e80  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e80  08005e80  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e80  08005e80  00015e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e84  08005e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  2000005c  08005ee4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  08005ee4  00020644  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f1d  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000248c  00000000  00000000  00030fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  00033470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b27  00000000  00000000  000342c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa98  00000000  00000000  00034de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001328f  00000000  00000000  0004f87f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099de3  00000000  00000000  00062b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003948  00000000  00000000  000fc8f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0010023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005d94 	.word	0x08005d94

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08005d94 	.word	0x08005d94

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_f2iz>:
 8000244:	0241      	lsls	r1, r0, #9
 8000246:	0042      	lsls	r2, r0, #1
 8000248:	0fc3      	lsrs	r3, r0, #31
 800024a:	0a49      	lsrs	r1, r1, #9
 800024c:	2000      	movs	r0, #0
 800024e:	0e12      	lsrs	r2, r2, #24
 8000250:	2a7e      	cmp	r2, #126	; 0x7e
 8000252:	dd03      	ble.n	800025c <__aeabi_f2iz+0x18>
 8000254:	2a9d      	cmp	r2, #157	; 0x9d
 8000256:	dd02      	ble.n	800025e <__aeabi_f2iz+0x1a>
 8000258:	4a09      	ldr	r2, [pc, #36]	; (8000280 <__aeabi_f2iz+0x3c>)
 800025a:	1898      	adds	r0, r3, r2
 800025c:	4770      	bx	lr
 800025e:	2080      	movs	r0, #128	; 0x80
 8000260:	0400      	lsls	r0, r0, #16
 8000262:	4301      	orrs	r1, r0
 8000264:	2a95      	cmp	r2, #149	; 0x95
 8000266:	dc07      	bgt.n	8000278 <__aeabi_f2iz+0x34>
 8000268:	2096      	movs	r0, #150	; 0x96
 800026a:	1a82      	subs	r2, r0, r2
 800026c:	40d1      	lsrs	r1, r2
 800026e:	4248      	negs	r0, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d1f3      	bne.n	800025c <__aeabi_f2iz+0x18>
 8000274:	0008      	movs	r0, r1
 8000276:	e7f1      	b.n	800025c <__aeabi_f2iz+0x18>
 8000278:	3a96      	subs	r2, #150	; 0x96
 800027a:	4091      	lsls	r1, r2
 800027c:	e7f7      	b.n	800026e <__aeabi_f2iz+0x2a>
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	7fffffff 	.word	0x7fffffff

08000284 <__aeabi_dadd>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	464f      	mov	r7, r9
 8000288:	4646      	mov	r6, r8
 800028a:	46d6      	mov	lr, sl
 800028c:	0004      	movs	r4, r0
 800028e:	b5c0      	push	{r6, r7, lr}
 8000290:	001f      	movs	r7, r3
 8000292:	030b      	lsls	r3, r1, #12
 8000294:	0010      	movs	r0, r2
 8000296:	004e      	lsls	r6, r1, #1
 8000298:	0a5b      	lsrs	r3, r3, #9
 800029a:	0fcd      	lsrs	r5, r1, #31
 800029c:	0f61      	lsrs	r1, r4, #29
 800029e:	007a      	lsls	r2, r7, #1
 80002a0:	4319      	orrs	r1, r3
 80002a2:	00e3      	lsls	r3, r4, #3
 80002a4:	033c      	lsls	r4, r7, #12
 80002a6:	0fff      	lsrs	r7, r7, #31
 80002a8:	46bc      	mov	ip, r7
 80002aa:	0a64      	lsrs	r4, r4, #9
 80002ac:	0f47      	lsrs	r7, r0, #29
 80002ae:	4327      	orrs	r7, r4
 80002b0:	0d76      	lsrs	r6, r6, #21
 80002b2:	0d52      	lsrs	r2, r2, #21
 80002b4:	00c0      	lsls	r0, r0, #3
 80002b6:	46b9      	mov	r9, r7
 80002b8:	4680      	mov	r8, r0
 80002ba:	1ab7      	subs	r7, r6, r2
 80002bc:	4565      	cmp	r5, ip
 80002be:	d100      	bne.n	80002c2 <__aeabi_dadd+0x3e>
 80002c0:	e09b      	b.n	80003fa <__aeabi_dadd+0x176>
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	dc00      	bgt.n	80002c8 <__aeabi_dadd+0x44>
 80002c6:	e084      	b.n	80003d2 <__aeabi_dadd+0x14e>
 80002c8:	2a00      	cmp	r2, #0
 80002ca:	d100      	bne.n	80002ce <__aeabi_dadd+0x4a>
 80002cc:	e0be      	b.n	800044c <__aeabi_dadd+0x1c8>
 80002ce:	4ac8      	ldr	r2, [pc, #800]	; (80005f0 <__aeabi_dadd+0x36c>)
 80002d0:	4296      	cmp	r6, r2
 80002d2:	d100      	bne.n	80002d6 <__aeabi_dadd+0x52>
 80002d4:	e124      	b.n	8000520 <__aeabi_dadd+0x29c>
 80002d6:	2280      	movs	r2, #128	; 0x80
 80002d8:	464c      	mov	r4, r9
 80002da:	0412      	lsls	r2, r2, #16
 80002dc:	4314      	orrs	r4, r2
 80002de:	46a1      	mov	r9, r4
 80002e0:	2f38      	cmp	r7, #56	; 0x38
 80002e2:	dd00      	ble.n	80002e6 <__aeabi_dadd+0x62>
 80002e4:	e167      	b.n	80005b6 <__aeabi_dadd+0x332>
 80002e6:	2f1f      	cmp	r7, #31
 80002e8:	dd00      	ble.n	80002ec <__aeabi_dadd+0x68>
 80002ea:	e1d6      	b.n	800069a <__aeabi_dadd+0x416>
 80002ec:	2220      	movs	r2, #32
 80002ee:	464c      	mov	r4, r9
 80002f0:	1bd2      	subs	r2, r2, r7
 80002f2:	4094      	lsls	r4, r2
 80002f4:	46a2      	mov	sl, r4
 80002f6:	4644      	mov	r4, r8
 80002f8:	40fc      	lsrs	r4, r7
 80002fa:	0020      	movs	r0, r4
 80002fc:	4654      	mov	r4, sl
 80002fe:	4304      	orrs	r4, r0
 8000300:	4640      	mov	r0, r8
 8000302:	4090      	lsls	r0, r2
 8000304:	1e42      	subs	r2, r0, #1
 8000306:	4190      	sbcs	r0, r2
 8000308:	464a      	mov	r2, r9
 800030a:	40fa      	lsrs	r2, r7
 800030c:	4304      	orrs	r4, r0
 800030e:	1a89      	subs	r1, r1, r2
 8000310:	1b1c      	subs	r4, r3, r4
 8000312:	42a3      	cmp	r3, r4
 8000314:	4192      	sbcs	r2, r2
 8000316:	4252      	negs	r2, r2
 8000318:	1a8b      	subs	r3, r1, r2
 800031a:	469a      	mov	sl, r3
 800031c:	4653      	mov	r3, sl
 800031e:	021b      	lsls	r3, r3, #8
 8000320:	d400      	bmi.n	8000324 <__aeabi_dadd+0xa0>
 8000322:	e0d4      	b.n	80004ce <__aeabi_dadd+0x24a>
 8000324:	4653      	mov	r3, sl
 8000326:	025a      	lsls	r2, r3, #9
 8000328:	0a53      	lsrs	r3, r2, #9
 800032a:	469a      	mov	sl, r3
 800032c:	4653      	mov	r3, sl
 800032e:	2b00      	cmp	r3, #0
 8000330:	d100      	bne.n	8000334 <__aeabi_dadd+0xb0>
 8000332:	e104      	b.n	800053e <__aeabi_dadd+0x2ba>
 8000334:	4650      	mov	r0, sl
 8000336:	f001 f96b 	bl	8001610 <__clzsi2>
 800033a:	0003      	movs	r3, r0
 800033c:	3b08      	subs	r3, #8
 800033e:	2220      	movs	r2, #32
 8000340:	0020      	movs	r0, r4
 8000342:	1ad2      	subs	r2, r2, r3
 8000344:	4651      	mov	r1, sl
 8000346:	40d0      	lsrs	r0, r2
 8000348:	4099      	lsls	r1, r3
 800034a:	0002      	movs	r2, r0
 800034c:	409c      	lsls	r4, r3
 800034e:	430a      	orrs	r2, r1
 8000350:	42b3      	cmp	r3, r6
 8000352:	da00      	bge.n	8000356 <__aeabi_dadd+0xd2>
 8000354:	e102      	b.n	800055c <__aeabi_dadd+0x2d8>
 8000356:	1b9b      	subs	r3, r3, r6
 8000358:	1c59      	adds	r1, r3, #1
 800035a:	291f      	cmp	r1, #31
 800035c:	dd00      	ble.n	8000360 <__aeabi_dadd+0xdc>
 800035e:	e0a7      	b.n	80004b0 <__aeabi_dadd+0x22c>
 8000360:	2320      	movs	r3, #32
 8000362:	0010      	movs	r0, r2
 8000364:	0026      	movs	r6, r4
 8000366:	1a5b      	subs	r3, r3, r1
 8000368:	409c      	lsls	r4, r3
 800036a:	4098      	lsls	r0, r3
 800036c:	40ce      	lsrs	r6, r1
 800036e:	40ca      	lsrs	r2, r1
 8000370:	1e63      	subs	r3, r4, #1
 8000372:	419c      	sbcs	r4, r3
 8000374:	4330      	orrs	r0, r6
 8000376:	4692      	mov	sl, r2
 8000378:	2600      	movs	r6, #0
 800037a:	4304      	orrs	r4, r0
 800037c:	0763      	lsls	r3, r4, #29
 800037e:	d009      	beq.n	8000394 <__aeabi_dadd+0x110>
 8000380:	230f      	movs	r3, #15
 8000382:	4023      	ands	r3, r4
 8000384:	2b04      	cmp	r3, #4
 8000386:	d005      	beq.n	8000394 <__aeabi_dadd+0x110>
 8000388:	1d23      	adds	r3, r4, #4
 800038a:	42a3      	cmp	r3, r4
 800038c:	41a4      	sbcs	r4, r4
 800038e:	4264      	negs	r4, r4
 8000390:	44a2      	add	sl, r4
 8000392:	001c      	movs	r4, r3
 8000394:	4653      	mov	r3, sl
 8000396:	021b      	lsls	r3, r3, #8
 8000398:	d400      	bmi.n	800039c <__aeabi_dadd+0x118>
 800039a:	e09b      	b.n	80004d4 <__aeabi_dadd+0x250>
 800039c:	4b94      	ldr	r3, [pc, #592]	; (80005f0 <__aeabi_dadd+0x36c>)
 800039e:	3601      	adds	r6, #1
 80003a0:	429e      	cmp	r6, r3
 80003a2:	d100      	bne.n	80003a6 <__aeabi_dadd+0x122>
 80003a4:	e0b8      	b.n	8000518 <__aeabi_dadd+0x294>
 80003a6:	4653      	mov	r3, sl
 80003a8:	4992      	ldr	r1, [pc, #584]	; (80005f4 <__aeabi_dadd+0x370>)
 80003aa:	08e4      	lsrs	r4, r4, #3
 80003ac:	400b      	ands	r3, r1
 80003ae:	0019      	movs	r1, r3
 80003b0:	075b      	lsls	r3, r3, #29
 80003b2:	4323      	orrs	r3, r4
 80003b4:	0572      	lsls	r2, r6, #21
 80003b6:	024c      	lsls	r4, r1, #9
 80003b8:	0b24      	lsrs	r4, r4, #12
 80003ba:	0d52      	lsrs	r2, r2, #21
 80003bc:	0512      	lsls	r2, r2, #20
 80003be:	07ed      	lsls	r5, r5, #31
 80003c0:	4322      	orrs	r2, r4
 80003c2:	432a      	orrs	r2, r5
 80003c4:	0018      	movs	r0, r3
 80003c6:	0011      	movs	r1, r2
 80003c8:	bce0      	pop	{r5, r6, r7}
 80003ca:	46ba      	mov	sl, r7
 80003cc:	46b1      	mov	r9, r6
 80003ce:	46a8      	mov	r8, r5
 80003d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d048      	beq.n	8000468 <__aeabi_dadd+0x1e4>
 80003d6:	1b97      	subs	r7, r2, r6
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d000      	beq.n	80003de <__aeabi_dadd+0x15a>
 80003dc:	e10e      	b.n	80005fc <__aeabi_dadd+0x378>
 80003de:	000c      	movs	r4, r1
 80003e0:	431c      	orrs	r4, r3
 80003e2:	d100      	bne.n	80003e6 <__aeabi_dadd+0x162>
 80003e4:	e1b7      	b.n	8000756 <__aeabi_dadd+0x4d2>
 80003e6:	1e7c      	subs	r4, r7, #1
 80003e8:	2f01      	cmp	r7, #1
 80003ea:	d100      	bne.n	80003ee <__aeabi_dadd+0x16a>
 80003ec:	e226      	b.n	800083c <__aeabi_dadd+0x5b8>
 80003ee:	4d80      	ldr	r5, [pc, #512]	; (80005f0 <__aeabi_dadd+0x36c>)
 80003f0:	42af      	cmp	r7, r5
 80003f2:	d100      	bne.n	80003f6 <__aeabi_dadd+0x172>
 80003f4:	e1d5      	b.n	80007a2 <__aeabi_dadd+0x51e>
 80003f6:	0027      	movs	r7, r4
 80003f8:	e107      	b.n	800060a <__aeabi_dadd+0x386>
 80003fa:	2f00      	cmp	r7, #0
 80003fc:	dc00      	bgt.n	8000400 <__aeabi_dadd+0x17c>
 80003fe:	e0b2      	b.n	8000566 <__aeabi_dadd+0x2e2>
 8000400:	2a00      	cmp	r2, #0
 8000402:	d047      	beq.n	8000494 <__aeabi_dadd+0x210>
 8000404:	4a7a      	ldr	r2, [pc, #488]	; (80005f0 <__aeabi_dadd+0x36c>)
 8000406:	4296      	cmp	r6, r2
 8000408:	d100      	bne.n	800040c <__aeabi_dadd+0x188>
 800040a:	e089      	b.n	8000520 <__aeabi_dadd+0x29c>
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	464c      	mov	r4, r9
 8000410:	0412      	lsls	r2, r2, #16
 8000412:	4314      	orrs	r4, r2
 8000414:	46a1      	mov	r9, r4
 8000416:	2f38      	cmp	r7, #56	; 0x38
 8000418:	dc6b      	bgt.n	80004f2 <__aeabi_dadd+0x26e>
 800041a:	2f1f      	cmp	r7, #31
 800041c:	dc00      	bgt.n	8000420 <__aeabi_dadd+0x19c>
 800041e:	e16e      	b.n	80006fe <__aeabi_dadd+0x47a>
 8000420:	003a      	movs	r2, r7
 8000422:	4648      	mov	r0, r9
 8000424:	3a20      	subs	r2, #32
 8000426:	40d0      	lsrs	r0, r2
 8000428:	4684      	mov	ip, r0
 800042a:	2f20      	cmp	r7, #32
 800042c:	d007      	beq.n	800043e <__aeabi_dadd+0x1ba>
 800042e:	2240      	movs	r2, #64	; 0x40
 8000430:	4648      	mov	r0, r9
 8000432:	1bd2      	subs	r2, r2, r7
 8000434:	4090      	lsls	r0, r2
 8000436:	0002      	movs	r2, r0
 8000438:	4640      	mov	r0, r8
 800043a:	4310      	orrs	r0, r2
 800043c:	4680      	mov	r8, r0
 800043e:	4640      	mov	r0, r8
 8000440:	1e42      	subs	r2, r0, #1
 8000442:	4190      	sbcs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	0004      	movs	r4, r0
 8000448:	4314      	orrs	r4, r2
 800044a:	e057      	b.n	80004fc <__aeabi_dadd+0x278>
 800044c:	464a      	mov	r2, r9
 800044e:	4302      	orrs	r2, r0
 8000450:	d100      	bne.n	8000454 <__aeabi_dadd+0x1d0>
 8000452:	e103      	b.n	800065c <__aeabi_dadd+0x3d8>
 8000454:	1e7a      	subs	r2, r7, #1
 8000456:	2f01      	cmp	r7, #1
 8000458:	d100      	bne.n	800045c <__aeabi_dadd+0x1d8>
 800045a:	e193      	b.n	8000784 <__aeabi_dadd+0x500>
 800045c:	4c64      	ldr	r4, [pc, #400]	; (80005f0 <__aeabi_dadd+0x36c>)
 800045e:	42a7      	cmp	r7, r4
 8000460:	d100      	bne.n	8000464 <__aeabi_dadd+0x1e0>
 8000462:	e18a      	b.n	800077a <__aeabi_dadd+0x4f6>
 8000464:	0017      	movs	r7, r2
 8000466:	e73b      	b.n	80002e0 <__aeabi_dadd+0x5c>
 8000468:	4c63      	ldr	r4, [pc, #396]	; (80005f8 <__aeabi_dadd+0x374>)
 800046a:	1c72      	adds	r2, r6, #1
 800046c:	4222      	tst	r2, r4
 800046e:	d000      	beq.n	8000472 <__aeabi_dadd+0x1ee>
 8000470:	e0e0      	b.n	8000634 <__aeabi_dadd+0x3b0>
 8000472:	000a      	movs	r2, r1
 8000474:	431a      	orrs	r2, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d000      	beq.n	800047c <__aeabi_dadd+0x1f8>
 800047a:	e174      	b.n	8000766 <__aeabi_dadd+0x4e2>
 800047c:	2a00      	cmp	r2, #0
 800047e:	d100      	bne.n	8000482 <__aeabi_dadd+0x1fe>
 8000480:	e1d0      	b.n	8000824 <__aeabi_dadd+0x5a0>
 8000482:	464a      	mov	r2, r9
 8000484:	4302      	orrs	r2, r0
 8000486:	d000      	beq.n	800048a <__aeabi_dadd+0x206>
 8000488:	e1e3      	b.n	8000852 <__aeabi_dadd+0x5ce>
 800048a:	074a      	lsls	r2, r1, #29
 800048c:	08db      	lsrs	r3, r3, #3
 800048e:	4313      	orrs	r3, r2
 8000490:	08c9      	lsrs	r1, r1, #3
 8000492:	e029      	b.n	80004e8 <__aeabi_dadd+0x264>
 8000494:	464a      	mov	r2, r9
 8000496:	4302      	orrs	r2, r0
 8000498:	d100      	bne.n	800049c <__aeabi_dadd+0x218>
 800049a:	e17d      	b.n	8000798 <__aeabi_dadd+0x514>
 800049c:	1e7a      	subs	r2, r7, #1
 800049e:	2f01      	cmp	r7, #1
 80004a0:	d100      	bne.n	80004a4 <__aeabi_dadd+0x220>
 80004a2:	e0e0      	b.n	8000666 <__aeabi_dadd+0x3e2>
 80004a4:	4c52      	ldr	r4, [pc, #328]	; (80005f0 <__aeabi_dadd+0x36c>)
 80004a6:	42a7      	cmp	r7, r4
 80004a8:	d100      	bne.n	80004ac <__aeabi_dadd+0x228>
 80004aa:	e166      	b.n	800077a <__aeabi_dadd+0x4f6>
 80004ac:	0017      	movs	r7, r2
 80004ae:	e7b2      	b.n	8000416 <__aeabi_dadd+0x192>
 80004b0:	0010      	movs	r0, r2
 80004b2:	3b1f      	subs	r3, #31
 80004b4:	40d8      	lsrs	r0, r3
 80004b6:	2920      	cmp	r1, #32
 80004b8:	d003      	beq.n	80004c2 <__aeabi_dadd+0x23e>
 80004ba:	2340      	movs	r3, #64	; 0x40
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	409a      	lsls	r2, r3
 80004c0:	4314      	orrs	r4, r2
 80004c2:	1e63      	subs	r3, r4, #1
 80004c4:	419c      	sbcs	r4, r3
 80004c6:	2300      	movs	r3, #0
 80004c8:	2600      	movs	r6, #0
 80004ca:	469a      	mov	sl, r3
 80004cc:	4304      	orrs	r4, r0
 80004ce:	0763      	lsls	r3, r4, #29
 80004d0:	d000      	beq.n	80004d4 <__aeabi_dadd+0x250>
 80004d2:	e755      	b.n	8000380 <__aeabi_dadd+0xfc>
 80004d4:	4652      	mov	r2, sl
 80004d6:	08e3      	lsrs	r3, r4, #3
 80004d8:	0752      	lsls	r2, r2, #29
 80004da:	4313      	orrs	r3, r2
 80004dc:	4652      	mov	r2, sl
 80004de:	0037      	movs	r7, r6
 80004e0:	08d1      	lsrs	r1, r2, #3
 80004e2:	4a43      	ldr	r2, [pc, #268]	; (80005f0 <__aeabi_dadd+0x36c>)
 80004e4:	4297      	cmp	r7, r2
 80004e6:	d01f      	beq.n	8000528 <__aeabi_dadd+0x2a4>
 80004e8:	0309      	lsls	r1, r1, #12
 80004ea:	057a      	lsls	r2, r7, #21
 80004ec:	0b0c      	lsrs	r4, r1, #12
 80004ee:	0d52      	lsrs	r2, r2, #21
 80004f0:	e764      	b.n	80003bc <__aeabi_dadd+0x138>
 80004f2:	4642      	mov	r2, r8
 80004f4:	464c      	mov	r4, r9
 80004f6:	4314      	orrs	r4, r2
 80004f8:	1e62      	subs	r2, r4, #1
 80004fa:	4194      	sbcs	r4, r2
 80004fc:	18e4      	adds	r4, r4, r3
 80004fe:	429c      	cmp	r4, r3
 8000500:	4192      	sbcs	r2, r2
 8000502:	4252      	negs	r2, r2
 8000504:	4692      	mov	sl, r2
 8000506:	448a      	add	sl, r1
 8000508:	4653      	mov	r3, sl
 800050a:	021b      	lsls	r3, r3, #8
 800050c:	d5df      	bpl.n	80004ce <__aeabi_dadd+0x24a>
 800050e:	4b38      	ldr	r3, [pc, #224]	; (80005f0 <__aeabi_dadd+0x36c>)
 8000510:	3601      	adds	r6, #1
 8000512:	429e      	cmp	r6, r3
 8000514:	d000      	beq.n	8000518 <__aeabi_dadd+0x294>
 8000516:	e0b3      	b.n	8000680 <__aeabi_dadd+0x3fc>
 8000518:	0032      	movs	r2, r6
 800051a:	2400      	movs	r4, #0
 800051c:	2300      	movs	r3, #0
 800051e:	e74d      	b.n	80003bc <__aeabi_dadd+0x138>
 8000520:	074a      	lsls	r2, r1, #29
 8000522:	08db      	lsrs	r3, r3, #3
 8000524:	4313      	orrs	r3, r2
 8000526:	08c9      	lsrs	r1, r1, #3
 8000528:	001a      	movs	r2, r3
 800052a:	430a      	orrs	r2, r1
 800052c:	d100      	bne.n	8000530 <__aeabi_dadd+0x2ac>
 800052e:	e200      	b.n	8000932 <__aeabi_dadd+0x6ae>
 8000530:	2480      	movs	r4, #128	; 0x80
 8000532:	0324      	lsls	r4, r4, #12
 8000534:	430c      	orrs	r4, r1
 8000536:	0324      	lsls	r4, r4, #12
 8000538:	4a2d      	ldr	r2, [pc, #180]	; (80005f0 <__aeabi_dadd+0x36c>)
 800053a:	0b24      	lsrs	r4, r4, #12
 800053c:	e73e      	b.n	80003bc <__aeabi_dadd+0x138>
 800053e:	0020      	movs	r0, r4
 8000540:	f001 f866 	bl	8001610 <__clzsi2>
 8000544:	0003      	movs	r3, r0
 8000546:	3318      	adds	r3, #24
 8000548:	2b1f      	cmp	r3, #31
 800054a:	dc00      	bgt.n	800054e <__aeabi_dadd+0x2ca>
 800054c:	e6f7      	b.n	800033e <__aeabi_dadd+0xba>
 800054e:	0022      	movs	r2, r4
 8000550:	3808      	subs	r0, #8
 8000552:	4082      	lsls	r2, r0
 8000554:	2400      	movs	r4, #0
 8000556:	42b3      	cmp	r3, r6
 8000558:	db00      	blt.n	800055c <__aeabi_dadd+0x2d8>
 800055a:	e6fc      	b.n	8000356 <__aeabi_dadd+0xd2>
 800055c:	1af6      	subs	r6, r6, r3
 800055e:	4b25      	ldr	r3, [pc, #148]	; (80005f4 <__aeabi_dadd+0x370>)
 8000560:	401a      	ands	r2, r3
 8000562:	4692      	mov	sl, r2
 8000564:	e70a      	b.n	800037c <__aeabi_dadd+0xf8>
 8000566:	2f00      	cmp	r7, #0
 8000568:	d02b      	beq.n	80005c2 <__aeabi_dadd+0x33e>
 800056a:	1b97      	subs	r7, r2, r6
 800056c:	2e00      	cmp	r6, #0
 800056e:	d100      	bne.n	8000572 <__aeabi_dadd+0x2ee>
 8000570:	e0b8      	b.n	80006e4 <__aeabi_dadd+0x460>
 8000572:	4c1f      	ldr	r4, [pc, #124]	; (80005f0 <__aeabi_dadd+0x36c>)
 8000574:	42a2      	cmp	r2, r4
 8000576:	d100      	bne.n	800057a <__aeabi_dadd+0x2f6>
 8000578:	e11c      	b.n	80007b4 <__aeabi_dadd+0x530>
 800057a:	2480      	movs	r4, #128	; 0x80
 800057c:	0424      	lsls	r4, r4, #16
 800057e:	4321      	orrs	r1, r4
 8000580:	2f38      	cmp	r7, #56	; 0x38
 8000582:	dd00      	ble.n	8000586 <__aeabi_dadd+0x302>
 8000584:	e11e      	b.n	80007c4 <__aeabi_dadd+0x540>
 8000586:	2f1f      	cmp	r7, #31
 8000588:	dd00      	ble.n	800058c <__aeabi_dadd+0x308>
 800058a:	e19e      	b.n	80008ca <__aeabi_dadd+0x646>
 800058c:	2620      	movs	r6, #32
 800058e:	000c      	movs	r4, r1
 8000590:	1bf6      	subs	r6, r6, r7
 8000592:	0018      	movs	r0, r3
 8000594:	40b3      	lsls	r3, r6
 8000596:	40b4      	lsls	r4, r6
 8000598:	40f8      	lsrs	r0, r7
 800059a:	1e5e      	subs	r6, r3, #1
 800059c:	41b3      	sbcs	r3, r6
 800059e:	40f9      	lsrs	r1, r7
 80005a0:	4304      	orrs	r4, r0
 80005a2:	431c      	orrs	r4, r3
 80005a4:	4489      	add	r9, r1
 80005a6:	4444      	add	r4, r8
 80005a8:	4544      	cmp	r4, r8
 80005aa:	419b      	sbcs	r3, r3
 80005ac:	425b      	negs	r3, r3
 80005ae:	444b      	add	r3, r9
 80005b0:	469a      	mov	sl, r3
 80005b2:	0016      	movs	r6, r2
 80005b4:	e7a8      	b.n	8000508 <__aeabi_dadd+0x284>
 80005b6:	4642      	mov	r2, r8
 80005b8:	464c      	mov	r4, r9
 80005ba:	4314      	orrs	r4, r2
 80005bc:	1e62      	subs	r2, r4, #1
 80005be:	4194      	sbcs	r4, r2
 80005c0:	e6a6      	b.n	8000310 <__aeabi_dadd+0x8c>
 80005c2:	4c0d      	ldr	r4, [pc, #52]	; (80005f8 <__aeabi_dadd+0x374>)
 80005c4:	1c72      	adds	r2, r6, #1
 80005c6:	4222      	tst	r2, r4
 80005c8:	d000      	beq.n	80005cc <__aeabi_dadd+0x348>
 80005ca:	e0a8      	b.n	800071e <__aeabi_dadd+0x49a>
 80005cc:	000a      	movs	r2, r1
 80005ce:	431a      	orrs	r2, r3
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	d000      	beq.n	80005d6 <__aeabi_dadd+0x352>
 80005d4:	e10a      	b.n	80007ec <__aeabi_dadd+0x568>
 80005d6:	2a00      	cmp	r2, #0
 80005d8:	d100      	bne.n	80005dc <__aeabi_dadd+0x358>
 80005da:	e15e      	b.n	800089a <__aeabi_dadd+0x616>
 80005dc:	464a      	mov	r2, r9
 80005de:	4302      	orrs	r2, r0
 80005e0:	d000      	beq.n	80005e4 <__aeabi_dadd+0x360>
 80005e2:	e161      	b.n	80008a8 <__aeabi_dadd+0x624>
 80005e4:	074a      	lsls	r2, r1, #29
 80005e6:	08db      	lsrs	r3, r3, #3
 80005e8:	4313      	orrs	r3, r2
 80005ea:	08c9      	lsrs	r1, r1, #3
 80005ec:	e77c      	b.n	80004e8 <__aeabi_dadd+0x264>
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	000007ff 	.word	0x000007ff
 80005f4:	ff7fffff 	.word	0xff7fffff
 80005f8:	000007fe 	.word	0x000007fe
 80005fc:	4ccf      	ldr	r4, [pc, #828]	; (800093c <__aeabi_dadd+0x6b8>)
 80005fe:	42a2      	cmp	r2, r4
 8000600:	d100      	bne.n	8000604 <__aeabi_dadd+0x380>
 8000602:	e0ce      	b.n	80007a2 <__aeabi_dadd+0x51e>
 8000604:	2480      	movs	r4, #128	; 0x80
 8000606:	0424      	lsls	r4, r4, #16
 8000608:	4321      	orrs	r1, r4
 800060a:	2f38      	cmp	r7, #56	; 0x38
 800060c:	dc5b      	bgt.n	80006c6 <__aeabi_dadd+0x442>
 800060e:	2f1f      	cmp	r7, #31
 8000610:	dd00      	ble.n	8000614 <__aeabi_dadd+0x390>
 8000612:	e0dc      	b.n	80007ce <__aeabi_dadd+0x54a>
 8000614:	2520      	movs	r5, #32
 8000616:	000c      	movs	r4, r1
 8000618:	1bed      	subs	r5, r5, r7
 800061a:	001e      	movs	r6, r3
 800061c:	40ab      	lsls	r3, r5
 800061e:	40ac      	lsls	r4, r5
 8000620:	40fe      	lsrs	r6, r7
 8000622:	1e5d      	subs	r5, r3, #1
 8000624:	41ab      	sbcs	r3, r5
 8000626:	4334      	orrs	r4, r6
 8000628:	40f9      	lsrs	r1, r7
 800062a:	431c      	orrs	r4, r3
 800062c:	464b      	mov	r3, r9
 800062e:	1a5b      	subs	r3, r3, r1
 8000630:	4699      	mov	r9, r3
 8000632:	e04c      	b.n	80006ce <__aeabi_dadd+0x44a>
 8000634:	464a      	mov	r2, r9
 8000636:	1a1c      	subs	r4, r3, r0
 8000638:	1a88      	subs	r0, r1, r2
 800063a:	42a3      	cmp	r3, r4
 800063c:	4192      	sbcs	r2, r2
 800063e:	4252      	negs	r2, r2
 8000640:	4692      	mov	sl, r2
 8000642:	0002      	movs	r2, r0
 8000644:	4650      	mov	r0, sl
 8000646:	1a12      	subs	r2, r2, r0
 8000648:	4692      	mov	sl, r2
 800064a:	0212      	lsls	r2, r2, #8
 800064c:	d478      	bmi.n	8000740 <__aeabi_dadd+0x4bc>
 800064e:	4653      	mov	r3, sl
 8000650:	4323      	orrs	r3, r4
 8000652:	d000      	beq.n	8000656 <__aeabi_dadd+0x3d2>
 8000654:	e66a      	b.n	800032c <__aeabi_dadd+0xa8>
 8000656:	2100      	movs	r1, #0
 8000658:	2500      	movs	r5, #0
 800065a:	e745      	b.n	80004e8 <__aeabi_dadd+0x264>
 800065c:	074a      	lsls	r2, r1, #29
 800065e:	08db      	lsrs	r3, r3, #3
 8000660:	4313      	orrs	r3, r2
 8000662:	08c9      	lsrs	r1, r1, #3
 8000664:	e73d      	b.n	80004e2 <__aeabi_dadd+0x25e>
 8000666:	181c      	adds	r4, r3, r0
 8000668:	429c      	cmp	r4, r3
 800066a:	419b      	sbcs	r3, r3
 800066c:	4449      	add	r1, r9
 800066e:	468a      	mov	sl, r1
 8000670:	425b      	negs	r3, r3
 8000672:	449a      	add	sl, r3
 8000674:	4653      	mov	r3, sl
 8000676:	2601      	movs	r6, #1
 8000678:	021b      	lsls	r3, r3, #8
 800067a:	d400      	bmi.n	800067e <__aeabi_dadd+0x3fa>
 800067c:	e727      	b.n	80004ce <__aeabi_dadd+0x24a>
 800067e:	2602      	movs	r6, #2
 8000680:	4652      	mov	r2, sl
 8000682:	4baf      	ldr	r3, [pc, #700]	; (8000940 <__aeabi_dadd+0x6bc>)
 8000684:	2101      	movs	r1, #1
 8000686:	401a      	ands	r2, r3
 8000688:	0013      	movs	r3, r2
 800068a:	4021      	ands	r1, r4
 800068c:	0862      	lsrs	r2, r4, #1
 800068e:	430a      	orrs	r2, r1
 8000690:	07dc      	lsls	r4, r3, #31
 8000692:	085b      	lsrs	r3, r3, #1
 8000694:	469a      	mov	sl, r3
 8000696:	4314      	orrs	r4, r2
 8000698:	e670      	b.n	800037c <__aeabi_dadd+0xf8>
 800069a:	003a      	movs	r2, r7
 800069c:	464c      	mov	r4, r9
 800069e:	3a20      	subs	r2, #32
 80006a0:	40d4      	lsrs	r4, r2
 80006a2:	46a4      	mov	ip, r4
 80006a4:	2f20      	cmp	r7, #32
 80006a6:	d007      	beq.n	80006b8 <__aeabi_dadd+0x434>
 80006a8:	2240      	movs	r2, #64	; 0x40
 80006aa:	4648      	mov	r0, r9
 80006ac:	1bd2      	subs	r2, r2, r7
 80006ae:	4090      	lsls	r0, r2
 80006b0:	0002      	movs	r2, r0
 80006b2:	4640      	mov	r0, r8
 80006b4:	4310      	orrs	r0, r2
 80006b6:	4680      	mov	r8, r0
 80006b8:	4640      	mov	r0, r8
 80006ba:	1e42      	subs	r2, r0, #1
 80006bc:	4190      	sbcs	r0, r2
 80006be:	4662      	mov	r2, ip
 80006c0:	0004      	movs	r4, r0
 80006c2:	4314      	orrs	r4, r2
 80006c4:	e624      	b.n	8000310 <__aeabi_dadd+0x8c>
 80006c6:	4319      	orrs	r1, r3
 80006c8:	000c      	movs	r4, r1
 80006ca:	1e63      	subs	r3, r4, #1
 80006cc:	419c      	sbcs	r4, r3
 80006ce:	4643      	mov	r3, r8
 80006d0:	1b1c      	subs	r4, r3, r4
 80006d2:	45a0      	cmp	r8, r4
 80006d4:	419b      	sbcs	r3, r3
 80006d6:	4649      	mov	r1, r9
 80006d8:	425b      	negs	r3, r3
 80006da:	1acb      	subs	r3, r1, r3
 80006dc:	469a      	mov	sl, r3
 80006de:	4665      	mov	r5, ip
 80006e0:	0016      	movs	r6, r2
 80006e2:	e61b      	b.n	800031c <__aeabi_dadd+0x98>
 80006e4:	000c      	movs	r4, r1
 80006e6:	431c      	orrs	r4, r3
 80006e8:	d100      	bne.n	80006ec <__aeabi_dadd+0x468>
 80006ea:	e0c7      	b.n	800087c <__aeabi_dadd+0x5f8>
 80006ec:	1e7c      	subs	r4, r7, #1
 80006ee:	2f01      	cmp	r7, #1
 80006f0:	d100      	bne.n	80006f4 <__aeabi_dadd+0x470>
 80006f2:	e0f9      	b.n	80008e8 <__aeabi_dadd+0x664>
 80006f4:	4e91      	ldr	r6, [pc, #580]	; (800093c <__aeabi_dadd+0x6b8>)
 80006f6:	42b7      	cmp	r7, r6
 80006f8:	d05c      	beq.n	80007b4 <__aeabi_dadd+0x530>
 80006fa:	0027      	movs	r7, r4
 80006fc:	e740      	b.n	8000580 <__aeabi_dadd+0x2fc>
 80006fe:	2220      	movs	r2, #32
 8000700:	464c      	mov	r4, r9
 8000702:	4640      	mov	r0, r8
 8000704:	1bd2      	subs	r2, r2, r7
 8000706:	4094      	lsls	r4, r2
 8000708:	40f8      	lsrs	r0, r7
 800070a:	4304      	orrs	r4, r0
 800070c:	4640      	mov	r0, r8
 800070e:	4090      	lsls	r0, r2
 8000710:	1e42      	subs	r2, r0, #1
 8000712:	4190      	sbcs	r0, r2
 8000714:	464a      	mov	r2, r9
 8000716:	40fa      	lsrs	r2, r7
 8000718:	4304      	orrs	r4, r0
 800071a:	1889      	adds	r1, r1, r2
 800071c:	e6ee      	b.n	80004fc <__aeabi_dadd+0x278>
 800071e:	4c87      	ldr	r4, [pc, #540]	; (800093c <__aeabi_dadd+0x6b8>)
 8000720:	42a2      	cmp	r2, r4
 8000722:	d100      	bne.n	8000726 <__aeabi_dadd+0x4a2>
 8000724:	e6f9      	b.n	800051a <__aeabi_dadd+0x296>
 8000726:	1818      	adds	r0, r3, r0
 8000728:	4298      	cmp	r0, r3
 800072a:	419b      	sbcs	r3, r3
 800072c:	4449      	add	r1, r9
 800072e:	425b      	negs	r3, r3
 8000730:	18cb      	adds	r3, r1, r3
 8000732:	07dc      	lsls	r4, r3, #31
 8000734:	0840      	lsrs	r0, r0, #1
 8000736:	085b      	lsrs	r3, r3, #1
 8000738:	469a      	mov	sl, r3
 800073a:	0016      	movs	r6, r2
 800073c:	4304      	orrs	r4, r0
 800073e:	e6c6      	b.n	80004ce <__aeabi_dadd+0x24a>
 8000740:	4642      	mov	r2, r8
 8000742:	1ad4      	subs	r4, r2, r3
 8000744:	45a0      	cmp	r8, r4
 8000746:	4180      	sbcs	r0, r0
 8000748:	464b      	mov	r3, r9
 800074a:	4240      	negs	r0, r0
 800074c:	1a59      	subs	r1, r3, r1
 800074e:	1a0b      	subs	r3, r1, r0
 8000750:	469a      	mov	sl, r3
 8000752:	4665      	mov	r5, ip
 8000754:	e5ea      	b.n	800032c <__aeabi_dadd+0xa8>
 8000756:	464b      	mov	r3, r9
 8000758:	464a      	mov	r2, r9
 800075a:	08c0      	lsrs	r0, r0, #3
 800075c:	075b      	lsls	r3, r3, #29
 800075e:	4665      	mov	r5, ip
 8000760:	4303      	orrs	r3, r0
 8000762:	08d1      	lsrs	r1, r2, #3
 8000764:	e6bd      	b.n	80004e2 <__aeabi_dadd+0x25e>
 8000766:	2a00      	cmp	r2, #0
 8000768:	d000      	beq.n	800076c <__aeabi_dadd+0x4e8>
 800076a:	e08e      	b.n	800088a <__aeabi_dadd+0x606>
 800076c:	464b      	mov	r3, r9
 800076e:	4303      	orrs	r3, r0
 8000770:	d117      	bne.n	80007a2 <__aeabi_dadd+0x51e>
 8000772:	2180      	movs	r1, #128	; 0x80
 8000774:	2500      	movs	r5, #0
 8000776:	0309      	lsls	r1, r1, #12
 8000778:	e6da      	b.n	8000530 <__aeabi_dadd+0x2ac>
 800077a:	074a      	lsls	r2, r1, #29
 800077c:	08db      	lsrs	r3, r3, #3
 800077e:	4313      	orrs	r3, r2
 8000780:	08c9      	lsrs	r1, r1, #3
 8000782:	e6d1      	b.n	8000528 <__aeabi_dadd+0x2a4>
 8000784:	1a1c      	subs	r4, r3, r0
 8000786:	464a      	mov	r2, r9
 8000788:	42a3      	cmp	r3, r4
 800078a:	419b      	sbcs	r3, r3
 800078c:	1a89      	subs	r1, r1, r2
 800078e:	425b      	negs	r3, r3
 8000790:	1acb      	subs	r3, r1, r3
 8000792:	469a      	mov	sl, r3
 8000794:	2601      	movs	r6, #1
 8000796:	e5c1      	b.n	800031c <__aeabi_dadd+0x98>
 8000798:	074a      	lsls	r2, r1, #29
 800079a:	08db      	lsrs	r3, r3, #3
 800079c:	4313      	orrs	r3, r2
 800079e:	08c9      	lsrs	r1, r1, #3
 80007a0:	e69f      	b.n	80004e2 <__aeabi_dadd+0x25e>
 80007a2:	4643      	mov	r3, r8
 80007a4:	08d8      	lsrs	r0, r3, #3
 80007a6:	464b      	mov	r3, r9
 80007a8:	464a      	mov	r2, r9
 80007aa:	075b      	lsls	r3, r3, #29
 80007ac:	4665      	mov	r5, ip
 80007ae:	4303      	orrs	r3, r0
 80007b0:	08d1      	lsrs	r1, r2, #3
 80007b2:	e6b9      	b.n	8000528 <__aeabi_dadd+0x2a4>
 80007b4:	4643      	mov	r3, r8
 80007b6:	08d8      	lsrs	r0, r3, #3
 80007b8:	464b      	mov	r3, r9
 80007ba:	464a      	mov	r2, r9
 80007bc:	075b      	lsls	r3, r3, #29
 80007be:	4303      	orrs	r3, r0
 80007c0:	08d1      	lsrs	r1, r2, #3
 80007c2:	e6b1      	b.n	8000528 <__aeabi_dadd+0x2a4>
 80007c4:	4319      	orrs	r1, r3
 80007c6:	000c      	movs	r4, r1
 80007c8:	1e63      	subs	r3, r4, #1
 80007ca:	419c      	sbcs	r4, r3
 80007cc:	e6eb      	b.n	80005a6 <__aeabi_dadd+0x322>
 80007ce:	003c      	movs	r4, r7
 80007d0:	000d      	movs	r5, r1
 80007d2:	3c20      	subs	r4, #32
 80007d4:	40e5      	lsrs	r5, r4
 80007d6:	2f20      	cmp	r7, #32
 80007d8:	d003      	beq.n	80007e2 <__aeabi_dadd+0x55e>
 80007da:	2440      	movs	r4, #64	; 0x40
 80007dc:	1be4      	subs	r4, r4, r7
 80007de:	40a1      	lsls	r1, r4
 80007e0:	430b      	orrs	r3, r1
 80007e2:	001c      	movs	r4, r3
 80007e4:	1e63      	subs	r3, r4, #1
 80007e6:	419c      	sbcs	r4, r3
 80007e8:	432c      	orrs	r4, r5
 80007ea:	e770      	b.n	80006ce <__aeabi_dadd+0x44a>
 80007ec:	2a00      	cmp	r2, #0
 80007ee:	d0e1      	beq.n	80007b4 <__aeabi_dadd+0x530>
 80007f0:	464a      	mov	r2, r9
 80007f2:	4302      	orrs	r2, r0
 80007f4:	d0c1      	beq.n	800077a <__aeabi_dadd+0x4f6>
 80007f6:	074a      	lsls	r2, r1, #29
 80007f8:	08db      	lsrs	r3, r3, #3
 80007fa:	4313      	orrs	r3, r2
 80007fc:	2280      	movs	r2, #128	; 0x80
 80007fe:	08c9      	lsrs	r1, r1, #3
 8000800:	0312      	lsls	r2, r2, #12
 8000802:	4211      	tst	r1, r2
 8000804:	d008      	beq.n	8000818 <__aeabi_dadd+0x594>
 8000806:	4648      	mov	r0, r9
 8000808:	08c4      	lsrs	r4, r0, #3
 800080a:	4214      	tst	r4, r2
 800080c:	d104      	bne.n	8000818 <__aeabi_dadd+0x594>
 800080e:	4643      	mov	r3, r8
 8000810:	0021      	movs	r1, r4
 8000812:	08db      	lsrs	r3, r3, #3
 8000814:	0742      	lsls	r2, r0, #29
 8000816:	4313      	orrs	r3, r2
 8000818:	0f5a      	lsrs	r2, r3, #29
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	0752      	lsls	r2, r2, #29
 800081e:	08db      	lsrs	r3, r3, #3
 8000820:	4313      	orrs	r3, r2
 8000822:	e681      	b.n	8000528 <__aeabi_dadd+0x2a4>
 8000824:	464b      	mov	r3, r9
 8000826:	4303      	orrs	r3, r0
 8000828:	d100      	bne.n	800082c <__aeabi_dadd+0x5a8>
 800082a:	e714      	b.n	8000656 <__aeabi_dadd+0x3d2>
 800082c:	464b      	mov	r3, r9
 800082e:	464a      	mov	r2, r9
 8000830:	08c0      	lsrs	r0, r0, #3
 8000832:	075b      	lsls	r3, r3, #29
 8000834:	4665      	mov	r5, ip
 8000836:	4303      	orrs	r3, r0
 8000838:	08d1      	lsrs	r1, r2, #3
 800083a:	e655      	b.n	80004e8 <__aeabi_dadd+0x264>
 800083c:	1ac4      	subs	r4, r0, r3
 800083e:	45a0      	cmp	r8, r4
 8000840:	4180      	sbcs	r0, r0
 8000842:	464b      	mov	r3, r9
 8000844:	4240      	negs	r0, r0
 8000846:	1a59      	subs	r1, r3, r1
 8000848:	1a0b      	subs	r3, r1, r0
 800084a:	469a      	mov	sl, r3
 800084c:	4665      	mov	r5, ip
 800084e:	2601      	movs	r6, #1
 8000850:	e564      	b.n	800031c <__aeabi_dadd+0x98>
 8000852:	1a1c      	subs	r4, r3, r0
 8000854:	464a      	mov	r2, r9
 8000856:	42a3      	cmp	r3, r4
 8000858:	4180      	sbcs	r0, r0
 800085a:	1a8a      	subs	r2, r1, r2
 800085c:	4240      	negs	r0, r0
 800085e:	1a12      	subs	r2, r2, r0
 8000860:	4692      	mov	sl, r2
 8000862:	0212      	lsls	r2, r2, #8
 8000864:	d549      	bpl.n	80008fa <__aeabi_dadd+0x676>
 8000866:	4642      	mov	r2, r8
 8000868:	1ad4      	subs	r4, r2, r3
 800086a:	45a0      	cmp	r8, r4
 800086c:	4180      	sbcs	r0, r0
 800086e:	464b      	mov	r3, r9
 8000870:	4240      	negs	r0, r0
 8000872:	1a59      	subs	r1, r3, r1
 8000874:	1a0b      	subs	r3, r1, r0
 8000876:	469a      	mov	sl, r3
 8000878:	4665      	mov	r5, ip
 800087a:	e57f      	b.n	800037c <__aeabi_dadd+0xf8>
 800087c:	464b      	mov	r3, r9
 800087e:	464a      	mov	r2, r9
 8000880:	08c0      	lsrs	r0, r0, #3
 8000882:	075b      	lsls	r3, r3, #29
 8000884:	4303      	orrs	r3, r0
 8000886:	08d1      	lsrs	r1, r2, #3
 8000888:	e62b      	b.n	80004e2 <__aeabi_dadd+0x25e>
 800088a:	464a      	mov	r2, r9
 800088c:	08db      	lsrs	r3, r3, #3
 800088e:	4302      	orrs	r2, r0
 8000890:	d138      	bne.n	8000904 <__aeabi_dadd+0x680>
 8000892:	074a      	lsls	r2, r1, #29
 8000894:	4313      	orrs	r3, r2
 8000896:	08c9      	lsrs	r1, r1, #3
 8000898:	e646      	b.n	8000528 <__aeabi_dadd+0x2a4>
 800089a:	464b      	mov	r3, r9
 800089c:	464a      	mov	r2, r9
 800089e:	08c0      	lsrs	r0, r0, #3
 80008a0:	075b      	lsls	r3, r3, #29
 80008a2:	4303      	orrs	r3, r0
 80008a4:	08d1      	lsrs	r1, r2, #3
 80008a6:	e61f      	b.n	80004e8 <__aeabi_dadd+0x264>
 80008a8:	181c      	adds	r4, r3, r0
 80008aa:	429c      	cmp	r4, r3
 80008ac:	419b      	sbcs	r3, r3
 80008ae:	4449      	add	r1, r9
 80008b0:	468a      	mov	sl, r1
 80008b2:	425b      	negs	r3, r3
 80008b4:	449a      	add	sl, r3
 80008b6:	4653      	mov	r3, sl
 80008b8:	021b      	lsls	r3, r3, #8
 80008ba:	d400      	bmi.n	80008be <__aeabi_dadd+0x63a>
 80008bc:	e607      	b.n	80004ce <__aeabi_dadd+0x24a>
 80008be:	4652      	mov	r2, sl
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <__aeabi_dadd+0x6bc>)
 80008c2:	2601      	movs	r6, #1
 80008c4:	401a      	ands	r2, r3
 80008c6:	4692      	mov	sl, r2
 80008c8:	e601      	b.n	80004ce <__aeabi_dadd+0x24a>
 80008ca:	003c      	movs	r4, r7
 80008cc:	000e      	movs	r6, r1
 80008ce:	3c20      	subs	r4, #32
 80008d0:	40e6      	lsrs	r6, r4
 80008d2:	2f20      	cmp	r7, #32
 80008d4:	d003      	beq.n	80008de <__aeabi_dadd+0x65a>
 80008d6:	2440      	movs	r4, #64	; 0x40
 80008d8:	1be4      	subs	r4, r4, r7
 80008da:	40a1      	lsls	r1, r4
 80008dc:	430b      	orrs	r3, r1
 80008de:	001c      	movs	r4, r3
 80008e0:	1e63      	subs	r3, r4, #1
 80008e2:	419c      	sbcs	r4, r3
 80008e4:	4334      	orrs	r4, r6
 80008e6:	e65e      	b.n	80005a6 <__aeabi_dadd+0x322>
 80008e8:	4443      	add	r3, r8
 80008ea:	4283      	cmp	r3, r0
 80008ec:	4180      	sbcs	r0, r0
 80008ee:	4449      	add	r1, r9
 80008f0:	468a      	mov	sl, r1
 80008f2:	4240      	negs	r0, r0
 80008f4:	001c      	movs	r4, r3
 80008f6:	4482      	add	sl, r0
 80008f8:	e6bc      	b.n	8000674 <__aeabi_dadd+0x3f0>
 80008fa:	4653      	mov	r3, sl
 80008fc:	4323      	orrs	r3, r4
 80008fe:	d100      	bne.n	8000902 <__aeabi_dadd+0x67e>
 8000900:	e6a9      	b.n	8000656 <__aeabi_dadd+0x3d2>
 8000902:	e5e4      	b.n	80004ce <__aeabi_dadd+0x24a>
 8000904:	074a      	lsls	r2, r1, #29
 8000906:	4313      	orrs	r3, r2
 8000908:	2280      	movs	r2, #128	; 0x80
 800090a:	08c9      	lsrs	r1, r1, #3
 800090c:	0312      	lsls	r2, r2, #12
 800090e:	4211      	tst	r1, r2
 8000910:	d009      	beq.n	8000926 <__aeabi_dadd+0x6a2>
 8000912:	4648      	mov	r0, r9
 8000914:	08c4      	lsrs	r4, r0, #3
 8000916:	4214      	tst	r4, r2
 8000918:	d105      	bne.n	8000926 <__aeabi_dadd+0x6a2>
 800091a:	4643      	mov	r3, r8
 800091c:	4665      	mov	r5, ip
 800091e:	0021      	movs	r1, r4
 8000920:	08db      	lsrs	r3, r3, #3
 8000922:	0742      	lsls	r2, r0, #29
 8000924:	4313      	orrs	r3, r2
 8000926:	0f5a      	lsrs	r2, r3, #29
 8000928:	00db      	lsls	r3, r3, #3
 800092a:	08db      	lsrs	r3, r3, #3
 800092c:	0752      	lsls	r2, r2, #29
 800092e:	4313      	orrs	r3, r2
 8000930:	e5fa      	b.n	8000528 <__aeabi_dadd+0x2a4>
 8000932:	2300      	movs	r3, #0
 8000934:	4a01      	ldr	r2, [pc, #4]	; (800093c <__aeabi_dadd+0x6b8>)
 8000936:	001c      	movs	r4, r3
 8000938:	e540      	b.n	80003bc <__aeabi_dadd+0x138>
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	000007ff 	.word	0x000007ff
 8000940:	ff7fffff 	.word	0xff7fffff

08000944 <__aeabi_ddiv>:
 8000944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000946:	4657      	mov	r7, sl
 8000948:	464e      	mov	r6, r9
 800094a:	4645      	mov	r5, r8
 800094c:	46de      	mov	lr, fp
 800094e:	b5e0      	push	{r5, r6, r7, lr}
 8000950:	030c      	lsls	r4, r1, #12
 8000952:	001f      	movs	r7, r3
 8000954:	004b      	lsls	r3, r1, #1
 8000956:	4681      	mov	r9, r0
 8000958:	4692      	mov	sl, r2
 800095a:	0005      	movs	r5, r0
 800095c:	b085      	sub	sp, #20
 800095e:	0b24      	lsrs	r4, r4, #12
 8000960:	0d5b      	lsrs	r3, r3, #21
 8000962:	0fce      	lsrs	r6, r1, #31
 8000964:	2b00      	cmp	r3, #0
 8000966:	d100      	bne.n	800096a <__aeabi_ddiv+0x26>
 8000968:	e152      	b.n	8000c10 <__aeabi_ddiv+0x2cc>
 800096a:	4ad2      	ldr	r2, [pc, #840]	; (8000cb4 <__aeabi_ddiv+0x370>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d100      	bne.n	8000972 <__aeabi_ddiv+0x2e>
 8000970:	e16e      	b.n	8000c50 <__aeabi_ddiv+0x30c>
 8000972:	0f42      	lsrs	r2, r0, #29
 8000974:	00e4      	lsls	r4, r4, #3
 8000976:	4314      	orrs	r4, r2
 8000978:	2280      	movs	r2, #128	; 0x80
 800097a:	0412      	lsls	r2, r2, #16
 800097c:	4322      	orrs	r2, r4
 800097e:	4690      	mov	r8, r2
 8000980:	4acd      	ldr	r2, [pc, #820]	; (8000cb8 <__aeabi_ddiv+0x374>)
 8000982:	00c5      	lsls	r5, r0, #3
 8000984:	4693      	mov	fp, r2
 8000986:	449b      	add	fp, r3
 8000988:	2300      	movs	r3, #0
 800098a:	4699      	mov	r9, r3
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	033c      	lsls	r4, r7, #12
 8000990:	007b      	lsls	r3, r7, #1
 8000992:	4650      	mov	r0, sl
 8000994:	0b24      	lsrs	r4, r4, #12
 8000996:	0d5b      	lsrs	r3, r3, #21
 8000998:	0fff      	lsrs	r7, r7, #31
 800099a:	2b00      	cmp	r3, #0
 800099c:	d100      	bne.n	80009a0 <__aeabi_ddiv+0x5c>
 800099e:	e11a      	b.n	8000bd6 <__aeabi_ddiv+0x292>
 80009a0:	4ac4      	ldr	r2, [pc, #784]	; (8000cb4 <__aeabi_ddiv+0x370>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d100      	bne.n	80009a8 <__aeabi_ddiv+0x64>
 80009a6:	e15e      	b.n	8000c66 <__aeabi_ddiv+0x322>
 80009a8:	0f42      	lsrs	r2, r0, #29
 80009aa:	00e4      	lsls	r4, r4, #3
 80009ac:	4322      	orrs	r2, r4
 80009ae:	2480      	movs	r4, #128	; 0x80
 80009b0:	0424      	lsls	r4, r4, #16
 80009b2:	4314      	orrs	r4, r2
 80009b4:	4ac0      	ldr	r2, [pc, #768]	; (8000cb8 <__aeabi_ddiv+0x374>)
 80009b6:	00c1      	lsls	r1, r0, #3
 80009b8:	4694      	mov	ip, r2
 80009ba:	465a      	mov	r2, fp
 80009bc:	4463      	add	r3, ip
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	469b      	mov	fp, r3
 80009c2:	2000      	movs	r0, #0
 80009c4:	0033      	movs	r3, r6
 80009c6:	407b      	eors	r3, r7
 80009c8:	469a      	mov	sl, r3
 80009ca:	464b      	mov	r3, r9
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	d827      	bhi.n	8000a20 <__aeabi_ddiv+0xdc>
 80009d0:	4aba      	ldr	r2, [pc, #744]	; (8000cbc <__aeabi_ddiv+0x378>)
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	58d3      	ldr	r3, [r2, r3]
 80009d6:	469f      	mov	pc, r3
 80009d8:	46b2      	mov	sl, r6
 80009da:	9b00      	ldr	r3, [sp, #0]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d016      	beq.n	8000a0e <__aeabi_ddiv+0xca>
 80009e0:	2b03      	cmp	r3, #3
 80009e2:	d100      	bne.n	80009e6 <__aeabi_ddiv+0xa2>
 80009e4:	e287      	b.n	8000ef6 <__aeabi_ddiv+0x5b2>
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d000      	beq.n	80009ec <__aeabi_ddiv+0xa8>
 80009ea:	e0d5      	b.n	8000b98 <__aeabi_ddiv+0x254>
 80009ec:	2300      	movs	r3, #0
 80009ee:	2200      	movs	r2, #0
 80009f0:	2500      	movs	r5, #0
 80009f2:	051b      	lsls	r3, r3, #20
 80009f4:	4313      	orrs	r3, r2
 80009f6:	4652      	mov	r2, sl
 80009f8:	07d2      	lsls	r2, r2, #31
 80009fa:	4313      	orrs	r3, r2
 80009fc:	0028      	movs	r0, r5
 80009fe:	0019      	movs	r1, r3
 8000a00:	b005      	add	sp, #20
 8000a02:	bcf0      	pop	{r4, r5, r6, r7}
 8000a04:	46bb      	mov	fp, r7
 8000a06:	46b2      	mov	sl, r6
 8000a08:	46a9      	mov	r9, r5
 8000a0a:	46a0      	mov	r8, r4
 8000a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2500      	movs	r5, #0
 8000a12:	4ba8      	ldr	r3, [pc, #672]	; (8000cb4 <__aeabi_ddiv+0x370>)
 8000a14:	e7ed      	b.n	80009f2 <__aeabi_ddiv+0xae>
 8000a16:	46ba      	mov	sl, r7
 8000a18:	46a0      	mov	r8, r4
 8000a1a:	000d      	movs	r5, r1
 8000a1c:	9000      	str	r0, [sp, #0]
 8000a1e:	e7dc      	b.n	80009da <__aeabi_ddiv+0x96>
 8000a20:	4544      	cmp	r4, r8
 8000a22:	d200      	bcs.n	8000a26 <__aeabi_ddiv+0xe2>
 8000a24:	e1c4      	b.n	8000db0 <__aeabi_ddiv+0x46c>
 8000a26:	d100      	bne.n	8000a2a <__aeabi_ddiv+0xe6>
 8000a28:	e1bf      	b.n	8000daa <__aeabi_ddiv+0x466>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	425b      	negs	r3, r3
 8000a2e:	469c      	mov	ip, r3
 8000a30:	002e      	movs	r6, r5
 8000a32:	4640      	mov	r0, r8
 8000a34:	2500      	movs	r5, #0
 8000a36:	44e3      	add	fp, ip
 8000a38:	0223      	lsls	r3, r4, #8
 8000a3a:	0e0c      	lsrs	r4, r1, #24
 8000a3c:	431c      	orrs	r4, r3
 8000a3e:	0c1b      	lsrs	r3, r3, #16
 8000a40:	4699      	mov	r9, r3
 8000a42:	0423      	lsls	r3, r4, #16
 8000a44:	020a      	lsls	r2, r1, #8
 8000a46:	0c1f      	lsrs	r7, r3, #16
 8000a48:	4649      	mov	r1, r9
 8000a4a:	9200      	str	r2, [sp, #0]
 8000a4c:	9701      	str	r7, [sp, #4]
 8000a4e:	f7ff fbf3 	bl	8000238 <__aeabi_uidivmod>
 8000a52:	0002      	movs	r2, r0
 8000a54:	437a      	muls	r2, r7
 8000a56:	040b      	lsls	r3, r1, #16
 8000a58:	0c31      	lsrs	r1, r6, #16
 8000a5a:	4680      	mov	r8, r0
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	428a      	cmp	r2, r1
 8000a60:	d907      	bls.n	8000a72 <__aeabi_ddiv+0x12e>
 8000a62:	2301      	movs	r3, #1
 8000a64:	425b      	negs	r3, r3
 8000a66:	469c      	mov	ip, r3
 8000a68:	1909      	adds	r1, r1, r4
 8000a6a:	44e0      	add	r8, ip
 8000a6c:	428c      	cmp	r4, r1
 8000a6e:	d800      	bhi.n	8000a72 <__aeabi_ddiv+0x12e>
 8000a70:	e201      	b.n	8000e76 <__aeabi_ddiv+0x532>
 8000a72:	1a88      	subs	r0, r1, r2
 8000a74:	4649      	mov	r1, r9
 8000a76:	f7ff fbdf 	bl	8000238 <__aeabi_uidivmod>
 8000a7a:	9a01      	ldr	r2, [sp, #4]
 8000a7c:	0436      	lsls	r6, r6, #16
 8000a7e:	4342      	muls	r2, r0
 8000a80:	0409      	lsls	r1, r1, #16
 8000a82:	0c36      	lsrs	r6, r6, #16
 8000a84:	0003      	movs	r3, r0
 8000a86:	430e      	orrs	r6, r1
 8000a88:	42b2      	cmp	r2, r6
 8000a8a:	d904      	bls.n	8000a96 <__aeabi_ddiv+0x152>
 8000a8c:	1936      	adds	r6, r6, r4
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	42b4      	cmp	r4, r6
 8000a92:	d800      	bhi.n	8000a96 <__aeabi_ddiv+0x152>
 8000a94:	e1e9      	b.n	8000e6a <__aeabi_ddiv+0x526>
 8000a96:	1ab0      	subs	r0, r6, r2
 8000a98:	4642      	mov	r2, r8
 8000a9a:	9e00      	ldr	r6, [sp, #0]
 8000a9c:	0412      	lsls	r2, r2, #16
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	0c33      	lsrs	r3, r6, #16
 8000aa2:	001f      	movs	r7, r3
 8000aa4:	0c11      	lsrs	r1, r2, #16
 8000aa6:	4690      	mov	r8, r2
 8000aa8:	9302      	str	r3, [sp, #8]
 8000aaa:	0413      	lsls	r3, r2, #16
 8000aac:	0432      	lsls	r2, r6, #16
 8000aae:	0c16      	lsrs	r6, r2, #16
 8000ab0:	0032      	movs	r2, r6
 8000ab2:	0c1b      	lsrs	r3, r3, #16
 8000ab4:	435a      	muls	r2, r3
 8000ab6:	9603      	str	r6, [sp, #12]
 8000ab8:	437b      	muls	r3, r7
 8000aba:	434e      	muls	r6, r1
 8000abc:	4379      	muls	r1, r7
 8000abe:	0c17      	lsrs	r7, r2, #16
 8000ac0:	46bc      	mov	ip, r7
 8000ac2:	199b      	adds	r3, r3, r6
 8000ac4:	4463      	add	r3, ip
 8000ac6:	429e      	cmp	r6, r3
 8000ac8:	d903      	bls.n	8000ad2 <__aeabi_ddiv+0x18e>
 8000aca:	2680      	movs	r6, #128	; 0x80
 8000acc:	0276      	lsls	r6, r6, #9
 8000ace:	46b4      	mov	ip, r6
 8000ad0:	4461      	add	r1, ip
 8000ad2:	0c1e      	lsrs	r6, r3, #16
 8000ad4:	1871      	adds	r1, r6, r1
 8000ad6:	0416      	lsls	r6, r2, #16
 8000ad8:	041b      	lsls	r3, r3, #16
 8000ada:	0c36      	lsrs	r6, r6, #16
 8000adc:	199e      	adds	r6, r3, r6
 8000ade:	4288      	cmp	r0, r1
 8000ae0:	d302      	bcc.n	8000ae8 <__aeabi_ddiv+0x1a4>
 8000ae2:	d112      	bne.n	8000b0a <__aeabi_ddiv+0x1c6>
 8000ae4:	42b5      	cmp	r5, r6
 8000ae6:	d210      	bcs.n	8000b0a <__aeabi_ddiv+0x1c6>
 8000ae8:	4643      	mov	r3, r8
 8000aea:	1e5a      	subs	r2, r3, #1
 8000aec:	9b00      	ldr	r3, [sp, #0]
 8000aee:	469c      	mov	ip, r3
 8000af0:	4465      	add	r5, ip
 8000af2:	001f      	movs	r7, r3
 8000af4:	429d      	cmp	r5, r3
 8000af6:	419b      	sbcs	r3, r3
 8000af8:	425b      	negs	r3, r3
 8000afa:	191b      	adds	r3, r3, r4
 8000afc:	18c0      	adds	r0, r0, r3
 8000afe:	4284      	cmp	r4, r0
 8000b00:	d200      	bcs.n	8000b04 <__aeabi_ddiv+0x1c0>
 8000b02:	e19e      	b.n	8000e42 <__aeabi_ddiv+0x4fe>
 8000b04:	d100      	bne.n	8000b08 <__aeabi_ddiv+0x1c4>
 8000b06:	e199      	b.n	8000e3c <__aeabi_ddiv+0x4f8>
 8000b08:	4690      	mov	r8, r2
 8000b0a:	1bae      	subs	r6, r5, r6
 8000b0c:	42b5      	cmp	r5, r6
 8000b0e:	41ad      	sbcs	r5, r5
 8000b10:	1a40      	subs	r0, r0, r1
 8000b12:	426d      	negs	r5, r5
 8000b14:	1b40      	subs	r0, r0, r5
 8000b16:	4284      	cmp	r4, r0
 8000b18:	d100      	bne.n	8000b1c <__aeabi_ddiv+0x1d8>
 8000b1a:	e1d2      	b.n	8000ec2 <__aeabi_ddiv+0x57e>
 8000b1c:	4649      	mov	r1, r9
 8000b1e:	f7ff fb8b 	bl	8000238 <__aeabi_uidivmod>
 8000b22:	9a01      	ldr	r2, [sp, #4]
 8000b24:	040b      	lsls	r3, r1, #16
 8000b26:	4342      	muls	r2, r0
 8000b28:	0c31      	lsrs	r1, r6, #16
 8000b2a:	0005      	movs	r5, r0
 8000b2c:	4319      	orrs	r1, r3
 8000b2e:	428a      	cmp	r2, r1
 8000b30:	d900      	bls.n	8000b34 <__aeabi_ddiv+0x1f0>
 8000b32:	e16c      	b.n	8000e0e <__aeabi_ddiv+0x4ca>
 8000b34:	1a88      	subs	r0, r1, r2
 8000b36:	4649      	mov	r1, r9
 8000b38:	f7ff fb7e 	bl	8000238 <__aeabi_uidivmod>
 8000b3c:	9a01      	ldr	r2, [sp, #4]
 8000b3e:	0436      	lsls	r6, r6, #16
 8000b40:	4342      	muls	r2, r0
 8000b42:	0409      	lsls	r1, r1, #16
 8000b44:	0c36      	lsrs	r6, r6, #16
 8000b46:	0003      	movs	r3, r0
 8000b48:	430e      	orrs	r6, r1
 8000b4a:	42b2      	cmp	r2, r6
 8000b4c:	d900      	bls.n	8000b50 <__aeabi_ddiv+0x20c>
 8000b4e:	e153      	b.n	8000df8 <__aeabi_ddiv+0x4b4>
 8000b50:	9803      	ldr	r0, [sp, #12]
 8000b52:	1ab6      	subs	r6, r6, r2
 8000b54:	0002      	movs	r2, r0
 8000b56:	042d      	lsls	r5, r5, #16
 8000b58:	431d      	orrs	r5, r3
 8000b5a:	9f02      	ldr	r7, [sp, #8]
 8000b5c:	042b      	lsls	r3, r5, #16
 8000b5e:	0c1b      	lsrs	r3, r3, #16
 8000b60:	435a      	muls	r2, r3
 8000b62:	437b      	muls	r3, r7
 8000b64:	469c      	mov	ip, r3
 8000b66:	0c29      	lsrs	r1, r5, #16
 8000b68:	4348      	muls	r0, r1
 8000b6a:	0c13      	lsrs	r3, r2, #16
 8000b6c:	4484      	add	ip, r0
 8000b6e:	4463      	add	r3, ip
 8000b70:	4379      	muls	r1, r7
 8000b72:	4298      	cmp	r0, r3
 8000b74:	d903      	bls.n	8000b7e <__aeabi_ddiv+0x23a>
 8000b76:	2080      	movs	r0, #128	; 0x80
 8000b78:	0240      	lsls	r0, r0, #9
 8000b7a:	4684      	mov	ip, r0
 8000b7c:	4461      	add	r1, ip
 8000b7e:	0c18      	lsrs	r0, r3, #16
 8000b80:	0412      	lsls	r2, r2, #16
 8000b82:	041b      	lsls	r3, r3, #16
 8000b84:	0c12      	lsrs	r2, r2, #16
 8000b86:	1840      	adds	r0, r0, r1
 8000b88:	189b      	adds	r3, r3, r2
 8000b8a:	4286      	cmp	r6, r0
 8000b8c:	d200      	bcs.n	8000b90 <__aeabi_ddiv+0x24c>
 8000b8e:	e100      	b.n	8000d92 <__aeabi_ddiv+0x44e>
 8000b90:	d100      	bne.n	8000b94 <__aeabi_ddiv+0x250>
 8000b92:	e0fb      	b.n	8000d8c <__aeabi_ddiv+0x448>
 8000b94:	2301      	movs	r3, #1
 8000b96:	431d      	orrs	r5, r3
 8000b98:	4b49      	ldr	r3, [pc, #292]	; (8000cc0 <__aeabi_ddiv+0x37c>)
 8000b9a:	445b      	add	r3, fp
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	dc00      	bgt.n	8000ba2 <__aeabi_ddiv+0x25e>
 8000ba0:	e0aa      	b.n	8000cf8 <__aeabi_ddiv+0x3b4>
 8000ba2:	076a      	lsls	r2, r5, #29
 8000ba4:	d000      	beq.n	8000ba8 <__aeabi_ddiv+0x264>
 8000ba6:	e13d      	b.n	8000e24 <__aeabi_ddiv+0x4e0>
 8000ba8:	08e9      	lsrs	r1, r5, #3
 8000baa:	4642      	mov	r2, r8
 8000bac:	01d2      	lsls	r2, r2, #7
 8000bae:	d506      	bpl.n	8000bbe <__aeabi_ddiv+0x27a>
 8000bb0:	4642      	mov	r2, r8
 8000bb2:	4b44      	ldr	r3, [pc, #272]	; (8000cc4 <__aeabi_ddiv+0x380>)
 8000bb4:	401a      	ands	r2, r3
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	4690      	mov	r8, r2
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	445b      	add	r3, fp
 8000bbe:	4a42      	ldr	r2, [pc, #264]	; (8000cc8 <__aeabi_ddiv+0x384>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	dd00      	ble.n	8000bc6 <__aeabi_ddiv+0x282>
 8000bc4:	e723      	b.n	8000a0e <__aeabi_ddiv+0xca>
 8000bc6:	4642      	mov	r2, r8
 8000bc8:	055b      	lsls	r3, r3, #21
 8000bca:	0755      	lsls	r5, r2, #29
 8000bcc:	0252      	lsls	r2, r2, #9
 8000bce:	430d      	orrs	r5, r1
 8000bd0:	0b12      	lsrs	r2, r2, #12
 8000bd2:	0d5b      	lsrs	r3, r3, #21
 8000bd4:	e70d      	b.n	80009f2 <__aeabi_ddiv+0xae>
 8000bd6:	4651      	mov	r1, sl
 8000bd8:	4321      	orrs	r1, r4
 8000bda:	d100      	bne.n	8000bde <__aeabi_ddiv+0x29a>
 8000bdc:	e07c      	b.n	8000cd8 <__aeabi_ddiv+0x394>
 8000bde:	2c00      	cmp	r4, #0
 8000be0:	d100      	bne.n	8000be4 <__aeabi_ddiv+0x2a0>
 8000be2:	e0fb      	b.n	8000ddc <__aeabi_ddiv+0x498>
 8000be4:	0020      	movs	r0, r4
 8000be6:	f000 fd13 	bl	8001610 <__clzsi2>
 8000bea:	0002      	movs	r2, r0
 8000bec:	3a0b      	subs	r2, #11
 8000bee:	231d      	movs	r3, #29
 8000bf0:	1a9b      	subs	r3, r3, r2
 8000bf2:	4652      	mov	r2, sl
 8000bf4:	0001      	movs	r1, r0
 8000bf6:	40da      	lsrs	r2, r3
 8000bf8:	4653      	mov	r3, sl
 8000bfa:	3908      	subs	r1, #8
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	408c      	lsls	r4, r1
 8000c00:	0019      	movs	r1, r3
 8000c02:	4314      	orrs	r4, r2
 8000c04:	4b31      	ldr	r3, [pc, #196]	; (8000ccc <__aeabi_ddiv+0x388>)
 8000c06:	4458      	add	r0, fp
 8000c08:	469b      	mov	fp, r3
 8000c0a:	4483      	add	fp, r0
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	e6d9      	b.n	80009c4 <__aeabi_ddiv+0x80>
 8000c10:	0003      	movs	r3, r0
 8000c12:	4323      	orrs	r3, r4
 8000c14:	4698      	mov	r8, r3
 8000c16:	d044      	beq.n	8000ca2 <__aeabi_ddiv+0x35e>
 8000c18:	2c00      	cmp	r4, #0
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_ddiv+0x2da>
 8000c1c:	e0cf      	b.n	8000dbe <__aeabi_ddiv+0x47a>
 8000c1e:	0020      	movs	r0, r4
 8000c20:	f000 fcf6 	bl	8001610 <__clzsi2>
 8000c24:	0001      	movs	r1, r0
 8000c26:	0002      	movs	r2, r0
 8000c28:	390b      	subs	r1, #11
 8000c2a:	231d      	movs	r3, #29
 8000c2c:	1a5b      	subs	r3, r3, r1
 8000c2e:	4649      	mov	r1, r9
 8000c30:	0010      	movs	r0, r2
 8000c32:	40d9      	lsrs	r1, r3
 8000c34:	3808      	subs	r0, #8
 8000c36:	4084      	lsls	r4, r0
 8000c38:	000b      	movs	r3, r1
 8000c3a:	464d      	mov	r5, r9
 8000c3c:	4323      	orrs	r3, r4
 8000c3e:	4698      	mov	r8, r3
 8000c40:	4085      	lsls	r5, r0
 8000c42:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <__aeabi_ddiv+0x38c>)
 8000c44:	1a9b      	subs	r3, r3, r2
 8000c46:	469b      	mov	fp, r3
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4699      	mov	r9, r3
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	e69e      	b.n	800098e <__aeabi_ddiv+0x4a>
 8000c50:	0002      	movs	r2, r0
 8000c52:	4322      	orrs	r2, r4
 8000c54:	4690      	mov	r8, r2
 8000c56:	d11d      	bne.n	8000c94 <__aeabi_ddiv+0x350>
 8000c58:	2208      	movs	r2, #8
 8000c5a:	469b      	mov	fp, r3
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	2500      	movs	r5, #0
 8000c60:	4691      	mov	r9, r2
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	e693      	b.n	800098e <__aeabi_ddiv+0x4a>
 8000c66:	4651      	mov	r1, sl
 8000c68:	4321      	orrs	r1, r4
 8000c6a:	d109      	bne.n	8000c80 <__aeabi_ddiv+0x33c>
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	464a      	mov	r2, r9
 8000c70:	431a      	orrs	r2, r3
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <__aeabi_ddiv+0x390>)
 8000c74:	4691      	mov	r9, r2
 8000c76:	469c      	mov	ip, r3
 8000c78:	2400      	movs	r4, #0
 8000c7a:	2002      	movs	r0, #2
 8000c7c:	44e3      	add	fp, ip
 8000c7e:	e6a1      	b.n	80009c4 <__aeabi_ddiv+0x80>
 8000c80:	2303      	movs	r3, #3
 8000c82:	464a      	mov	r2, r9
 8000c84:	431a      	orrs	r2, r3
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <__aeabi_ddiv+0x390>)
 8000c88:	4691      	mov	r9, r2
 8000c8a:	469c      	mov	ip, r3
 8000c8c:	4651      	mov	r1, sl
 8000c8e:	2003      	movs	r0, #3
 8000c90:	44e3      	add	fp, ip
 8000c92:	e697      	b.n	80009c4 <__aeabi_ddiv+0x80>
 8000c94:	220c      	movs	r2, #12
 8000c96:	469b      	mov	fp, r3
 8000c98:	2303      	movs	r3, #3
 8000c9a:	46a0      	mov	r8, r4
 8000c9c:	4691      	mov	r9, r2
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	e675      	b.n	800098e <__aeabi_ddiv+0x4a>
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	469b      	mov	fp, r3
 8000caa:	3301      	adds	r3, #1
 8000cac:	2500      	movs	r5, #0
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	e66d      	b.n	800098e <__aeabi_ddiv+0x4a>
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	000007ff 	.word	0x000007ff
 8000cb8:	fffffc01 	.word	0xfffffc01
 8000cbc:	08005dd4 	.word	0x08005dd4
 8000cc0:	000003ff 	.word	0x000003ff
 8000cc4:	feffffff 	.word	0xfeffffff
 8000cc8:	000007fe 	.word	0x000007fe
 8000ccc:	000003f3 	.word	0x000003f3
 8000cd0:	fffffc0d 	.word	0xfffffc0d
 8000cd4:	fffff801 	.word	0xfffff801
 8000cd8:	464a      	mov	r2, r9
 8000cda:	2301      	movs	r3, #1
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	4691      	mov	r9, r2
 8000ce0:	2400      	movs	r4, #0
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	e66e      	b.n	80009c4 <__aeabi_ddiv+0x80>
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	469a      	mov	sl, r3
 8000cec:	2500      	movs	r5, #0
 8000cee:	4b88      	ldr	r3, [pc, #544]	; (8000f10 <__aeabi_ddiv+0x5cc>)
 8000cf0:	0312      	lsls	r2, r2, #12
 8000cf2:	e67e      	b.n	80009f2 <__aeabi_ddiv+0xae>
 8000cf4:	2501      	movs	r5, #1
 8000cf6:	426d      	negs	r5, r5
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	1ad2      	subs	r2, r2, r3
 8000cfc:	2a38      	cmp	r2, #56	; 0x38
 8000cfe:	dd00      	ble.n	8000d02 <__aeabi_ddiv+0x3be>
 8000d00:	e674      	b.n	80009ec <__aeabi_ddiv+0xa8>
 8000d02:	2a1f      	cmp	r2, #31
 8000d04:	dc00      	bgt.n	8000d08 <__aeabi_ddiv+0x3c4>
 8000d06:	e0bd      	b.n	8000e84 <__aeabi_ddiv+0x540>
 8000d08:	211f      	movs	r1, #31
 8000d0a:	4249      	negs	r1, r1
 8000d0c:	1acb      	subs	r3, r1, r3
 8000d0e:	4641      	mov	r1, r8
 8000d10:	40d9      	lsrs	r1, r3
 8000d12:	000b      	movs	r3, r1
 8000d14:	2a20      	cmp	r2, #32
 8000d16:	d004      	beq.n	8000d22 <__aeabi_ddiv+0x3de>
 8000d18:	4641      	mov	r1, r8
 8000d1a:	4a7e      	ldr	r2, [pc, #504]	; (8000f14 <__aeabi_ddiv+0x5d0>)
 8000d1c:	445a      	add	r2, fp
 8000d1e:	4091      	lsls	r1, r2
 8000d20:	430d      	orrs	r5, r1
 8000d22:	0029      	movs	r1, r5
 8000d24:	1e4a      	subs	r2, r1, #1
 8000d26:	4191      	sbcs	r1, r2
 8000d28:	4319      	orrs	r1, r3
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	001d      	movs	r5, r3
 8000d2e:	2200      	movs	r2, #0
 8000d30:	400d      	ands	r5, r1
 8000d32:	420b      	tst	r3, r1
 8000d34:	d100      	bne.n	8000d38 <__aeabi_ddiv+0x3f4>
 8000d36:	e0d0      	b.n	8000eda <__aeabi_ddiv+0x596>
 8000d38:	220f      	movs	r2, #15
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	400a      	ands	r2, r1
 8000d3e:	2a04      	cmp	r2, #4
 8000d40:	d100      	bne.n	8000d44 <__aeabi_ddiv+0x400>
 8000d42:	e0c7      	b.n	8000ed4 <__aeabi_ddiv+0x590>
 8000d44:	1d0a      	adds	r2, r1, #4
 8000d46:	428a      	cmp	r2, r1
 8000d48:	4189      	sbcs	r1, r1
 8000d4a:	4249      	negs	r1, r1
 8000d4c:	185b      	adds	r3, r3, r1
 8000d4e:	0011      	movs	r1, r2
 8000d50:	021a      	lsls	r2, r3, #8
 8000d52:	d400      	bmi.n	8000d56 <__aeabi_ddiv+0x412>
 8000d54:	e0be      	b.n	8000ed4 <__aeabi_ddiv+0x590>
 8000d56:	2301      	movs	r3, #1
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2500      	movs	r5, #0
 8000d5c:	e649      	b.n	80009f2 <__aeabi_ddiv+0xae>
 8000d5e:	2280      	movs	r2, #128	; 0x80
 8000d60:	4643      	mov	r3, r8
 8000d62:	0312      	lsls	r2, r2, #12
 8000d64:	4213      	tst	r3, r2
 8000d66:	d008      	beq.n	8000d7a <__aeabi_ddiv+0x436>
 8000d68:	4214      	tst	r4, r2
 8000d6a:	d106      	bne.n	8000d7a <__aeabi_ddiv+0x436>
 8000d6c:	4322      	orrs	r2, r4
 8000d6e:	0312      	lsls	r2, r2, #12
 8000d70:	46ba      	mov	sl, r7
 8000d72:	000d      	movs	r5, r1
 8000d74:	4b66      	ldr	r3, [pc, #408]	; (8000f10 <__aeabi_ddiv+0x5cc>)
 8000d76:	0b12      	lsrs	r2, r2, #12
 8000d78:	e63b      	b.n	80009f2 <__aeabi_ddiv+0xae>
 8000d7a:	2280      	movs	r2, #128	; 0x80
 8000d7c:	4643      	mov	r3, r8
 8000d7e:	0312      	lsls	r2, r2, #12
 8000d80:	431a      	orrs	r2, r3
 8000d82:	0312      	lsls	r2, r2, #12
 8000d84:	46b2      	mov	sl, r6
 8000d86:	4b62      	ldr	r3, [pc, #392]	; (8000f10 <__aeabi_ddiv+0x5cc>)
 8000d88:	0b12      	lsrs	r2, r2, #12
 8000d8a:	e632      	b.n	80009f2 <__aeabi_ddiv+0xae>
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d100      	bne.n	8000d92 <__aeabi_ddiv+0x44e>
 8000d90:	e702      	b.n	8000b98 <__aeabi_ddiv+0x254>
 8000d92:	19a6      	adds	r6, r4, r6
 8000d94:	1e6a      	subs	r2, r5, #1
 8000d96:	42a6      	cmp	r6, r4
 8000d98:	d200      	bcs.n	8000d9c <__aeabi_ddiv+0x458>
 8000d9a:	e089      	b.n	8000eb0 <__aeabi_ddiv+0x56c>
 8000d9c:	4286      	cmp	r6, r0
 8000d9e:	d200      	bcs.n	8000da2 <__aeabi_ddiv+0x45e>
 8000da0:	e09f      	b.n	8000ee2 <__aeabi_ddiv+0x59e>
 8000da2:	d100      	bne.n	8000da6 <__aeabi_ddiv+0x462>
 8000da4:	e0af      	b.n	8000f06 <__aeabi_ddiv+0x5c2>
 8000da6:	0015      	movs	r5, r2
 8000da8:	e6f4      	b.n	8000b94 <__aeabi_ddiv+0x250>
 8000daa:	42a9      	cmp	r1, r5
 8000dac:	d900      	bls.n	8000db0 <__aeabi_ddiv+0x46c>
 8000dae:	e63c      	b.n	8000a2a <__aeabi_ddiv+0xe6>
 8000db0:	4643      	mov	r3, r8
 8000db2:	07de      	lsls	r6, r3, #31
 8000db4:	0858      	lsrs	r0, r3, #1
 8000db6:	086b      	lsrs	r3, r5, #1
 8000db8:	431e      	orrs	r6, r3
 8000dba:	07ed      	lsls	r5, r5, #31
 8000dbc:	e63c      	b.n	8000a38 <__aeabi_ddiv+0xf4>
 8000dbe:	f000 fc27 	bl	8001610 <__clzsi2>
 8000dc2:	0001      	movs	r1, r0
 8000dc4:	0002      	movs	r2, r0
 8000dc6:	3115      	adds	r1, #21
 8000dc8:	3220      	adds	r2, #32
 8000dca:	291c      	cmp	r1, #28
 8000dcc:	dc00      	bgt.n	8000dd0 <__aeabi_ddiv+0x48c>
 8000dce:	e72c      	b.n	8000c2a <__aeabi_ddiv+0x2e6>
 8000dd0:	464b      	mov	r3, r9
 8000dd2:	3808      	subs	r0, #8
 8000dd4:	4083      	lsls	r3, r0
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	4698      	mov	r8, r3
 8000dda:	e732      	b.n	8000c42 <__aeabi_ddiv+0x2fe>
 8000ddc:	f000 fc18 	bl	8001610 <__clzsi2>
 8000de0:	0003      	movs	r3, r0
 8000de2:	001a      	movs	r2, r3
 8000de4:	3215      	adds	r2, #21
 8000de6:	3020      	adds	r0, #32
 8000de8:	2a1c      	cmp	r2, #28
 8000dea:	dc00      	bgt.n	8000dee <__aeabi_ddiv+0x4aa>
 8000dec:	e6ff      	b.n	8000bee <__aeabi_ddiv+0x2aa>
 8000dee:	4654      	mov	r4, sl
 8000df0:	3b08      	subs	r3, #8
 8000df2:	2100      	movs	r1, #0
 8000df4:	409c      	lsls	r4, r3
 8000df6:	e705      	b.n	8000c04 <__aeabi_ddiv+0x2c0>
 8000df8:	1936      	adds	r6, r6, r4
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	42b4      	cmp	r4, r6
 8000dfe:	d900      	bls.n	8000e02 <__aeabi_ddiv+0x4be>
 8000e00:	e6a6      	b.n	8000b50 <__aeabi_ddiv+0x20c>
 8000e02:	42b2      	cmp	r2, r6
 8000e04:	d800      	bhi.n	8000e08 <__aeabi_ddiv+0x4c4>
 8000e06:	e6a3      	b.n	8000b50 <__aeabi_ddiv+0x20c>
 8000e08:	1e83      	subs	r3, r0, #2
 8000e0a:	1936      	adds	r6, r6, r4
 8000e0c:	e6a0      	b.n	8000b50 <__aeabi_ddiv+0x20c>
 8000e0e:	1909      	adds	r1, r1, r4
 8000e10:	3d01      	subs	r5, #1
 8000e12:	428c      	cmp	r4, r1
 8000e14:	d900      	bls.n	8000e18 <__aeabi_ddiv+0x4d4>
 8000e16:	e68d      	b.n	8000b34 <__aeabi_ddiv+0x1f0>
 8000e18:	428a      	cmp	r2, r1
 8000e1a:	d800      	bhi.n	8000e1e <__aeabi_ddiv+0x4da>
 8000e1c:	e68a      	b.n	8000b34 <__aeabi_ddiv+0x1f0>
 8000e1e:	1e85      	subs	r5, r0, #2
 8000e20:	1909      	adds	r1, r1, r4
 8000e22:	e687      	b.n	8000b34 <__aeabi_ddiv+0x1f0>
 8000e24:	220f      	movs	r2, #15
 8000e26:	402a      	ands	r2, r5
 8000e28:	2a04      	cmp	r2, #4
 8000e2a:	d100      	bne.n	8000e2e <__aeabi_ddiv+0x4ea>
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_ddiv+0x264>
 8000e2e:	1d29      	adds	r1, r5, #4
 8000e30:	42a9      	cmp	r1, r5
 8000e32:	41ad      	sbcs	r5, r5
 8000e34:	426d      	negs	r5, r5
 8000e36:	08c9      	lsrs	r1, r1, #3
 8000e38:	44a8      	add	r8, r5
 8000e3a:	e6b6      	b.n	8000baa <__aeabi_ddiv+0x266>
 8000e3c:	42af      	cmp	r7, r5
 8000e3e:	d900      	bls.n	8000e42 <__aeabi_ddiv+0x4fe>
 8000e40:	e662      	b.n	8000b08 <__aeabi_ddiv+0x1c4>
 8000e42:	4281      	cmp	r1, r0
 8000e44:	d804      	bhi.n	8000e50 <__aeabi_ddiv+0x50c>
 8000e46:	d000      	beq.n	8000e4a <__aeabi_ddiv+0x506>
 8000e48:	e65e      	b.n	8000b08 <__aeabi_ddiv+0x1c4>
 8000e4a:	42ae      	cmp	r6, r5
 8000e4c:	d800      	bhi.n	8000e50 <__aeabi_ddiv+0x50c>
 8000e4e:	e65b      	b.n	8000b08 <__aeabi_ddiv+0x1c4>
 8000e50:	2302      	movs	r3, #2
 8000e52:	425b      	negs	r3, r3
 8000e54:	469c      	mov	ip, r3
 8000e56:	9b00      	ldr	r3, [sp, #0]
 8000e58:	44e0      	add	r8, ip
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	4465      	add	r5, ip
 8000e5e:	429d      	cmp	r5, r3
 8000e60:	419b      	sbcs	r3, r3
 8000e62:	425b      	negs	r3, r3
 8000e64:	191b      	adds	r3, r3, r4
 8000e66:	18c0      	adds	r0, r0, r3
 8000e68:	e64f      	b.n	8000b0a <__aeabi_ddiv+0x1c6>
 8000e6a:	42b2      	cmp	r2, r6
 8000e6c:	d800      	bhi.n	8000e70 <__aeabi_ddiv+0x52c>
 8000e6e:	e612      	b.n	8000a96 <__aeabi_ddiv+0x152>
 8000e70:	1e83      	subs	r3, r0, #2
 8000e72:	1936      	adds	r6, r6, r4
 8000e74:	e60f      	b.n	8000a96 <__aeabi_ddiv+0x152>
 8000e76:	428a      	cmp	r2, r1
 8000e78:	d800      	bhi.n	8000e7c <__aeabi_ddiv+0x538>
 8000e7a:	e5fa      	b.n	8000a72 <__aeabi_ddiv+0x12e>
 8000e7c:	1e83      	subs	r3, r0, #2
 8000e7e:	4698      	mov	r8, r3
 8000e80:	1909      	adds	r1, r1, r4
 8000e82:	e5f6      	b.n	8000a72 <__aeabi_ddiv+0x12e>
 8000e84:	4b24      	ldr	r3, [pc, #144]	; (8000f18 <__aeabi_ddiv+0x5d4>)
 8000e86:	0028      	movs	r0, r5
 8000e88:	445b      	add	r3, fp
 8000e8a:	4641      	mov	r1, r8
 8000e8c:	409d      	lsls	r5, r3
 8000e8e:	4099      	lsls	r1, r3
 8000e90:	40d0      	lsrs	r0, r2
 8000e92:	1e6b      	subs	r3, r5, #1
 8000e94:	419d      	sbcs	r5, r3
 8000e96:	4643      	mov	r3, r8
 8000e98:	4301      	orrs	r1, r0
 8000e9a:	4329      	orrs	r1, r5
 8000e9c:	40d3      	lsrs	r3, r2
 8000e9e:	074a      	lsls	r2, r1, #29
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_ddiv+0x560>
 8000ea2:	e755      	b.n	8000d50 <__aeabi_ddiv+0x40c>
 8000ea4:	220f      	movs	r2, #15
 8000ea6:	400a      	ands	r2, r1
 8000ea8:	2a04      	cmp	r2, #4
 8000eaa:	d000      	beq.n	8000eae <__aeabi_ddiv+0x56a>
 8000eac:	e74a      	b.n	8000d44 <__aeabi_ddiv+0x400>
 8000eae:	e74f      	b.n	8000d50 <__aeabi_ddiv+0x40c>
 8000eb0:	0015      	movs	r5, r2
 8000eb2:	4286      	cmp	r6, r0
 8000eb4:	d000      	beq.n	8000eb8 <__aeabi_ddiv+0x574>
 8000eb6:	e66d      	b.n	8000b94 <__aeabi_ddiv+0x250>
 8000eb8:	9a00      	ldr	r2, [sp, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d000      	beq.n	8000ec0 <__aeabi_ddiv+0x57c>
 8000ebe:	e669      	b.n	8000b94 <__aeabi_ddiv+0x250>
 8000ec0:	e66a      	b.n	8000b98 <__aeabi_ddiv+0x254>
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <__aeabi_ddiv+0x5d8>)
 8000ec4:	445b      	add	r3, fp
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	dc00      	bgt.n	8000ecc <__aeabi_ddiv+0x588>
 8000eca:	e713      	b.n	8000cf4 <__aeabi_ddiv+0x3b0>
 8000ecc:	2501      	movs	r5, #1
 8000ece:	2100      	movs	r1, #0
 8000ed0:	44a8      	add	r8, r5
 8000ed2:	e66a      	b.n	8000baa <__aeabi_ddiv+0x266>
 8000ed4:	075d      	lsls	r5, r3, #29
 8000ed6:	025b      	lsls	r3, r3, #9
 8000ed8:	0b1a      	lsrs	r2, r3, #12
 8000eda:	08c9      	lsrs	r1, r1, #3
 8000edc:	2300      	movs	r3, #0
 8000ede:	430d      	orrs	r5, r1
 8000ee0:	e587      	b.n	80009f2 <__aeabi_ddiv+0xae>
 8000ee2:	9900      	ldr	r1, [sp, #0]
 8000ee4:	3d02      	subs	r5, #2
 8000ee6:	004a      	lsls	r2, r1, #1
 8000ee8:	428a      	cmp	r2, r1
 8000eea:	41bf      	sbcs	r7, r7
 8000eec:	427f      	negs	r7, r7
 8000eee:	193f      	adds	r7, r7, r4
 8000ef0:	19f6      	adds	r6, r6, r7
 8000ef2:	9200      	str	r2, [sp, #0]
 8000ef4:	e7dd      	b.n	8000eb2 <__aeabi_ddiv+0x56e>
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	4643      	mov	r3, r8
 8000efa:	0312      	lsls	r2, r2, #12
 8000efc:	431a      	orrs	r2, r3
 8000efe:	0312      	lsls	r2, r2, #12
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <__aeabi_ddiv+0x5cc>)
 8000f02:	0b12      	lsrs	r2, r2, #12
 8000f04:	e575      	b.n	80009f2 <__aeabi_ddiv+0xae>
 8000f06:	9900      	ldr	r1, [sp, #0]
 8000f08:	4299      	cmp	r1, r3
 8000f0a:	d3ea      	bcc.n	8000ee2 <__aeabi_ddiv+0x59e>
 8000f0c:	0015      	movs	r5, r2
 8000f0e:	e7d3      	b.n	8000eb8 <__aeabi_ddiv+0x574>
 8000f10:	000007ff 	.word	0x000007ff
 8000f14:	0000043e 	.word	0x0000043e
 8000f18:	0000041e 	.word	0x0000041e
 8000f1c:	000003ff 	.word	0x000003ff

08000f20 <__aeabi_dmul>:
 8000f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f22:	4645      	mov	r5, r8
 8000f24:	46de      	mov	lr, fp
 8000f26:	4657      	mov	r7, sl
 8000f28:	464e      	mov	r6, r9
 8000f2a:	b5e0      	push	{r5, r6, r7, lr}
 8000f2c:	001f      	movs	r7, r3
 8000f2e:	030b      	lsls	r3, r1, #12
 8000f30:	0b1b      	lsrs	r3, r3, #12
 8000f32:	469b      	mov	fp, r3
 8000f34:	004d      	lsls	r5, r1, #1
 8000f36:	0fcb      	lsrs	r3, r1, #31
 8000f38:	0004      	movs	r4, r0
 8000f3a:	4691      	mov	r9, r2
 8000f3c:	4698      	mov	r8, r3
 8000f3e:	b087      	sub	sp, #28
 8000f40:	0d6d      	lsrs	r5, r5, #21
 8000f42:	d100      	bne.n	8000f46 <__aeabi_dmul+0x26>
 8000f44:	e1cd      	b.n	80012e2 <__aeabi_dmul+0x3c2>
 8000f46:	4bce      	ldr	r3, [pc, #824]	; (8001280 <__aeabi_dmul+0x360>)
 8000f48:	429d      	cmp	r5, r3
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_dmul+0x2e>
 8000f4c:	e1e9      	b.n	8001322 <__aeabi_dmul+0x402>
 8000f4e:	465a      	mov	r2, fp
 8000f50:	0f43      	lsrs	r3, r0, #29
 8000f52:	00d2      	lsls	r2, r2, #3
 8000f54:	4313      	orrs	r3, r2
 8000f56:	2280      	movs	r2, #128	; 0x80
 8000f58:	0412      	lsls	r2, r2, #16
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	00c3      	lsls	r3, r0, #3
 8000f5e:	469a      	mov	sl, r3
 8000f60:	4bc8      	ldr	r3, [pc, #800]	; (8001284 <__aeabi_dmul+0x364>)
 8000f62:	4693      	mov	fp, r2
 8000f64:	469c      	mov	ip, r3
 8000f66:	2300      	movs	r3, #0
 8000f68:	2600      	movs	r6, #0
 8000f6a:	4465      	add	r5, ip
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	033c      	lsls	r4, r7, #12
 8000f70:	007b      	lsls	r3, r7, #1
 8000f72:	4648      	mov	r0, r9
 8000f74:	0b24      	lsrs	r4, r4, #12
 8000f76:	0d5b      	lsrs	r3, r3, #21
 8000f78:	0fff      	lsrs	r7, r7, #31
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_dmul+0x60>
 8000f7e:	e189      	b.n	8001294 <__aeabi_dmul+0x374>
 8000f80:	4abf      	ldr	r2, [pc, #764]	; (8001280 <__aeabi_dmul+0x360>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d019      	beq.n	8000fba <__aeabi_dmul+0x9a>
 8000f86:	0f42      	lsrs	r2, r0, #29
 8000f88:	00e4      	lsls	r4, r4, #3
 8000f8a:	4322      	orrs	r2, r4
 8000f8c:	2480      	movs	r4, #128	; 0x80
 8000f8e:	0424      	lsls	r4, r4, #16
 8000f90:	4314      	orrs	r4, r2
 8000f92:	4abc      	ldr	r2, [pc, #752]	; (8001284 <__aeabi_dmul+0x364>)
 8000f94:	2100      	movs	r1, #0
 8000f96:	4694      	mov	ip, r2
 8000f98:	4642      	mov	r2, r8
 8000f9a:	4463      	add	r3, ip
 8000f9c:	195b      	adds	r3, r3, r5
 8000f9e:	9301      	str	r3, [sp, #4]
 8000fa0:	9b01      	ldr	r3, [sp, #4]
 8000fa2:	407a      	eors	r2, r7
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	00c0      	lsls	r0, r0, #3
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2e0a      	cmp	r6, #10
 8000fae:	dd1c      	ble.n	8000fea <__aeabi_dmul+0xca>
 8000fb0:	003a      	movs	r2, r7
 8000fb2:	2e0b      	cmp	r6, #11
 8000fb4:	d05e      	beq.n	8001074 <__aeabi_dmul+0x154>
 8000fb6:	4647      	mov	r7, r8
 8000fb8:	e056      	b.n	8001068 <__aeabi_dmul+0x148>
 8000fba:	4649      	mov	r1, r9
 8000fbc:	4bb0      	ldr	r3, [pc, #704]	; (8001280 <__aeabi_dmul+0x360>)
 8000fbe:	4321      	orrs	r1, r4
 8000fc0:	18eb      	adds	r3, r5, r3
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	2900      	cmp	r1, #0
 8000fc6:	d12a      	bne.n	800101e <__aeabi_dmul+0xfe>
 8000fc8:	2080      	movs	r0, #128	; 0x80
 8000fca:	2202      	movs	r2, #2
 8000fcc:	0100      	lsls	r0, r0, #4
 8000fce:	002b      	movs	r3, r5
 8000fd0:	4684      	mov	ip, r0
 8000fd2:	4316      	orrs	r6, r2
 8000fd4:	4642      	mov	r2, r8
 8000fd6:	4463      	add	r3, ip
 8000fd8:	407a      	eors	r2, r7
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	2e0a      	cmp	r6, #10
 8000fe0:	dd00      	ble.n	8000fe4 <__aeabi_dmul+0xc4>
 8000fe2:	e231      	b.n	8001448 <__aeabi_dmul+0x528>
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	2400      	movs	r4, #0
 8000fe8:	2102      	movs	r1, #2
 8000fea:	2e02      	cmp	r6, #2
 8000fec:	dc26      	bgt.n	800103c <__aeabi_dmul+0x11c>
 8000fee:	3e01      	subs	r6, #1
 8000ff0:	2e01      	cmp	r6, #1
 8000ff2:	d852      	bhi.n	800109a <__aeabi_dmul+0x17a>
 8000ff4:	2902      	cmp	r1, #2
 8000ff6:	d04c      	beq.n	8001092 <__aeabi_dmul+0x172>
 8000ff8:	2901      	cmp	r1, #1
 8000ffa:	d000      	beq.n	8000ffe <__aeabi_dmul+0xde>
 8000ffc:	e118      	b.n	8001230 <__aeabi_dmul+0x310>
 8000ffe:	2300      	movs	r3, #0
 8001000:	2400      	movs	r4, #0
 8001002:	2500      	movs	r5, #0
 8001004:	051b      	lsls	r3, r3, #20
 8001006:	4323      	orrs	r3, r4
 8001008:	07d2      	lsls	r2, r2, #31
 800100a:	4313      	orrs	r3, r2
 800100c:	0028      	movs	r0, r5
 800100e:	0019      	movs	r1, r3
 8001010:	b007      	add	sp, #28
 8001012:	bcf0      	pop	{r4, r5, r6, r7}
 8001014:	46bb      	mov	fp, r7
 8001016:	46b2      	mov	sl, r6
 8001018:	46a9      	mov	r9, r5
 800101a:	46a0      	mov	r8, r4
 800101c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800101e:	2180      	movs	r1, #128	; 0x80
 8001020:	2203      	movs	r2, #3
 8001022:	0109      	lsls	r1, r1, #4
 8001024:	002b      	movs	r3, r5
 8001026:	468c      	mov	ip, r1
 8001028:	4316      	orrs	r6, r2
 800102a:	4642      	mov	r2, r8
 800102c:	4463      	add	r3, ip
 800102e:	407a      	eors	r2, r7
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	2e0a      	cmp	r6, #10
 8001036:	dd00      	ble.n	800103a <__aeabi_dmul+0x11a>
 8001038:	e228      	b.n	800148c <__aeabi_dmul+0x56c>
 800103a:	2103      	movs	r1, #3
 800103c:	2501      	movs	r5, #1
 800103e:	40b5      	lsls	r5, r6
 8001040:	46ac      	mov	ip, r5
 8001042:	26a6      	movs	r6, #166	; 0xa6
 8001044:	4663      	mov	r3, ip
 8001046:	00f6      	lsls	r6, r6, #3
 8001048:	4035      	ands	r5, r6
 800104a:	4233      	tst	r3, r6
 800104c:	d10b      	bne.n	8001066 <__aeabi_dmul+0x146>
 800104e:	2690      	movs	r6, #144	; 0x90
 8001050:	00b6      	lsls	r6, r6, #2
 8001052:	4233      	tst	r3, r6
 8001054:	d118      	bne.n	8001088 <__aeabi_dmul+0x168>
 8001056:	3eb9      	subs	r6, #185	; 0xb9
 8001058:	3eff      	subs	r6, #255	; 0xff
 800105a:	421e      	tst	r6, r3
 800105c:	d01d      	beq.n	800109a <__aeabi_dmul+0x17a>
 800105e:	46a3      	mov	fp, r4
 8001060:	4682      	mov	sl, r0
 8001062:	9100      	str	r1, [sp, #0]
 8001064:	e000      	b.n	8001068 <__aeabi_dmul+0x148>
 8001066:	0017      	movs	r7, r2
 8001068:	9900      	ldr	r1, [sp, #0]
 800106a:	003a      	movs	r2, r7
 800106c:	2902      	cmp	r1, #2
 800106e:	d010      	beq.n	8001092 <__aeabi_dmul+0x172>
 8001070:	465c      	mov	r4, fp
 8001072:	4650      	mov	r0, sl
 8001074:	2903      	cmp	r1, #3
 8001076:	d1bf      	bne.n	8000ff8 <__aeabi_dmul+0xd8>
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	031b      	lsls	r3, r3, #12
 800107c:	431c      	orrs	r4, r3
 800107e:	0324      	lsls	r4, r4, #12
 8001080:	0005      	movs	r5, r0
 8001082:	4b7f      	ldr	r3, [pc, #508]	; (8001280 <__aeabi_dmul+0x360>)
 8001084:	0b24      	lsrs	r4, r4, #12
 8001086:	e7bd      	b.n	8001004 <__aeabi_dmul+0xe4>
 8001088:	2480      	movs	r4, #128	; 0x80
 800108a:	2200      	movs	r2, #0
 800108c:	4b7c      	ldr	r3, [pc, #496]	; (8001280 <__aeabi_dmul+0x360>)
 800108e:	0324      	lsls	r4, r4, #12
 8001090:	e7b8      	b.n	8001004 <__aeabi_dmul+0xe4>
 8001092:	2400      	movs	r4, #0
 8001094:	2500      	movs	r5, #0
 8001096:	4b7a      	ldr	r3, [pc, #488]	; (8001280 <__aeabi_dmul+0x360>)
 8001098:	e7b4      	b.n	8001004 <__aeabi_dmul+0xe4>
 800109a:	4653      	mov	r3, sl
 800109c:	041e      	lsls	r6, r3, #16
 800109e:	0c36      	lsrs	r6, r6, #16
 80010a0:	0c1f      	lsrs	r7, r3, #16
 80010a2:	0033      	movs	r3, r6
 80010a4:	0c01      	lsrs	r1, r0, #16
 80010a6:	0400      	lsls	r0, r0, #16
 80010a8:	0c00      	lsrs	r0, r0, #16
 80010aa:	4343      	muls	r3, r0
 80010ac:	4698      	mov	r8, r3
 80010ae:	0003      	movs	r3, r0
 80010b0:	437b      	muls	r3, r7
 80010b2:	4699      	mov	r9, r3
 80010b4:	0033      	movs	r3, r6
 80010b6:	434b      	muls	r3, r1
 80010b8:	469c      	mov	ip, r3
 80010ba:	4643      	mov	r3, r8
 80010bc:	000d      	movs	r5, r1
 80010be:	0c1b      	lsrs	r3, r3, #16
 80010c0:	469a      	mov	sl, r3
 80010c2:	437d      	muls	r5, r7
 80010c4:	44cc      	add	ip, r9
 80010c6:	44d4      	add	ip, sl
 80010c8:	9500      	str	r5, [sp, #0]
 80010ca:	45e1      	cmp	r9, ip
 80010cc:	d904      	bls.n	80010d8 <__aeabi_dmul+0x1b8>
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	025b      	lsls	r3, r3, #9
 80010d2:	4699      	mov	r9, r3
 80010d4:	444d      	add	r5, r9
 80010d6:	9500      	str	r5, [sp, #0]
 80010d8:	4663      	mov	r3, ip
 80010da:	0c1b      	lsrs	r3, r3, #16
 80010dc:	001d      	movs	r5, r3
 80010de:	4663      	mov	r3, ip
 80010e0:	041b      	lsls	r3, r3, #16
 80010e2:	469c      	mov	ip, r3
 80010e4:	4643      	mov	r3, r8
 80010e6:	041b      	lsls	r3, r3, #16
 80010e8:	0c1b      	lsrs	r3, r3, #16
 80010ea:	4698      	mov	r8, r3
 80010ec:	4663      	mov	r3, ip
 80010ee:	4443      	add	r3, r8
 80010f0:	9303      	str	r3, [sp, #12]
 80010f2:	0c23      	lsrs	r3, r4, #16
 80010f4:	4698      	mov	r8, r3
 80010f6:	0033      	movs	r3, r6
 80010f8:	0424      	lsls	r4, r4, #16
 80010fa:	0c24      	lsrs	r4, r4, #16
 80010fc:	4363      	muls	r3, r4
 80010fe:	469c      	mov	ip, r3
 8001100:	0023      	movs	r3, r4
 8001102:	437b      	muls	r3, r7
 8001104:	4699      	mov	r9, r3
 8001106:	4643      	mov	r3, r8
 8001108:	435e      	muls	r6, r3
 800110a:	435f      	muls	r7, r3
 800110c:	444e      	add	r6, r9
 800110e:	4663      	mov	r3, ip
 8001110:	46b2      	mov	sl, r6
 8001112:	0c1e      	lsrs	r6, r3, #16
 8001114:	4456      	add	r6, sl
 8001116:	45b1      	cmp	r9, r6
 8001118:	d903      	bls.n	8001122 <__aeabi_dmul+0x202>
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	025b      	lsls	r3, r3, #9
 800111e:	4699      	mov	r9, r3
 8001120:	444f      	add	r7, r9
 8001122:	0c33      	lsrs	r3, r6, #16
 8001124:	4699      	mov	r9, r3
 8001126:	003b      	movs	r3, r7
 8001128:	444b      	add	r3, r9
 800112a:	9305      	str	r3, [sp, #20]
 800112c:	4663      	mov	r3, ip
 800112e:	46ac      	mov	ip, r5
 8001130:	041f      	lsls	r7, r3, #16
 8001132:	0c3f      	lsrs	r7, r7, #16
 8001134:	0436      	lsls	r6, r6, #16
 8001136:	19f6      	adds	r6, r6, r7
 8001138:	44b4      	add	ip, r6
 800113a:	4663      	mov	r3, ip
 800113c:	9304      	str	r3, [sp, #16]
 800113e:	465b      	mov	r3, fp
 8001140:	0c1b      	lsrs	r3, r3, #16
 8001142:	469c      	mov	ip, r3
 8001144:	465b      	mov	r3, fp
 8001146:	041f      	lsls	r7, r3, #16
 8001148:	0c3f      	lsrs	r7, r7, #16
 800114a:	003b      	movs	r3, r7
 800114c:	4343      	muls	r3, r0
 800114e:	4699      	mov	r9, r3
 8001150:	4663      	mov	r3, ip
 8001152:	4343      	muls	r3, r0
 8001154:	469a      	mov	sl, r3
 8001156:	464b      	mov	r3, r9
 8001158:	4660      	mov	r0, ip
 800115a:	0c1b      	lsrs	r3, r3, #16
 800115c:	469b      	mov	fp, r3
 800115e:	4348      	muls	r0, r1
 8001160:	4379      	muls	r1, r7
 8001162:	4451      	add	r1, sl
 8001164:	4459      	add	r1, fp
 8001166:	458a      	cmp	sl, r1
 8001168:	d903      	bls.n	8001172 <__aeabi_dmul+0x252>
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	025b      	lsls	r3, r3, #9
 800116e:	469a      	mov	sl, r3
 8001170:	4450      	add	r0, sl
 8001172:	0c0b      	lsrs	r3, r1, #16
 8001174:	469a      	mov	sl, r3
 8001176:	464b      	mov	r3, r9
 8001178:	041b      	lsls	r3, r3, #16
 800117a:	0c1b      	lsrs	r3, r3, #16
 800117c:	4699      	mov	r9, r3
 800117e:	003b      	movs	r3, r7
 8001180:	4363      	muls	r3, r4
 8001182:	0409      	lsls	r1, r1, #16
 8001184:	4645      	mov	r5, r8
 8001186:	4449      	add	r1, r9
 8001188:	4699      	mov	r9, r3
 800118a:	4663      	mov	r3, ip
 800118c:	435c      	muls	r4, r3
 800118e:	436b      	muls	r3, r5
 8001190:	469c      	mov	ip, r3
 8001192:	464b      	mov	r3, r9
 8001194:	0c1b      	lsrs	r3, r3, #16
 8001196:	4698      	mov	r8, r3
 8001198:	436f      	muls	r7, r5
 800119a:	193f      	adds	r7, r7, r4
 800119c:	4447      	add	r7, r8
 800119e:	4450      	add	r0, sl
 80011a0:	42bc      	cmp	r4, r7
 80011a2:	d903      	bls.n	80011ac <__aeabi_dmul+0x28c>
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	025b      	lsls	r3, r3, #9
 80011a8:	4698      	mov	r8, r3
 80011aa:	44c4      	add	ip, r8
 80011ac:	9b04      	ldr	r3, [sp, #16]
 80011ae:	9d00      	ldr	r5, [sp, #0]
 80011b0:	4698      	mov	r8, r3
 80011b2:	4445      	add	r5, r8
 80011b4:	42b5      	cmp	r5, r6
 80011b6:	41b6      	sbcs	r6, r6
 80011b8:	4273      	negs	r3, r6
 80011ba:	4698      	mov	r8, r3
 80011bc:	464b      	mov	r3, r9
 80011be:	041e      	lsls	r6, r3, #16
 80011c0:	9b05      	ldr	r3, [sp, #20]
 80011c2:	043c      	lsls	r4, r7, #16
 80011c4:	4699      	mov	r9, r3
 80011c6:	0c36      	lsrs	r6, r6, #16
 80011c8:	19a4      	adds	r4, r4, r6
 80011ca:	444c      	add	r4, r9
 80011cc:	46a1      	mov	r9, r4
 80011ce:	4683      	mov	fp, r0
 80011d0:	186e      	adds	r6, r5, r1
 80011d2:	44c1      	add	r9, r8
 80011d4:	428e      	cmp	r6, r1
 80011d6:	4189      	sbcs	r1, r1
 80011d8:	44cb      	add	fp, r9
 80011da:	465d      	mov	r5, fp
 80011dc:	4249      	negs	r1, r1
 80011de:	186d      	adds	r5, r5, r1
 80011e0:	429c      	cmp	r4, r3
 80011e2:	41a4      	sbcs	r4, r4
 80011e4:	45c1      	cmp	r9, r8
 80011e6:	419b      	sbcs	r3, r3
 80011e8:	4583      	cmp	fp, r0
 80011ea:	4180      	sbcs	r0, r0
 80011ec:	428d      	cmp	r5, r1
 80011ee:	4189      	sbcs	r1, r1
 80011f0:	425b      	negs	r3, r3
 80011f2:	4264      	negs	r4, r4
 80011f4:	431c      	orrs	r4, r3
 80011f6:	4240      	negs	r0, r0
 80011f8:	9b03      	ldr	r3, [sp, #12]
 80011fa:	4249      	negs	r1, r1
 80011fc:	4301      	orrs	r1, r0
 80011fe:	0270      	lsls	r0, r6, #9
 8001200:	0c3f      	lsrs	r7, r7, #16
 8001202:	4318      	orrs	r0, r3
 8001204:	19e4      	adds	r4, r4, r7
 8001206:	1e47      	subs	r7, r0, #1
 8001208:	41b8      	sbcs	r0, r7
 800120a:	1864      	adds	r4, r4, r1
 800120c:	4464      	add	r4, ip
 800120e:	0df6      	lsrs	r6, r6, #23
 8001210:	0261      	lsls	r1, r4, #9
 8001212:	4330      	orrs	r0, r6
 8001214:	0dec      	lsrs	r4, r5, #23
 8001216:	026e      	lsls	r6, r5, #9
 8001218:	430c      	orrs	r4, r1
 800121a:	4330      	orrs	r0, r6
 800121c:	01c9      	lsls	r1, r1, #7
 800121e:	d400      	bmi.n	8001222 <__aeabi_dmul+0x302>
 8001220:	e0f1      	b.n	8001406 <__aeabi_dmul+0x4e6>
 8001222:	2101      	movs	r1, #1
 8001224:	0843      	lsrs	r3, r0, #1
 8001226:	4001      	ands	r1, r0
 8001228:	430b      	orrs	r3, r1
 800122a:	07e0      	lsls	r0, r4, #31
 800122c:	4318      	orrs	r0, r3
 800122e:	0864      	lsrs	r4, r4, #1
 8001230:	4915      	ldr	r1, [pc, #84]	; (8001288 <__aeabi_dmul+0x368>)
 8001232:	9b02      	ldr	r3, [sp, #8]
 8001234:	468c      	mov	ip, r1
 8001236:	4463      	add	r3, ip
 8001238:	2b00      	cmp	r3, #0
 800123a:	dc00      	bgt.n	800123e <__aeabi_dmul+0x31e>
 800123c:	e097      	b.n	800136e <__aeabi_dmul+0x44e>
 800123e:	0741      	lsls	r1, r0, #29
 8001240:	d009      	beq.n	8001256 <__aeabi_dmul+0x336>
 8001242:	210f      	movs	r1, #15
 8001244:	4001      	ands	r1, r0
 8001246:	2904      	cmp	r1, #4
 8001248:	d005      	beq.n	8001256 <__aeabi_dmul+0x336>
 800124a:	1d01      	adds	r1, r0, #4
 800124c:	4281      	cmp	r1, r0
 800124e:	4180      	sbcs	r0, r0
 8001250:	4240      	negs	r0, r0
 8001252:	1824      	adds	r4, r4, r0
 8001254:	0008      	movs	r0, r1
 8001256:	01e1      	lsls	r1, r4, #7
 8001258:	d506      	bpl.n	8001268 <__aeabi_dmul+0x348>
 800125a:	2180      	movs	r1, #128	; 0x80
 800125c:	00c9      	lsls	r1, r1, #3
 800125e:	468c      	mov	ip, r1
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <__aeabi_dmul+0x36c>)
 8001262:	401c      	ands	r4, r3
 8001264:	9b02      	ldr	r3, [sp, #8]
 8001266:	4463      	add	r3, ip
 8001268:	4909      	ldr	r1, [pc, #36]	; (8001290 <__aeabi_dmul+0x370>)
 800126a:	428b      	cmp	r3, r1
 800126c:	dd00      	ble.n	8001270 <__aeabi_dmul+0x350>
 800126e:	e710      	b.n	8001092 <__aeabi_dmul+0x172>
 8001270:	0761      	lsls	r1, r4, #29
 8001272:	08c5      	lsrs	r5, r0, #3
 8001274:	0264      	lsls	r4, r4, #9
 8001276:	055b      	lsls	r3, r3, #21
 8001278:	430d      	orrs	r5, r1
 800127a:	0b24      	lsrs	r4, r4, #12
 800127c:	0d5b      	lsrs	r3, r3, #21
 800127e:	e6c1      	b.n	8001004 <__aeabi_dmul+0xe4>
 8001280:	000007ff 	.word	0x000007ff
 8001284:	fffffc01 	.word	0xfffffc01
 8001288:	000003ff 	.word	0x000003ff
 800128c:	feffffff 	.word	0xfeffffff
 8001290:	000007fe 	.word	0x000007fe
 8001294:	464b      	mov	r3, r9
 8001296:	4323      	orrs	r3, r4
 8001298:	d059      	beq.n	800134e <__aeabi_dmul+0x42e>
 800129a:	2c00      	cmp	r4, #0
 800129c:	d100      	bne.n	80012a0 <__aeabi_dmul+0x380>
 800129e:	e0a3      	b.n	80013e8 <__aeabi_dmul+0x4c8>
 80012a0:	0020      	movs	r0, r4
 80012a2:	f000 f9b5 	bl	8001610 <__clzsi2>
 80012a6:	0001      	movs	r1, r0
 80012a8:	0003      	movs	r3, r0
 80012aa:	390b      	subs	r1, #11
 80012ac:	221d      	movs	r2, #29
 80012ae:	1a52      	subs	r2, r2, r1
 80012b0:	4649      	mov	r1, r9
 80012b2:	0018      	movs	r0, r3
 80012b4:	40d1      	lsrs	r1, r2
 80012b6:	464a      	mov	r2, r9
 80012b8:	3808      	subs	r0, #8
 80012ba:	4082      	lsls	r2, r0
 80012bc:	4084      	lsls	r4, r0
 80012be:	0010      	movs	r0, r2
 80012c0:	430c      	orrs	r4, r1
 80012c2:	4a74      	ldr	r2, [pc, #464]	; (8001494 <__aeabi_dmul+0x574>)
 80012c4:	1aeb      	subs	r3, r5, r3
 80012c6:	4694      	mov	ip, r2
 80012c8:	4642      	mov	r2, r8
 80012ca:	4463      	add	r3, ip
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	9b01      	ldr	r3, [sp, #4]
 80012d0:	407a      	eors	r2, r7
 80012d2:	3301      	adds	r3, #1
 80012d4:	2100      	movs	r1, #0
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	9302      	str	r3, [sp, #8]
 80012da:	2e0a      	cmp	r6, #10
 80012dc:	dd00      	ble.n	80012e0 <__aeabi_dmul+0x3c0>
 80012de:	e667      	b.n	8000fb0 <__aeabi_dmul+0x90>
 80012e0:	e683      	b.n	8000fea <__aeabi_dmul+0xca>
 80012e2:	465b      	mov	r3, fp
 80012e4:	4303      	orrs	r3, r0
 80012e6:	469a      	mov	sl, r3
 80012e8:	d02a      	beq.n	8001340 <__aeabi_dmul+0x420>
 80012ea:	465b      	mov	r3, fp
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d06d      	beq.n	80013cc <__aeabi_dmul+0x4ac>
 80012f0:	4658      	mov	r0, fp
 80012f2:	f000 f98d 	bl	8001610 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0003      	movs	r3, r0
 80012fa:	390b      	subs	r1, #11
 80012fc:	221d      	movs	r2, #29
 80012fe:	1a52      	subs	r2, r2, r1
 8001300:	0021      	movs	r1, r4
 8001302:	0018      	movs	r0, r3
 8001304:	465d      	mov	r5, fp
 8001306:	40d1      	lsrs	r1, r2
 8001308:	3808      	subs	r0, #8
 800130a:	4085      	lsls	r5, r0
 800130c:	000a      	movs	r2, r1
 800130e:	4084      	lsls	r4, r0
 8001310:	432a      	orrs	r2, r5
 8001312:	4693      	mov	fp, r2
 8001314:	46a2      	mov	sl, r4
 8001316:	4d5f      	ldr	r5, [pc, #380]	; (8001494 <__aeabi_dmul+0x574>)
 8001318:	2600      	movs	r6, #0
 800131a:	1aed      	subs	r5, r5, r3
 800131c:	2300      	movs	r3, #0
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	e625      	b.n	8000f6e <__aeabi_dmul+0x4e>
 8001322:	465b      	mov	r3, fp
 8001324:	4303      	orrs	r3, r0
 8001326:	469a      	mov	sl, r3
 8001328:	d105      	bne.n	8001336 <__aeabi_dmul+0x416>
 800132a:	2300      	movs	r3, #0
 800132c:	469b      	mov	fp, r3
 800132e:	3302      	adds	r3, #2
 8001330:	2608      	movs	r6, #8
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	e61b      	b.n	8000f6e <__aeabi_dmul+0x4e>
 8001336:	2303      	movs	r3, #3
 8001338:	4682      	mov	sl, r0
 800133a:	260c      	movs	r6, #12
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	e616      	b.n	8000f6e <__aeabi_dmul+0x4e>
 8001340:	2300      	movs	r3, #0
 8001342:	469b      	mov	fp, r3
 8001344:	3301      	adds	r3, #1
 8001346:	2604      	movs	r6, #4
 8001348:	2500      	movs	r5, #0
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	e60f      	b.n	8000f6e <__aeabi_dmul+0x4e>
 800134e:	4642      	mov	r2, r8
 8001350:	3301      	adds	r3, #1
 8001352:	9501      	str	r5, [sp, #4]
 8001354:	431e      	orrs	r6, r3
 8001356:	9b01      	ldr	r3, [sp, #4]
 8001358:	407a      	eors	r2, r7
 800135a:	3301      	adds	r3, #1
 800135c:	2400      	movs	r4, #0
 800135e:	2000      	movs	r0, #0
 8001360:	2101      	movs	r1, #1
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	9302      	str	r3, [sp, #8]
 8001366:	2e0a      	cmp	r6, #10
 8001368:	dd00      	ble.n	800136c <__aeabi_dmul+0x44c>
 800136a:	e621      	b.n	8000fb0 <__aeabi_dmul+0x90>
 800136c:	e63d      	b.n	8000fea <__aeabi_dmul+0xca>
 800136e:	2101      	movs	r1, #1
 8001370:	1ac9      	subs	r1, r1, r3
 8001372:	2938      	cmp	r1, #56	; 0x38
 8001374:	dd00      	ble.n	8001378 <__aeabi_dmul+0x458>
 8001376:	e642      	b.n	8000ffe <__aeabi_dmul+0xde>
 8001378:	291f      	cmp	r1, #31
 800137a:	dd47      	ble.n	800140c <__aeabi_dmul+0x4ec>
 800137c:	261f      	movs	r6, #31
 800137e:	0025      	movs	r5, r4
 8001380:	4276      	negs	r6, r6
 8001382:	1af3      	subs	r3, r6, r3
 8001384:	40dd      	lsrs	r5, r3
 8001386:	002b      	movs	r3, r5
 8001388:	2920      	cmp	r1, #32
 800138a:	d005      	beq.n	8001398 <__aeabi_dmul+0x478>
 800138c:	4942      	ldr	r1, [pc, #264]	; (8001498 <__aeabi_dmul+0x578>)
 800138e:	9d02      	ldr	r5, [sp, #8]
 8001390:	468c      	mov	ip, r1
 8001392:	4465      	add	r5, ip
 8001394:	40ac      	lsls	r4, r5
 8001396:	4320      	orrs	r0, r4
 8001398:	1e41      	subs	r1, r0, #1
 800139a:	4188      	sbcs	r0, r1
 800139c:	4318      	orrs	r0, r3
 800139e:	2307      	movs	r3, #7
 80013a0:	001d      	movs	r5, r3
 80013a2:	2400      	movs	r4, #0
 80013a4:	4005      	ands	r5, r0
 80013a6:	4203      	tst	r3, r0
 80013a8:	d04a      	beq.n	8001440 <__aeabi_dmul+0x520>
 80013aa:	230f      	movs	r3, #15
 80013ac:	2400      	movs	r4, #0
 80013ae:	4003      	ands	r3, r0
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d042      	beq.n	800143a <__aeabi_dmul+0x51a>
 80013b4:	1d03      	adds	r3, r0, #4
 80013b6:	4283      	cmp	r3, r0
 80013b8:	4180      	sbcs	r0, r0
 80013ba:	4240      	negs	r0, r0
 80013bc:	1824      	adds	r4, r4, r0
 80013be:	0018      	movs	r0, r3
 80013c0:	0223      	lsls	r3, r4, #8
 80013c2:	d53a      	bpl.n	800143a <__aeabi_dmul+0x51a>
 80013c4:	2301      	movs	r3, #1
 80013c6:	2400      	movs	r4, #0
 80013c8:	2500      	movs	r5, #0
 80013ca:	e61b      	b.n	8001004 <__aeabi_dmul+0xe4>
 80013cc:	f000 f920 	bl	8001610 <__clzsi2>
 80013d0:	0001      	movs	r1, r0
 80013d2:	0003      	movs	r3, r0
 80013d4:	3115      	adds	r1, #21
 80013d6:	3320      	adds	r3, #32
 80013d8:	291c      	cmp	r1, #28
 80013da:	dd8f      	ble.n	80012fc <__aeabi_dmul+0x3dc>
 80013dc:	3808      	subs	r0, #8
 80013de:	2200      	movs	r2, #0
 80013e0:	4084      	lsls	r4, r0
 80013e2:	4692      	mov	sl, r2
 80013e4:	46a3      	mov	fp, r4
 80013e6:	e796      	b.n	8001316 <__aeabi_dmul+0x3f6>
 80013e8:	f000 f912 	bl	8001610 <__clzsi2>
 80013ec:	0001      	movs	r1, r0
 80013ee:	0003      	movs	r3, r0
 80013f0:	3115      	adds	r1, #21
 80013f2:	3320      	adds	r3, #32
 80013f4:	291c      	cmp	r1, #28
 80013f6:	dc00      	bgt.n	80013fa <__aeabi_dmul+0x4da>
 80013f8:	e758      	b.n	80012ac <__aeabi_dmul+0x38c>
 80013fa:	0002      	movs	r2, r0
 80013fc:	464c      	mov	r4, r9
 80013fe:	3a08      	subs	r2, #8
 8001400:	2000      	movs	r0, #0
 8001402:	4094      	lsls	r4, r2
 8001404:	e75d      	b.n	80012c2 <__aeabi_dmul+0x3a2>
 8001406:	9b01      	ldr	r3, [sp, #4]
 8001408:	9302      	str	r3, [sp, #8]
 800140a:	e711      	b.n	8001230 <__aeabi_dmul+0x310>
 800140c:	4b23      	ldr	r3, [pc, #140]	; (800149c <__aeabi_dmul+0x57c>)
 800140e:	0026      	movs	r6, r4
 8001410:	469c      	mov	ip, r3
 8001412:	0003      	movs	r3, r0
 8001414:	9d02      	ldr	r5, [sp, #8]
 8001416:	40cb      	lsrs	r3, r1
 8001418:	4465      	add	r5, ip
 800141a:	40ae      	lsls	r6, r5
 800141c:	431e      	orrs	r6, r3
 800141e:	0003      	movs	r3, r0
 8001420:	40ab      	lsls	r3, r5
 8001422:	1e58      	subs	r0, r3, #1
 8001424:	4183      	sbcs	r3, r0
 8001426:	0030      	movs	r0, r6
 8001428:	4318      	orrs	r0, r3
 800142a:	40cc      	lsrs	r4, r1
 800142c:	0743      	lsls	r3, r0, #29
 800142e:	d0c7      	beq.n	80013c0 <__aeabi_dmul+0x4a0>
 8001430:	230f      	movs	r3, #15
 8001432:	4003      	ands	r3, r0
 8001434:	2b04      	cmp	r3, #4
 8001436:	d1bd      	bne.n	80013b4 <__aeabi_dmul+0x494>
 8001438:	e7c2      	b.n	80013c0 <__aeabi_dmul+0x4a0>
 800143a:	0765      	lsls	r5, r4, #29
 800143c:	0264      	lsls	r4, r4, #9
 800143e:	0b24      	lsrs	r4, r4, #12
 8001440:	08c0      	lsrs	r0, r0, #3
 8001442:	2300      	movs	r3, #0
 8001444:	4305      	orrs	r5, r0
 8001446:	e5dd      	b.n	8001004 <__aeabi_dmul+0xe4>
 8001448:	2500      	movs	r5, #0
 800144a:	2302      	movs	r3, #2
 800144c:	2e0f      	cmp	r6, #15
 800144e:	d10c      	bne.n	800146a <__aeabi_dmul+0x54a>
 8001450:	2480      	movs	r4, #128	; 0x80
 8001452:	465b      	mov	r3, fp
 8001454:	0324      	lsls	r4, r4, #12
 8001456:	4223      	tst	r3, r4
 8001458:	d00e      	beq.n	8001478 <__aeabi_dmul+0x558>
 800145a:	4221      	tst	r1, r4
 800145c:	d10c      	bne.n	8001478 <__aeabi_dmul+0x558>
 800145e:	430c      	orrs	r4, r1
 8001460:	0324      	lsls	r4, r4, #12
 8001462:	003a      	movs	r2, r7
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <__aeabi_dmul+0x580>)
 8001466:	0b24      	lsrs	r4, r4, #12
 8001468:	e5cc      	b.n	8001004 <__aeabi_dmul+0xe4>
 800146a:	2e0b      	cmp	r6, #11
 800146c:	d000      	beq.n	8001470 <__aeabi_dmul+0x550>
 800146e:	e5a2      	b.n	8000fb6 <__aeabi_dmul+0x96>
 8001470:	468b      	mov	fp, r1
 8001472:	46aa      	mov	sl, r5
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	e5f7      	b.n	8001068 <__aeabi_dmul+0x148>
 8001478:	2480      	movs	r4, #128	; 0x80
 800147a:	465b      	mov	r3, fp
 800147c:	0324      	lsls	r4, r4, #12
 800147e:	431c      	orrs	r4, r3
 8001480:	0324      	lsls	r4, r4, #12
 8001482:	4642      	mov	r2, r8
 8001484:	4655      	mov	r5, sl
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <__aeabi_dmul+0x580>)
 8001488:	0b24      	lsrs	r4, r4, #12
 800148a:	e5bb      	b.n	8001004 <__aeabi_dmul+0xe4>
 800148c:	464d      	mov	r5, r9
 800148e:	0021      	movs	r1, r4
 8001490:	2303      	movs	r3, #3
 8001492:	e7db      	b.n	800144c <__aeabi_dmul+0x52c>
 8001494:	fffffc0d 	.word	0xfffffc0d
 8001498:	0000043e 	.word	0x0000043e
 800149c:	0000041e 	.word	0x0000041e
 80014a0:	000007ff 	.word	0x000007ff

080014a4 <__aeabi_i2d>:
 80014a4:	b570      	push	{r4, r5, r6, lr}
 80014a6:	2800      	cmp	r0, #0
 80014a8:	d016      	beq.n	80014d8 <__aeabi_i2d+0x34>
 80014aa:	17c3      	asrs	r3, r0, #31
 80014ac:	18c5      	adds	r5, r0, r3
 80014ae:	405d      	eors	r5, r3
 80014b0:	0fc4      	lsrs	r4, r0, #31
 80014b2:	0028      	movs	r0, r5
 80014b4:	f000 f8ac 	bl	8001610 <__clzsi2>
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <__aeabi_i2d+0x5c>)
 80014ba:	1a1b      	subs	r3, r3, r0
 80014bc:	280a      	cmp	r0, #10
 80014be:	dc16      	bgt.n	80014ee <__aeabi_i2d+0x4a>
 80014c0:	0002      	movs	r2, r0
 80014c2:	002e      	movs	r6, r5
 80014c4:	3215      	adds	r2, #21
 80014c6:	4096      	lsls	r6, r2
 80014c8:	220b      	movs	r2, #11
 80014ca:	1a12      	subs	r2, r2, r0
 80014cc:	40d5      	lsrs	r5, r2
 80014ce:	055b      	lsls	r3, r3, #21
 80014d0:	032d      	lsls	r5, r5, #12
 80014d2:	0b2d      	lsrs	r5, r5, #12
 80014d4:	0d5b      	lsrs	r3, r3, #21
 80014d6:	e003      	b.n	80014e0 <__aeabi_i2d+0x3c>
 80014d8:	2400      	movs	r4, #0
 80014da:	2300      	movs	r3, #0
 80014dc:	2500      	movs	r5, #0
 80014de:	2600      	movs	r6, #0
 80014e0:	051b      	lsls	r3, r3, #20
 80014e2:	432b      	orrs	r3, r5
 80014e4:	07e4      	lsls	r4, r4, #31
 80014e6:	4323      	orrs	r3, r4
 80014e8:	0030      	movs	r0, r6
 80014ea:	0019      	movs	r1, r3
 80014ec:	bd70      	pop	{r4, r5, r6, pc}
 80014ee:	380b      	subs	r0, #11
 80014f0:	4085      	lsls	r5, r0
 80014f2:	055b      	lsls	r3, r3, #21
 80014f4:	032d      	lsls	r5, r5, #12
 80014f6:	2600      	movs	r6, #0
 80014f8:	0b2d      	lsrs	r5, r5, #12
 80014fa:	0d5b      	lsrs	r3, r3, #21
 80014fc:	e7f0      	b.n	80014e0 <__aeabi_i2d+0x3c>
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	0000041e 	.word	0x0000041e

08001504 <__aeabi_d2f>:
 8001504:	0002      	movs	r2, r0
 8001506:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001508:	004b      	lsls	r3, r1, #1
 800150a:	030d      	lsls	r5, r1, #12
 800150c:	0f40      	lsrs	r0, r0, #29
 800150e:	0d5b      	lsrs	r3, r3, #21
 8001510:	0fcc      	lsrs	r4, r1, #31
 8001512:	0a6d      	lsrs	r5, r5, #9
 8001514:	493a      	ldr	r1, [pc, #232]	; (8001600 <__aeabi_d2f+0xfc>)
 8001516:	4305      	orrs	r5, r0
 8001518:	1c58      	adds	r0, r3, #1
 800151a:	00d7      	lsls	r7, r2, #3
 800151c:	4208      	tst	r0, r1
 800151e:	d00a      	beq.n	8001536 <__aeabi_d2f+0x32>
 8001520:	4938      	ldr	r1, [pc, #224]	; (8001604 <__aeabi_d2f+0x100>)
 8001522:	1859      	adds	r1, r3, r1
 8001524:	29fe      	cmp	r1, #254	; 0xfe
 8001526:	dd16      	ble.n	8001556 <__aeabi_d2f+0x52>
 8001528:	20ff      	movs	r0, #255	; 0xff
 800152a:	2200      	movs	r2, #0
 800152c:	05c0      	lsls	r0, r0, #23
 800152e:	4310      	orrs	r0, r2
 8001530:	07e4      	lsls	r4, r4, #31
 8001532:	4320      	orrs	r0, r4
 8001534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001536:	2b00      	cmp	r3, #0
 8001538:	d106      	bne.n	8001548 <__aeabi_d2f+0x44>
 800153a:	433d      	orrs	r5, r7
 800153c:	d026      	beq.n	800158c <__aeabi_d2f+0x88>
 800153e:	2205      	movs	r2, #5
 8001540:	0192      	lsls	r2, r2, #6
 8001542:	0a52      	lsrs	r2, r2, #9
 8001544:	b2d8      	uxtb	r0, r3
 8001546:	e7f1      	b.n	800152c <__aeabi_d2f+0x28>
 8001548:	432f      	orrs	r7, r5
 800154a:	d0ed      	beq.n	8001528 <__aeabi_d2f+0x24>
 800154c:	2280      	movs	r2, #128	; 0x80
 800154e:	03d2      	lsls	r2, r2, #15
 8001550:	20ff      	movs	r0, #255	; 0xff
 8001552:	432a      	orrs	r2, r5
 8001554:	e7ea      	b.n	800152c <__aeabi_d2f+0x28>
 8001556:	2900      	cmp	r1, #0
 8001558:	dd1b      	ble.n	8001592 <__aeabi_d2f+0x8e>
 800155a:	0192      	lsls	r2, r2, #6
 800155c:	1e50      	subs	r0, r2, #1
 800155e:	4182      	sbcs	r2, r0
 8001560:	00ed      	lsls	r5, r5, #3
 8001562:	0f7f      	lsrs	r7, r7, #29
 8001564:	432a      	orrs	r2, r5
 8001566:	433a      	orrs	r2, r7
 8001568:	0753      	lsls	r3, r2, #29
 800156a:	d047      	beq.n	80015fc <__aeabi_d2f+0xf8>
 800156c:	230f      	movs	r3, #15
 800156e:	4013      	ands	r3, r2
 8001570:	2b04      	cmp	r3, #4
 8001572:	d000      	beq.n	8001576 <__aeabi_d2f+0x72>
 8001574:	3204      	adds	r2, #4
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	04db      	lsls	r3, r3, #19
 800157a:	4013      	ands	r3, r2
 800157c:	d03e      	beq.n	80015fc <__aeabi_d2f+0xf8>
 800157e:	1c48      	adds	r0, r1, #1
 8001580:	29fe      	cmp	r1, #254	; 0xfe
 8001582:	d0d1      	beq.n	8001528 <__aeabi_d2f+0x24>
 8001584:	0192      	lsls	r2, r2, #6
 8001586:	0a52      	lsrs	r2, r2, #9
 8001588:	b2c0      	uxtb	r0, r0
 800158a:	e7cf      	b.n	800152c <__aeabi_d2f+0x28>
 800158c:	2000      	movs	r0, #0
 800158e:	2200      	movs	r2, #0
 8001590:	e7cc      	b.n	800152c <__aeabi_d2f+0x28>
 8001592:	000a      	movs	r2, r1
 8001594:	3217      	adds	r2, #23
 8001596:	db2f      	blt.n	80015f8 <__aeabi_d2f+0xf4>
 8001598:	2680      	movs	r6, #128	; 0x80
 800159a:	0436      	lsls	r6, r6, #16
 800159c:	432e      	orrs	r6, r5
 800159e:	251e      	movs	r5, #30
 80015a0:	1a6d      	subs	r5, r5, r1
 80015a2:	2d1f      	cmp	r5, #31
 80015a4:	dd11      	ble.n	80015ca <__aeabi_d2f+0xc6>
 80015a6:	2202      	movs	r2, #2
 80015a8:	4252      	negs	r2, r2
 80015aa:	1a52      	subs	r2, r2, r1
 80015ac:	0031      	movs	r1, r6
 80015ae:	40d1      	lsrs	r1, r2
 80015b0:	2d20      	cmp	r5, #32
 80015b2:	d004      	beq.n	80015be <__aeabi_d2f+0xba>
 80015b4:	4a14      	ldr	r2, [pc, #80]	; (8001608 <__aeabi_d2f+0x104>)
 80015b6:	4694      	mov	ip, r2
 80015b8:	4463      	add	r3, ip
 80015ba:	409e      	lsls	r6, r3
 80015bc:	4337      	orrs	r7, r6
 80015be:	003a      	movs	r2, r7
 80015c0:	1e53      	subs	r3, r2, #1
 80015c2:	419a      	sbcs	r2, r3
 80015c4:	430a      	orrs	r2, r1
 80015c6:	2100      	movs	r1, #0
 80015c8:	e7ce      	b.n	8001568 <__aeabi_d2f+0x64>
 80015ca:	4a10      	ldr	r2, [pc, #64]	; (800160c <__aeabi_d2f+0x108>)
 80015cc:	0038      	movs	r0, r7
 80015ce:	4694      	mov	ip, r2
 80015d0:	4463      	add	r3, ip
 80015d2:	4098      	lsls	r0, r3
 80015d4:	003a      	movs	r2, r7
 80015d6:	1e41      	subs	r1, r0, #1
 80015d8:	4188      	sbcs	r0, r1
 80015da:	409e      	lsls	r6, r3
 80015dc:	40ea      	lsrs	r2, r5
 80015de:	4330      	orrs	r0, r6
 80015e0:	4302      	orrs	r2, r0
 80015e2:	2100      	movs	r1, #0
 80015e4:	0753      	lsls	r3, r2, #29
 80015e6:	d1c1      	bne.n	800156c <__aeabi_d2f+0x68>
 80015e8:	2180      	movs	r1, #128	; 0x80
 80015ea:	0013      	movs	r3, r2
 80015ec:	04c9      	lsls	r1, r1, #19
 80015ee:	2001      	movs	r0, #1
 80015f0:	400b      	ands	r3, r1
 80015f2:	420a      	tst	r2, r1
 80015f4:	d1c6      	bne.n	8001584 <__aeabi_d2f+0x80>
 80015f6:	e7a3      	b.n	8001540 <__aeabi_d2f+0x3c>
 80015f8:	2300      	movs	r3, #0
 80015fa:	e7a0      	b.n	800153e <__aeabi_d2f+0x3a>
 80015fc:	000b      	movs	r3, r1
 80015fe:	e79f      	b.n	8001540 <__aeabi_d2f+0x3c>
 8001600:	000007fe 	.word	0x000007fe
 8001604:	fffffc80 	.word	0xfffffc80
 8001608:	fffffca2 	.word	0xfffffca2
 800160c:	fffffc82 	.word	0xfffffc82

08001610 <__clzsi2>:
 8001610:	211c      	movs	r1, #28
 8001612:	2301      	movs	r3, #1
 8001614:	041b      	lsls	r3, r3, #16
 8001616:	4298      	cmp	r0, r3
 8001618:	d301      	bcc.n	800161e <__clzsi2+0xe>
 800161a:	0c00      	lsrs	r0, r0, #16
 800161c:	3910      	subs	r1, #16
 800161e:	0a1b      	lsrs	r3, r3, #8
 8001620:	4298      	cmp	r0, r3
 8001622:	d301      	bcc.n	8001628 <__clzsi2+0x18>
 8001624:	0a00      	lsrs	r0, r0, #8
 8001626:	3908      	subs	r1, #8
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	4298      	cmp	r0, r3
 800162c:	d301      	bcc.n	8001632 <__clzsi2+0x22>
 800162e:	0900      	lsrs	r0, r0, #4
 8001630:	3904      	subs	r1, #4
 8001632:	a202      	add	r2, pc, #8	; (adr r2, 800163c <__clzsi2+0x2c>)
 8001634:	5c10      	ldrb	r0, [r2, r0]
 8001636:	1840      	adds	r0, r0, r1
 8001638:	4770      	bx	lr
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	02020304 	.word	0x02020304
 8001640:	01010101 	.word	0x01010101
	...

0800164c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800164c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164e:	b0a5      	sub	sp, #148	; 0x94
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001652:	f000 ff23 	bl	800249c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001656:	f000 f9f7 	bl	8001a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800165a:	f000 fb73 	bl	8001d44 <MX_GPIO_Init>
  MX_I2C2_Init();
 800165e:	f000 fa59 	bl	8001b14 <MX_I2C2_Init>
  MX_TSC_Init();
 8001662:	f000 fad5 	bl	8001c10 <MX_TSC_Init>
  MX_USB_PCD_Init();
 8001666:	f000 fb47 	bl	8001cf8 <MX_USB_PCD_Init>
  MX_SPI2_Init();
 800166a:	f000 fa93 	bl	8001b94 <MX_SPI2_Init>
  MX_USART4_UART_Init();
 800166e:	f000 fb13 	bl	8001c98 <MX_USART4_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t modoSingleMensure = 0x3F;
 8001672:	2373      	movs	r3, #115	; 0x73
 8001674:	18fb      	adds	r3, r7, r3
 8001676:	223f      	movs	r2, #63	; 0x3f
 8001678:	701a      	strb	r2, [r3, #0]
  uint8_t readMensure = 0x4F;
 800167a:	2372      	movs	r3, #114	; 0x72
 800167c:	18fb      	adds	r3, r7, r3
 800167e:	224f      	movs	r2, #79	; 0x4f
 8001680:	701a      	strb	r2, [r3, #0]
  uint8_t MemoryRecall = 0xD0;
 8001682:	238b      	movs	r3, #139	; 0x8b
 8001684:	18fb      	adds	r3, r7, r3
 8001686:	22d0      	movs	r2, #208	; 0xd0
 8001688:	701a      	strb	r2, [r3, #0]
  uint16_t valorNull = 0xFFFF;
 800168a:	2388      	movs	r3, #136	; 0x88
 800168c:	18fb      	adds	r3, r7, r3
 800168e:	2201      	movs	r2, #1
 8001690:	4252      	negs	r2, r2
 8001692:	801a      	strh	r2, [r3, #0]
  uint16_t valorMedio = 0x8000;
 8001694:	2386      	movs	r3, #134	; 0x86
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	4ad8      	ldr	r2, [pc, #864]	; (80019fc <main+0x3b0>)
 800169a:	801a      	strh	r2, [r3, #0]
  uint8_t buf[8] = {0};
 800169c:	2368      	movs	r3, #104	; 0x68
 800169e:	18fb      	adds	r3, r7, r3
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	2200      	movs	r2, #0
 80016a6:	605a      	str	r2, [r3, #4]
  uint8_t registeBuf[2] = {0};
 80016a8:	2364      	movs	r3, #100	; 0x64
 80016aa:	18fb      	adds	r3, r7, r3
 80016ac:	2200      	movs	r2, #0
 80016ae:	801a      	strh	r2, [r3, #0]
  uint16_t registe;
  uint8_t writeRegister1[4] = {0x60, 0x00, 0x5C, 0x00};
 80016b0:	245c      	movs	r4, #92	; 0x5c
 80016b2:	193b      	adds	r3, r7, r4
 80016b4:	4ad2      	ldr	r2, [pc, #840]	; (8001a00 <main+0x3b4>)
 80016b6:	601a      	str	r2, [r3, #0]
  uint8_t writeRegister2[4] = {0x60, 0x02, 0xB4, 0x08};
 80016b8:	2558      	movs	r5, #88	; 0x58
 80016ba:	197b      	adds	r3, r7, r5
 80016bc:	4ad1      	ldr	r2, [pc, #836]	; (8001a04 <main+0x3b8>)
 80016be:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	015b      	lsls	r3, r3, #5
 80016c4:	48d0      	ldr	r0, [pc, #832]	; (8001a08 <main+0x3bc>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	0019      	movs	r1, r3
 80016ca:	f001 f99b 	bl	8002a04 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80016ce:	2032      	movs	r0, #50	; 0x32
 80016d0:	f000 ff48 	bl	8002564 <HAL_Delay>
  EnviarCmd(writeRegister1, 4);
 80016d4:	193b      	adds	r3, r7, r4
 80016d6:	2104      	movs	r1, #4
 80016d8:	0018      	movs	r0, r3
 80016da:	f000 fbcb 	bl	8001e74 <EnviarCmd>
  EnviarCmd(writeRegister2, 4);
 80016de:	197b      	adds	r3, r7, r5
 80016e0:	2104      	movs	r1, #4
 80016e2:	0018      	movs	r0, r3
 80016e4:	f000 fbc6 	bl	8001e74 <EnviarCmd>
//  EnviarCmd(&MemoryRecall, 4);
  for(int i = 0; i < 10; i++){
 80016e8:	2300      	movs	r3, #0
 80016ea:	228c      	movs	r2, #140	; 0x8c
 80016ec:	18ba      	adds	r2, r7, r2
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	e00e      	b.n	8001710 <main+0xc4>
	  READ_REGISTER(i, &registe);
 80016f2:	248c      	movs	r4, #140	; 0x8c
 80016f4:	193b      	adds	r3, r7, r4
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2262      	movs	r2, #98	; 0x62
 80016fc:	18ba      	adds	r2, r7, r2
 80016fe:	0011      	movs	r1, r2
 8001700:	0018      	movs	r0, r3
 8001702:	f000 fc2d 	bl	8001f60 <READ_REGISTER>
  for(int i = 0; i < 10; i++){
 8001706:	193b      	adds	r3, r7, r4
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	3301      	adds	r3, #1
 800170c:	193a      	adds	r2, r7, r4
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	238c      	movs	r3, #140	; 0x8c
 8001712:	18fb      	adds	r3, r7, r3
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b09      	cmp	r3, #9
 8001718:	ddeb      	ble.n	80016f2 <main+0xa6>
  }

  while (1)
  {
	EnviarCmd(&modoSingleMensure, 1);
 800171a:	2373      	movs	r3, #115	; 0x73
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	2101      	movs	r1, #1
 8001720:	0018      	movs	r0, r3
 8001722:	f000 fba7 	bl	8001e74 <EnviarCmd>
	LerCmd(&readMensure, buf, 1, 8);
 8001726:	2468      	movs	r4, #104	; 0x68
 8001728:	1939      	adds	r1, r7, r4
 800172a:	2372      	movs	r3, #114	; 0x72
 800172c:	18f8      	adds	r0, r7, r3
 800172e:	2308      	movs	r3, #8
 8001730:	2201      	movs	r2, #1
 8001732:	f000 fbd3 	bl	8001edc <LerCmd>
//
	float temp = ((buf[0] << 8 | buf[1])-46244)/45.2+25;
 8001736:	193b      	adds	r3, r7, r4
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	193a      	adds	r2, r7, r4
 800173e:	7852      	ldrb	r2, [r2, #1]
 8001740:	4313      	orrs	r3, r2
 8001742:	4ab2      	ldr	r2, [pc, #712]	; (8001a0c <main+0x3c0>)
 8001744:	4694      	mov	ip, r2
 8001746:	4463      	add	r3, ip
 8001748:	0018      	movs	r0, r3
 800174a:	f7ff feab 	bl	80014a4 <__aeabi_i2d>
 800174e:	4ab0      	ldr	r2, [pc, #704]	; (8001a10 <main+0x3c4>)
 8001750:	4bb0      	ldr	r3, [pc, #704]	; (8001a14 <main+0x3c8>)
 8001752:	f7ff f8f7 	bl	8000944 <__aeabi_ddiv>
 8001756:	0002      	movs	r2, r0
 8001758:	000b      	movs	r3, r1
 800175a:	0010      	movs	r0, r2
 800175c:	0019      	movs	r1, r3
 800175e:	2200      	movs	r2, #0
 8001760:	4bad      	ldr	r3, [pc, #692]	; (8001a18 <main+0x3cc>)
 8001762:	f7fe fd8f 	bl	8000284 <__aeabi_dadd>
 8001766:	0002      	movs	r2, r0
 8001768:	000b      	movs	r3, r1
 800176a:	0010      	movs	r0, r2
 800176c:	0019      	movs	r1, r3
 800176e:	f7ff fec9 	bl	8001504 <__aeabi_d2f>
 8001772:	1c03      	adds	r3, r0, #0
 8001774:	2280      	movs	r2, #128	; 0x80
 8001776:	18ba      	adds	r2, r7, r2
 8001778:	6013      	str	r3, [r2, #0]
	float magX = (((buf[2] << 8 | buf[3]) > valorMedio)? -(valorNull - (buf[2] << 8 | buf[3])) : (buf[2] << 8 | buf[3]))*0.537;
 800177a:	193b      	adds	r3, r7, r4
 800177c:	789b      	ldrb	r3, [r3, #2]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	193a      	adds	r2, r7, r4
 8001782:	78d2      	ldrb	r2, [r2, #3]
 8001784:	431a      	orrs	r2, r3
 8001786:	2386      	movs	r3, #134	; 0x86
 8001788:	18fb      	adds	r3, r7, r3
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	dd0d      	ble.n	80017ac <main+0x160>
 8001790:	193b      	adds	r3, r7, r4
 8001792:	789b      	ldrb	r3, [r3, #2]
 8001794:	021b      	lsls	r3, r3, #8
 8001796:	193a      	adds	r2, r7, r4
 8001798:	78d2      	ldrb	r2, [r2, #3]
 800179a:	431a      	orrs	r2, r3
 800179c:	2388      	movs	r3, #136	; 0x88
 800179e:	18fb      	adds	r3, r7, r3
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	0018      	movs	r0, r3
 80017a6:	f7ff fe7d 	bl	80014a4 <__aeabi_i2d>
 80017aa:	e009      	b.n	80017c0 <main+0x174>
 80017ac:	2268      	movs	r2, #104	; 0x68
 80017ae:	18bb      	adds	r3, r7, r2
 80017b0:	789b      	ldrb	r3, [r3, #2]
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	18ba      	adds	r2, r7, r2
 80017b6:	78d2      	ldrb	r2, [r2, #3]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	0018      	movs	r0, r3
 80017bc:	f7ff fe72 	bl	80014a4 <__aeabi_i2d>
 80017c0:	4a96      	ldr	r2, [pc, #600]	; (8001a1c <main+0x3d0>)
 80017c2:	4b97      	ldr	r3, [pc, #604]	; (8001a20 <main+0x3d4>)
 80017c4:	f7ff fbac 	bl	8000f20 <__aeabi_dmul>
 80017c8:	0002      	movs	r2, r0
 80017ca:	000b      	movs	r3, r1
 80017cc:	0010      	movs	r0, r2
 80017ce:	0019      	movs	r1, r3
 80017d0:	f7ff fe98 	bl	8001504 <__aeabi_d2f>
 80017d4:	1c03      	adds	r3, r0, #0
 80017d6:	67fb      	str	r3, [r7, #124]	; 0x7c
	float magY = (((buf[4] << 8 | buf[5]) > valorMedio)? -(valorNull - (buf[4] << 8 | buf[5])) : (buf[4] << 8 | buf[5]))*0.537;
 80017d8:	2168      	movs	r1, #104	; 0x68
 80017da:	187b      	adds	r3, r7, r1
 80017dc:	791b      	ldrb	r3, [r3, #4]
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	187a      	adds	r2, r7, r1
 80017e2:	7952      	ldrb	r2, [r2, #5]
 80017e4:	431a      	orrs	r2, r3
 80017e6:	2386      	movs	r3, #134	; 0x86
 80017e8:	18fb      	adds	r3, r7, r3
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	dd0d      	ble.n	800180c <main+0x1c0>
 80017f0:	187b      	adds	r3, r7, r1
 80017f2:	791b      	ldrb	r3, [r3, #4]
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	187a      	adds	r2, r7, r1
 80017f8:	7952      	ldrb	r2, [r2, #5]
 80017fa:	431a      	orrs	r2, r3
 80017fc:	2388      	movs	r3, #136	; 0x88
 80017fe:	18fb      	adds	r3, r7, r3
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	0018      	movs	r0, r3
 8001806:	f7ff fe4d 	bl	80014a4 <__aeabi_i2d>
 800180a:	e009      	b.n	8001820 <main+0x1d4>
 800180c:	2268      	movs	r2, #104	; 0x68
 800180e:	18bb      	adds	r3, r7, r2
 8001810:	791b      	ldrb	r3, [r3, #4]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	18ba      	adds	r2, r7, r2
 8001816:	7952      	ldrb	r2, [r2, #5]
 8001818:	4313      	orrs	r3, r2
 800181a:	0018      	movs	r0, r3
 800181c:	f7ff fe42 	bl	80014a4 <__aeabi_i2d>
 8001820:	4a7e      	ldr	r2, [pc, #504]	; (8001a1c <main+0x3d0>)
 8001822:	4b7f      	ldr	r3, [pc, #508]	; (8001a20 <main+0x3d4>)
 8001824:	f7ff fb7c 	bl	8000f20 <__aeabi_dmul>
 8001828:	0002      	movs	r2, r0
 800182a:	000b      	movs	r3, r1
 800182c:	0010      	movs	r0, r2
 800182e:	0019      	movs	r1, r3
 8001830:	f7ff fe68 	bl	8001504 <__aeabi_d2f>
 8001834:	1c03      	adds	r3, r0, #0
 8001836:	67bb      	str	r3, [r7, #120]	; 0x78
	float magZ = (((buf[6] << 8 | buf[7]) > valorMedio)? -(valorNull - (buf[6] << 8 | buf[7])) : (buf[6] << 8 | buf[7]))*0.979;
 8001838:	2168      	movs	r1, #104	; 0x68
 800183a:	187b      	adds	r3, r7, r1
 800183c:	799b      	ldrb	r3, [r3, #6]
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	187a      	adds	r2, r7, r1
 8001842:	79d2      	ldrb	r2, [r2, #7]
 8001844:	431a      	orrs	r2, r3
 8001846:	2386      	movs	r3, #134	; 0x86
 8001848:	18fb      	adds	r3, r7, r3
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	dd0d      	ble.n	800186c <main+0x220>
 8001850:	187b      	adds	r3, r7, r1
 8001852:	799b      	ldrb	r3, [r3, #6]
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	187a      	adds	r2, r7, r1
 8001858:	79d2      	ldrb	r2, [r2, #7]
 800185a:	431a      	orrs	r2, r3
 800185c:	2388      	movs	r3, #136	; 0x88
 800185e:	18fb      	adds	r3, r7, r3
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	0018      	movs	r0, r3
 8001866:	f7ff fe1d 	bl	80014a4 <__aeabi_i2d>
 800186a:	e009      	b.n	8001880 <main+0x234>
 800186c:	2268      	movs	r2, #104	; 0x68
 800186e:	18bb      	adds	r3, r7, r2
 8001870:	799b      	ldrb	r3, [r3, #6]
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	18ba      	adds	r2, r7, r2
 8001876:	79d2      	ldrb	r2, [r2, #7]
 8001878:	4313      	orrs	r3, r2
 800187a:	0018      	movs	r0, r3
 800187c:	f7ff fe12 	bl	80014a4 <__aeabi_i2d>
 8001880:	4a68      	ldr	r2, [pc, #416]	; (8001a24 <main+0x3d8>)
 8001882:	4b69      	ldr	r3, [pc, #420]	; (8001a28 <main+0x3dc>)
 8001884:	f7ff fb4c 	bl	8000f20 <__aeabi_dmul>
 8001888:	0002      	movs	r2, r0
 800188a:	000b      	movs	r3, r1
 800188c:	0010      	movs	r0, r2
 800188e:	0019      	movs	r1, r3
 8001890:	f7ff fe38 	bl	8001504 <__aeabi_d2f>
 8001894:	1c03      	adds	r3, r0, #0
 8001896:	677b      	str	r3, [r7, #116]	; 0x74

	uint8_t tempStr[6] = "";
 8001898:	2550      	movs	r5, #80	; 0x50
 800189a:	197b      	adds	r3, r7, r5
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	2200      	movs	r2, #0
 80018a2:	809a      	strh	r2, [r3, #4]
	sprintf((char *)tempStr,"%d", (int)temp);
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	18fb      	adds	r3, r7, r3
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	f7fe fccb 	bl	8000244 <__aeabi_f2iz>
 80018ae:	0002      	movs	r2, r0
 80018b0:	495e      	ldr	r1, [pc, #376]	; (8001a2c <main+0x3e0>)
 80018b2:	197b      	adds	r3, r7, r5
 80018b4:	0018      	movs	r0, r3
 80018b6:	f003 fdb9 	bl	800542c <siprintf>
	uint8_t magXstr[6] = "";
 80018ba:	2648      	movs	r6, #72	; 0x48
 80018bc:	19bb      	adds	r3, r7, r6
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	2200      	movs	r2, #0
 80018c4:	809a      	strh	r2, [r3, #4]
	sprintf((char *)magXstr,"%d", (int)magX);
 80018c6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80018c8:	f7fe fcbc 	bl	8000244 <__aeabi_f2iz>
 80018cc:	0002      	movs	r2, r0
 80018ce:	4957      	ldr	r1, [pc, #348]	; (8001a2c <main+0x3e0>)
 80018d0:	19bb      	adds	r3, r7, r6
 80018d2:	0018      	movs	r0, r3
 80018d4:	f003 fdaa 	bl	800542c <siprintf>
	uint8_t magYstr[6] = "";
 80018d8:	2440      	movs	r4, #64	; 0x40
 80018da:	193b      	adds	r3, r7, r4
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	2200      	movs	r2, #0
 80018e2:	809a      	strh	r2, [r3, #4]
	sprintf((char *)magYstr,"%d", (int)magY);
 80018e4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80018e6:	f7fe fcad 	bl	8000244 <__aeabi_f2iz>
 80018ea:	0002      	movs	r2, r0
 80018ec:	494f      	ldr	r1, [pc, #316]	; (8001a2c <main+0x3e0>)
 80018ee:	193b      	adds	r3, r7, r4
 80018f0:	0018      	movs	r0, r3
 80018f2:	f003 fd9b 	bl	800542c <siprintf>
	uint8_t magZstr[6] = "";
 80018f6:	2338      	movs	r3, #56	; 0x38
 80018f8:	001c      	movs	r4, r3
 80018fa:	18fb      	adds	r3, r7, r3
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	2200      	movs	r2, #0
 8001902:	809a      	strh	r2, [r3, #4]
	sprintf((char *)magZstr,"%d", (int)magZ);
 8001904:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001906:	f7fe fc9d 	bl	8000244 <__aeabi_f2iz>
 800190a:	0002      	movs	r2, r0
 800190c:	4947      	ldr	r1, [pc, #284]	; (8001a2c <main+0x3e0>)
 800190e:	0023      	movs	r3, r4
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	0018      	movs	r0, r3
 8001914:	f003 fd8a 	bl	800542c <siprintf>
	uint8_t text[50] = "\tTemp: ";
 8001918:	1d3c      	adds	r4, r7, #4
 800191a:	4b45      	ldr	r3, [pc, #276]	; (8001a30 <main+0x3e4>)
 800191c:	0020      	movs	r0, r4
 800191e:	0019      	movs	r1, r3
 8001920:	2308      	movs	r3, #8
 8001922:	001a      	movs	r2, r3
 8001924:	f003 fde4 	bl	80054f0 <memcpy>
 8001928:	0022      	movs	r2, r4
 800192a:	3208      	adds	r2, #8
 800192c:	0013      	movs	r3, r2
 800192e:	222a      	movs	r2, #42	; 0x2a
 8001930:	2100      	movs	r1, #0
 8001932:	0018      	movs	r0, r3
 8001934:	f003 fd9a 	bl	800546c <memset>

	strcat((char *)text, (char *)tempStr);
 8001938:	197a      	adds	r2, r7, r5
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	0011      	movs	r1, r2
 800193e:	0018      	movs	r0, r3
 8001940:	f003 fd9c 	bl	800547c <strcat>
	strcat((char *)text, "\tMagX: ");
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	0018      	movs	r0, r3
 8001948:	f7fe fbde 	bl	8000108 <strlen>
 800194c:	0003      	movs	r3, r0
 800194e:	001a      	movs	r2, r3
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	189a      	adds	r2, r3, r2
 8001954:	4b37      	ldr	r3, [pc, #220]	; (8001a34 <main+0x3e8>)
 8001956:	0010      	movs	r0, r2
 8001958:	0019      	movs	r1, r3
 800195a:	2308      	movs	r3, #8
 800195c:	001a      	movs	r2, r3
 800195e:	f003 fdc7 	bl	80054f0 <memcpy>
	strcat((char *)text, (char *)magXstr);
 8001962:	19ba      	adds	r2, r7, r6
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	0011      	movs	r1, r2
 8001968:	0018      	movs	r0, r3
 800196a:	f003 fd87 	bl	800547c <strcat>
	strcat((char *)text, "\tMagY: ");
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	0018      	movs	r0, r3
 8001972:	f7fe fbc9 	bl	8000108 <strlen>
 8001976:	0003      	movs	r3, r0
 8001978:	001a      	movs	r2, r3
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	189a      	adds	r2, r3, r2
 800197e:	4b2e      	ldr	r3, [pc, #184]	; (8001a38 <main+0x3ec>)
 8001980:	0010      	movs	r0, r2
 8001982:	0019      	movs	r1, r3
 8001984:	2308      	movs	r3, #8
 8001986:	001a      	movs	r2, r3
 8001988:	f003 fdb2 	bl	80054f0 <memcpy>
	strcat((char *)text, (char *)magYstr);
 800198c:	2440      	movs	r4, #64	; 0x40
 800198e:	193a      	adds	r2, r7, r4
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	0011      	movs	r1, r2
 8001994:	0018      	movs	r0, r3
 8001996:	f003 fd71 	bl	800547c <strcat>
	strcat((char *)text, "\tMagZ: ");
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	0018      	movs	r0, r3
 800199e:	f7fe fbb3 	bl	8000108 <strlen>
 80019a2:	0003      	movs	r3, r0
 80019a4:	001a      	movs	r2, r3
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	189a      	adds	r2, r3, r2
 80019aa:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <main+0x3f0>)
 80019ac:	0010      	movs	r0, r2
 80019ae:	0019      	movs	r1, r3
 80019b0:	2308      	movs	r3, #8
 80019b2:	001a      	movs	r2, r3
 80019b4:	f003 fd9c 	bl	80054f0 <memcpy>
	strcat((char *)text, (char *)magZstr);
 80019b8:	2338      	movs	r3, #56	; 0x38
 80019ba:	18fa      	adds	r2, r7, r3
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	0011      	movs	r1, r2
 80019c0:	0018      	movs	r0, r3
 80019c2:	f003 fd5b 	bl	800547c <strcat>
	strcat((char *)text, "\r\n");
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	0018      	movs	r0, r3
 80019ca:	f7fe fb9d 	bl	8000108 <strlen>
 80019ce:	0003      	movs	r3, r0
 80019d0:	001a      	movs	r2, r3
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	189a      	adds	r2, r3, r2
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <main+0x3f4>)
 80019d8:	0010      	movs	r0, r2
 80019da:	0019      	movs	r1, r3
 80019dc:	2303      	movs	r3, #3
 80019de:	001a      	movs	r2, r3
 80019e0:	f003 fd86 	bl	80054f0 <memcpy>

	HAL_UART_Transmit(&huart4, text, 50, HAL_MAX_DELAY);
 80019e4:	2301      	movs	r3, #1
 80019e6:	425b      	negs	r3, r3
 80019e8:	1d39      	adds	r1, r7, #4
 80019ea:	4816      	ldr	r0, [pc, #88]	; (8001a44 <main+0x3f8>)
 80019ec:	2232      	movs	r2, #50	; 0x32
 80019ee:	f003 f889 	bl	8004b04 <HAL_UART_Transmit>
	HAL_Delay(200);
 80019f2:	20c8      	movs	r0, #200	; 0xc8
 80019f4:	f000 fdb6 	bl	8002564 <HAL_Delay>
  {
 80019f8:	e68f      	b.n	800171a <main+0xce>
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	ffff8000 	.word	0xffff8000
 8001a00:	005c0060 	.word	0x005c0060
 8001a04:	08b40260 	.word	0x08b40260
 8001a08:	48000400 	.word	0x48000400
 8001a0c:	ffff4b5c 	.word	0xffff4b5c
 8001a10:	9999999a 	.word	0x9999999a
 8001a14:	40469999 	.word	0x40469999
 8001a18:	40390000 	.word	0x40390000
 8001a1c:	9fbe76c9 	.word	0x9fbe76c9
 8001a20:	3fe12f1a 	.word	0x3fe12f1a
 8001a24:	ced91687 	.word	0xced91687
 8001a28:	3fef53f7 	.word	0x3fef53f7
 8001a2c:	08005dac 	.word	0x08005dac
 8001a30:	08005dcc 	.word	0x08005dcc
 8001a34:	08005db0 	.word	0x08005db0
 8001a38:	08005db8 	.word	0x08005db8
 8001a3c:	08005dc0 	.word	0x08005dc0
 8001a40:	08005dc8 	.word	0x08005dc8
 8001a44:	20000174 	.word	0x20000174

08001a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b099      	sub	sp, #100	; 0x64
 8001a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a4e:	242c      	movs	r4, #44	; 0x2c
 8001a50:	193b      	adds	r3, r7, r4
 8001a52:	0018      	movs	r0, r3
 8001a54:	2334      	movs	r3, #52	; 0x34
 8001a56:	001a      	movs	r2, r3
 8001a58:	2100      	movs	r1, #0
 8001a5a:	f003 fd07 	bl	800546c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a5e:	231c      	movs	r3, #28
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	0018      	movs	r0, r3
 8001a64:	2310      	movs	r3, #16
 8001a66:	001a      	movs	r2, r3
 8001a68:	2100      	movs	r1, #0
 8001a6a:	f003 fcff 	bl	800546c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a6e:	003b      	movs	r3, r7
 8001a70:	0018      	movs	r0, r3
 8001a72:	231c      	movs	r3, #28
 8001a74:	001a      	movs	r2, r3
 8001a76:	2100      	movs	r1, #0
 8001a78:	f003 fcf8 	bl	800546c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001a7c:	0021      	movs	r1, r4
 8001a7e:	187b      	adds	r3, r7, r1
 8001a80:	2222      	movs	r2, #34	; 0x22
 8001a82:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	2201      	movs	r2, #1
 8001a88:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001a8a:	187b      	adds	r3, r7, r1
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a90:	187b      	adds	r3, r7, r1
 8001a92:	2210      	movs	r2, #16
 8001a94:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a96:	187b      	adds	r3, r7, r1
 8001a98:	2202      	movs	r2, #2
 8001a9a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	0212      	lsls	r2, r2, #8
 8001aa2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001aa4:	187b      	adds	r3, r7, r1
 8001aa6:	2280      	movs	r2, #128	; 0x80
 8001aa8:	0352      	lsls	r2, r2, #13
 8001aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001aac:	187b      	adds	r3, r7, r1
 8001aae:	2200      	movs	r2, #0
 8001ab0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab2:	187b      	adds	r3, r7, r1
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f001 fa1b 	bl	8002ef0 <HAL_RCC_OscConfig>
 8001aba:	1e03      	subs	r3, r0, #0
 8001abc:	d001      	beq.n	8001ac2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001abe:	f000 fa79 	bl	8001fb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac2:	211c      	movs	r1, #28
 8001ac4:	187b      	adds	r3, r7, r1
 8001ac6:	2207      	movs	r2, #7
 8001ac8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aca:	187b      	adds	r3, r7, r1
 8001acc:	2202      	movs	r2, #2
 8001ace:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ad0:	187b      	adds	r3, r7, r1
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ad6:	187b      	adds	r3, r7, r1
 8001ad8:	2200      	movs	r2, #0
 8001ada:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001adc:	187b      	adds	r3, r7, r1
 8001ade:	2101      	movs	r1, #1
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f001 fd8b 	bl	80035fc <HAL_RCC_ClockConfig>
 8001ae6:	1e03      	subs	r3, r0, #0
 8001ae8:	d001      	beq.n	8001aee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001aea:	f000 fa63 	bl	8001fb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001aee:	003b      	movs	r3, r7
 8001af0:	2280      	movs	r2, #128	; 0x80
 8001af2:	0292      	lsls	r2, r2, #10
 8001af4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001af6:	003b      	movs	r3, r7
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001afc:	003b      	movs	r3, r7
 8001afe:	0018      	movs	r0, r3
 8001b00:	f001 fee8 	bl	80038d4 <HAL_RCCEx_PeriphCLKConfig>
 8001b04:	1e03      	subs	r3, r0, #0
 8001b06:	d001      	beq.n	8001b0c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001b08:	f000 fa54 	bl	8001fb4 <Error_Handler>
  }
}
 8001b0c:	46c0      	nop			; (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b019      	add	sp, #100	; 0x64
 8001b12:	bd90      	pop	{r4, r7, pc}

08001b14 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <MX_I2C2_Init+0x74>)
 8001b1a:	4a1c      	ldr	r2, [pc, #112]	; (8001b8c <MX_I2C2_Init+0x78>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <MX_I2C2_Init+0x74>)
 8001b20:	4a1b      	ldr	r2, [pc, #108]	; (8001b90 <MX_I2C2_Init+0x7c>)
 8001b22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001b24:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <MX_I2C2_Init+0x74>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <MX_I2C2_Init+0x74>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b30:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <MX_I2C2_Init+0x74>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <MX_I2C2_Init+0x74>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <MX_I2C2_Init+0x74>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_I2C2_Init+0x74>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <MX_I2C2_Init+0x74>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <MX_I2C2_Init+0x74>)
 8001b50:	0018      	movs	r0, r3
 8001b52:	f000 ff75 	bl	8002a40 <HAL_I2C_Init>
 8001b56:	1e03      	subs	r3, r0, #0
 8001b58:	d001      	beq.n	8001b5e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001b5a:	f000 fa2b 	bl	8001fb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <MX_I2C2_Init+0x74>)
 8001b60:	2100      	movs	r1, #0
 8001b62:	0018      	movs	r0, r3
 8001b64:	f001 f802 	bl	8002b6c <HAL_I2CEx_ConfigAnalogFilter>
 8001b68:	1e03      	subs	r3, r0, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001b6c:	f000 fa22 	bl	8001fb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <MX_I2C2_Init+0x74>)
 8001b72:	2100      	movs	r1, #0
 8001b74:	0018      	movs	r0, r3
 8001b76:	f001 f845 	bl	8002c04 <HAL_I2CEx_ConfigDigitalFilter>
 8001b7a:	1e03      	subs	r3, r0, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001b7e:	f000 fa19 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000078 	.word	0x20000078
 8001b8c:	40005800 	.word	0x40005800
 8001b90:	20303e5d 	.word	0x20303e5d

08001b94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <MX_SPI2_Init+0x74>)
 8001b9a:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <MX_SPI2_Init+0x78>)
 8001b9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <MX_SPI2_Init+0x74>)
 8001ba0:	2282      	movs	r2, #130	; 0x82
 8001ba2:	0052      	lsls	r2, r2, #1
 8001ba4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ba6:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <MX_SPI2_Init+0x74>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <MX_SPI2_Init+0x74>)
 8001bae:	22e0      	movs	r2, #224	; 0xe0
 8001bb0:	00d2      	lsls	r2, r2, #3
 8001bb2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001bb4:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <MX_SPI2_Init+0x74>)
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001bba:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <MX_SPI2_Init+0x74>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MX_SPI2_Init+0x74>)
 8001bc2:	2280      	movs	r2, #128	; 0x80
 8001bc4:	0092      	lsls	r2, r2, #2
 8001bc6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <MX_SPI2_Init+0x74>)
 8001bca:	2228      	movs	r2, #40	; 0x28
 8001bcc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <MX_SPI2_Init+0x74>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <MX_SPI2_Init+0x74>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <MX_SPI2_Init+0x74>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <MX_SPI2_Init+0x74>)
 8001be2:	2207      	movs	r2, #7
 8001be4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <MX_SPI2_Init+0x74>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <MX_SPI2_Init+0x74>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bf2:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <MX_SPI2_Init+0x74>)
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f001 ff6b 	bl	8003ad0 <HAL_SPI_Init>
 8001bfa:	1e03      	subs	r3, r0, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001bfe:	f000 f9d9 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	200000cc 	.word	0x200000cc
 8001c0c:	40003800 	.word	0x40003800

08001c10 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8001c14:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <MX_TSC_Init+0x80>)
 8001c16:	4a1f      	ldr	r2, [pc, #124]	; (8001c94 <MX_TSC_Init+0x84>)
 8001c18:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <MX_TSC_Init+0x80>)
 8001c1c:	2280      	movs	r2, #128	; 0x80
 8001c1e:	0552      	lsls	r2, r2, #21
 8001c20:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8001c22:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <MX_TSC_Init+0x80>)
 8001c24:	2280      	movs	r2, #128	; 0x80
 8001c26:	0452      	lsls	r2, r2, #17
 8001c28:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 8001c2a:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <MX_TSC_Init+0x80>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8001c30:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <MX_TSC_Init+0x80>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8001c36:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <MX_TSC_Init+0x80>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8001c3c:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <MX_TSC_Init+0x80>)
 8001c3e:	2280      	movs	r2, #128	; 0x80
 8001c40:	0192      	lsls	r2, r2, #6
 8001c42:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <MX_TSC_Init+0x80>)
 8001c46:	22a0      	movs	r2, #160	; 0xa0
 8001c48:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <MX_TSC_Init+0x80>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8001c50:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <MX_TSC_Init+0x80>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <MX_TSC_Init+0x80>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <MX_TSC_Init+0x80>)
 8001c5e:	222c      	movs	r2, #44	; 0x2c
 8001c60:	2100      	movs	r1, #0
 8001c62:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <MX_TSC_Init+0x80>)
 8001c66:	2291      	movs	r2, #145	; 0x91
 8001c68:	0092      	lsls	r2, r2, #2
 8001c6a:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <MX_TSC_Init+0x80>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <MX_TSC_Init+0x80>)
 8001c74:	2291      	movs	r2, #145	; 0x91
 8001c76:	00d2      	lsls	r2, r2, #3
 8001c78:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <MX_TSC_Init+0x80>)
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f002 fe47 	bl	8004910 <HAL_TSC_Init>
 8001c82:	1e03      	subs	r3, r0, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 8001c86:	f000 f995 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000130 	.word	0x20000130
 8001c94:	40024000 	.word	0x40024000

08001c98 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8001c9c:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <MX_USART4_UART_Init+0x58>)
 8001c9e:	4a15      	ldr	r2, [pc, #84]	; (8001cf4 <MX_USART4_UART_Init+0x5c>)
 8001ca0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001ca2:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <MX_USART4_UART_Init+0x58>)
 8001ca4:	22e1      	movs	r2, #225	; 0xe1
 8001ca6:	0252      	lsls	r2, r2, #9
 8001ca8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001caa:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <MX_USART4_UART_Init+0x58>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <MX_USART4_UART_Init+0x58>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <MX_USART4_UART_Init+0x58>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <MX_USART4_UART_Init+0x58>)
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <MX_USART4_UART_Init+0x58>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <MX_USART4_UART_Init+0x58>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <MX_USART4_UART_Init+0x58>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <MX_USART4_UART_Init+0x58>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <MX_USART4_UART_Init+0x58>)
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f002 febd 	bl	8004a5c <HAL_UART_Init>
 8001ce2:	1e03      	subs	r3, r0, #0
 8001ce4:	d001      	beq.n	8001cea <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8001ce6:	f000 f965 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000174 	.word	0x20000174
 8001cf4:	40004c00 	.word	0x40004c00

08001cf8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <MX_USB_PCD_Init+0x44>)
 8001cfe:	4a10      	ldr	r2, [pc, #64]	; (8001d40 <MX_USB_PCD_Init+0x48>)
 8001d00:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <MX_USB_PCD_Init+0x44>)
 8001d04:	2208      	movs	r2, #8
 8001d06:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_USB_PCD_Init+0x44>)
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <MX_USB_PCD_Init+0x44>)
 8001d10:	2202      	movs	r2, #2
 8001d12:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <MX_USB_PCD_Init+0x44>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <MX_USB_PCD_Init+0x44>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <MX_USB_PCD_Init+0x44>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <MX_USB_PCD_Init+0x44>)
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f000 ffb7 	bl	8002c9c <HAL_PCD_Init>
 8001d2e:	1e03      	subs	r3, r0, #0
 8001d30:	d001      	beq.n	8001d36 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8001d32:	f000 f93f 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200001fc 	.word	0x200001fc
 8001d40:	40005c00 	.word	0x40005c00

08001d44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d44:	b590      	push	{r4, r7, lr}
 8001d46:	b089      	sub	sp, #36	; 0x24
 8001d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4a:	240c      	movs	r4, #12
 8001d4c:	193b      	adds	r3, r7, r4
 8001d4e:	0018      	movs	r0, r3
 8001d50:	2314      	movs	r3, #20
 8001d52:	001a      	movs	r2, r3
 8001d54:	2100      	movs	r1, #0
 8001d56:	f003 fb89 	bl	800546c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5a:	4b42      	ldr	r3, [pc, #264]	; (8001e64 <MX_GPIO_Init+0x120>)
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	4b41      	ldr	r3, [pc, #260]	; (8001e64 <MX_GPIO_Init+0x120>)
 8001d60:	2180      	movs	r1, #128	; 0x80
 8001d62:	0309      	lsls	r1, r1, #12
 8001d64:	430a      	orrs	r2, r1
 8001d66:	615a      	str	r2, [r3, #20]
 8001d68:	4b3e      	ldr	r3, [pc, #248]	; (8001e64 <MX_GPIO_Init+0x120>)
 8001d6a:	695a      	ldr	r2, [r3, #20]
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	031b      	lsls	r3, r3, #12
 8001d70:	4013      	ands	r3, r2
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <MX_GPIO_Init+0x120>)
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	4b3a      	ldr	r3, [pc, #232]	; (8001e64 <MX_GPIO_Init+0x120>)
 8001d7c:	2180      	movs	r1, #128	; 0x80
 8001d7e:	0289      	lsls	r1, r1, #10
 8001d80:	430a      	orrs	r2, r1
 8001d82:	615a      	str	r2, [r3, #20]
 8001d84:	4b37      	ldr	r3, [pc, #220]	; (8001e64 <MX_GPIO_Init+0x120>)
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	029b      	lsls	r3, r3, #10
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <MX_GPIO_Init+0x120>)
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	4b33      	ldr	r3, [pc, #204]	; (8001e64 <MX_GPIO_Init+0x120>)
 8001d98:	2180      	movs	r1, #128	; 0x80
 8001d9a:	02c9      	lsls	r1, r1, #11
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	615a      	str	r2, [r3, #20]
 8001da0:	4b30      	ldr	r3, [pc, #192]	; (8001e64 <MX_GPIO_Init+0x120>)
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	02db      	lsls	r3, r3, #11
 8001da8:	4013      	ands	r3, r2
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|GPIO_PIN_7
 8001dae:	492e      	ldr	r1, [pc, #184]	; (8001e68 <MX_GPIO_Init+0x124>)
 8001db0:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <MX_GPIO_Init+0x128>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	0018      	movs	r0, r3
 8001db6:	f000 fe25 	bl	8002a04 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	015b      	lsls	r3, r3, #5
 8001dbe:	482c      	ldr	r0, [pc, #176]	; (8001e70 <MX_GPIO_Init+0x12c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	0019      	movs	r1, r3
 8001dc4:	f000 fe1e 	bl	8002a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin PC7
                           LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|GPIO_PIN_7
 8001dc8:	193b      	adds	r3, r7, r4
 8001dca:	4a27      	ldr	r2, [pc, #156]	; (8001e68 <MX_GPIO_Init+0x124>)
 8001dcc:	601a      	str	r2, [r3, #0]
                          |LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dce:	193b      	adds	r3, r7, r4
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	193b      	adds	r3, r7, r4
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	193b      	adds	r3, r7, r4
 8001ddc:	2200      	movs	r2, #0
 8001dde:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de0:	193b      	adds	r3, r7, r4
 8001de2:	4a22      	ldr	r2, [pc, #136]	; (8001e6c <MX_GPIO_Init+0x128>)
 8001de4:	0019      	movs	r1, r3
 8001de6:	0010      	movs	r0, r2
 8001de8:	f000 fc94 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 8001dec:	0021      	movs	r1, r4
 8001dee:	187b      	adds	r3, r7, r1
 8001df0:	2206      	movs	r2, #6
 8001df2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001df4:	187b      	adds	r3, r7, r1
 8001df6:	2290      	movs	r2, #144	; 0x90
 8001df8:	0352      	lsls	r2, r2, #13
 8001dfa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	000c      	movs	r4, r1
 8001dfe:	193b      	adds	r3, r7, r4
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e04:	193b      	adds	r3, r7, r4
 8001e06:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <MX_GPIO_Init+0x128>)
 8001e08:	0019      	movs	r1, r3
 8001e0a:	0010      	movs	r0, r2
 8001e0c:	f000 fc82 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e10:	193b      	adds	r3, r7, r4
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e16:	193b      	adds	r3, r7, r4
 8001e18:	2290      	movs	r2, #144	; 0x90
 8001e1a:	0352      	lsls	r2, r2, #13
 8001e1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	193b      	adds	r3, r7, r4
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e24:	193a      	adds	r2, r7, r4
 8001e26:	2390      	movs	r3, #144	; 0x90
 8001e28:	05db      	lsls	r3, r3, #23
 8001e2a:	0011      	movs	r1, r2
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f000 fc71 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e32:	0021      	movs	r1, r4
 8001e34:	187b      	adds	r3, r7, r1
 8001e36:	2280      	movs	r2, #128	; 0x80
 8001e38:	0152      	lsls	r2, r2, #5
 8001e3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3c:	187b      	adds	r3, r7, r1
 8001e3e:	2201      	movs	r2, #1
 8001e40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	187b      	adds	r3, r7, r1
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	187b      	adds	r3, r7, r1
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4e:	187b      	adds	r3, r7, r1
 8001e50:	4a07      	ldr	r2, [pc, #28]	; (8001e70 <MX_GPIO_Init+0x12c>)
 8001e52:	0019      	movs	r1, r3
 8001e54:	0010      	movs	r0, r2
 8001e56:	f000 fc5d 	bl	8002714 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b009      	add	sp, #36	; 0x24
 8001e60:	bd90      	pop	{r4, r7, pc}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	40021000 	.word	0x40021000
 8001e68:	000003e1 	.word	0x000003e1
 8001e6c:	48000800 	.word	0x48000800
 8001e70:	48000400 	.word	0x48000400

08001e74 <EnviarCmd>:

/* USER CODE BEGIN 4 */

void EnviarCmd(uint8_t* cmd, uint16_t Size){
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	000a      	movs	r2, r1
 8001e7e:	1cbb      	adds	r3, r7, #2
 8001e80:	801a      	strh	r2, [r3, #0]
	// Start SPI Transmission
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	015b      	lsls	r3, r3, #5
 8001e86:	4812      	ldr	r0, [pc, #72]	; (8001ed0 <EnviarCmd+0x5c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	0019      	movs	r1, r3
 8001e8c:	f000 fdba 	bl	8002a04 <HAL_GPIO_WritePin>
	// Select Write register command
	// Set AH = 0x00, BIST disabled
	// Set AL = 0x5C, Hall plate spinning rate = DEFAULT, GAIN_SEL = 5
	// Select address register, (0x00 << 2)
	HAL_SPI_Transmit(&hspi2, cmd, Size, HAL_MAX_DELAY);
 8001e90:	2301      	movs	r3, #1
 8001e92:	425c      	negs	r4, r3
 8001e94:	1cbb      	adds	r3, r7, #2
 8001e96:	881a      	ldrh	r2, [r3, #0]
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	480e      	ldr	r0, [pc, #56]	; (8001ed4 <EnviarCmd+0x60>)
 8001e9c:	0023      	movs	r3, r4
 8001e9e:	f001 fecf 	bl	8003c40 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &status, 1, HAL_MAX_DELAY);
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	425b      	negs	r3, r3
 8001ea6:	490c      	ldr	r1, [pc, #48]	; (8001ed8 <EnviarCmd+0x64>)
 8001ea8:	480a      	ldr	r0, [pc, #40]	; (8001ed4 <EnviarCmd+0x60>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f002 f828 	bl	8003f00 <HAL_SPI_Receive>
	// Stop I2C Transmission
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	015b      	lsls	r3, r3, #5
 8001eb4:	4806      	ldr	r0, [pc, #24]	; (8001ed0 <EnviarCmd+0x5c>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	0019      	movs	r1, r3
 8001eba:	f000 fda3 	bl	8002a04 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001ebe:	2396      	movs	r3, #150	; 0x96
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f000 fb4e 	bl	8002564 <HAL_Delay>
}
 8001ec8:	46c0      	nop			; (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b003      	add	sp, #12
 8001ece:	bd90      	pop	{r4, r7, pc}
 8001ed0:	48000400 	.word	0x48000400
 8001ed4:	200000cc 	.word	0x200000cc
 8001ed8:	200004f0 	.word	0x200004f0

08001edc <LerCmd>:

void LerCmd(uint8_t* cmd, uint8_t* buf, uint16_t Size, uint16_t Size1){
 8001edc:	b590      	push	{r4, r7, lr}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	1dbb      	adds	r3, r7, #6
 8001eea:	801a      	strh	r2, [r3, #0]
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	1c0a      	adds	r2, r1, #0
 8001ef0:	801a      	strh	r2, [r3, #0]
	// Start SPI Transmission
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	015b      	lsls	r3, r3, #5
 8001ef6:	4817      	ldr	r0, [pc, #92]	; (8001f54 <LerCmd+0x78>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	0019      	movs	r1, r3
 8001efc:	f000 fd82 	bl	8002a04 <HAL_GPIO_WritePin>
	// Select Read register command
	// Select address register, (0x00 << 2)
	HAL_SPI_Transmit(&hspi2, cmd, Size, HAL_MAX_DELAY);
 8001f00:	2301      	movs	r3, #1
 8001f02:	425c      	negs	r4, r3
 8001f04:	1dbb      	adds	r3, r7, #6
 8001f06:	881a      	ldrh	r2, [r3, #0]
 8001f08:	68f9      	ldr	r1, [r7, #12]
 8001f0a:	4813      	ldr	r0, [pc, #76]	; (8001f58 <LerCmd+0x7c>)
 8001f0c:	0023      	movs	r3, r4
 8001f0e:	f001 fe97 	bl	8003c40 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &status, 1, HAL_MAX_DELAY);
 8001f12:	2301      	movs	r3, #1
 8001f14:	425b      	negs	r3, r3
 8001f16:	4911      	ldr	r1, [pc, #68]	; (8001f5c <LerCmd+0x80>)
 8001f18:	480f      	ldr	r0, [pc, #60]	; (8001f58 <LerCmd+0x7c>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f001 fff0 	bl	8003f00 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi2, buf, Size1, HAL_MAX_DELAY);
 8001f20:	2301      	movs	r3, #1
 8001f22:	425c      	negs	r4, r3
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	881a      	ldrh	r2, [r3, #0]
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	480b      	ldr	r0, [pc, #44]	; (8001f58 <LerCmd+0x7c>)
 8001f2c:	0023      	movs	r3, r4
 8001f2e:	f001 ffe7 	bl	8003f00 <HAL_SPI_Receive>
	// Stop I2C Transmission
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	015b      	lsls	r3, r3, #5
 8001f36:	4807      	ldr	r0, [pc, #28]	; (8001f54 <LerCmd+0x78>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	0019      	movs	r1, r3
 8001f3c:	f000 fd62 	bl	8002a04 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001f40:	2396      	movs	r3, #150	; 0x96
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	0018      	movs	r0, r3
 8001f46:	f000 fb0d 	bl	8002564 <HAL_Delay>
}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b005      	add	sp, #20
 8001f50:	bd90      	pop	{r4, r7, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	48000400 	.word	0x48000400
 8001f58:	200000cc 	.word	0x200000cc
 8001f5c:	200004f0 	.word	0x200004f0

08001f60 <READ_REGISTER>:

void READ_REGISTER(uint8_t andress, uint16_t *registe){
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	0002      	movs	r2, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	1dfb      	adds	r3, r7, #7
 8001f6c:	701a      	strb	r2, [r3, #0]
        uint8_t readRegister[2];
        uint8_t registeBuf[2];

        readRegister[0] = 0x50;
 8001f6e:	210c      	movs	r1, #12
 8001f70:	187b      	adds	r3, r7, r1
 8001f72:	2250      	movs	r2, #80	; 0x50
 8001f74:	701a      	strb	r2, [r3, #0]
        readRegister[1] = andress << 2;
 8001f76:	1dfb      	adds	r3, r7, #7
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	0008      	movs	r0, r1
 8001f80:	187b      	adds	r3, r7, r1
 8001f82:	705a      	strb	r2, [r3, #1]

        LerCmd(readRegister, registeBuf, 2, 2);
 8001f84:	2408      	movs	r4, #8
 8001f86:	1939      	adds	r1, r7, r4
 8001f88:	1838      	adds	r0, r7, r0
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	f7ff ffa5 	bl	8001edc <LerCmd>
        *registe = registeBuf[0] << 8 | registeBuf[1];
 8001f92:	0021      	movs	r1, r4
 8001f94:	187b      	adds	r3, r7, r1
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	021b      	lsls	r3, r3, #8
 8001f9a:	b21a      	sxth	r2, r3
 8001f9c:	187b      	adds	r3, r7, r1
 8001f9e:	785b      	ldrb	r3, [r3, #1]
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	801a      	strh	r2, [r3, #0]
    }
 8001fac:	46c0      	nop			; (mov r8, r8)
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	b005      	add	sp, #20
 8001fb2:	bd90      	pop	{r4, r7, pc}

08001fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb8:	b672      	cpsid	i
}
 8001fba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <Error_Handler+0x8>
	...

08001fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <HAL_MspInit+0x44>)
 8001fc8:	699a      	ldr	r2, [r3, #24]
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <HAL_MspInit+0x44>)
 8001fcc:	2101      	movs	r1, #1
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	619a      	str	r2, [r3, #24]
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <HAL_MspInit+0x44>)
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	4013      	ands	r3, r2
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_MspInit+0x44>)
 8001fe0:	69da      	ldr	r2, [r3, #28]
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_MspInit+0x44>)
 8001fe4:	2180      	movs	r1, #128	; 0x80
 8001fe6:	0549      	lsls	r1, r1, #21
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	61da      	str	r2, [r3, #28]
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_MspInit+0x44>)
 8001fee:	69da      	ldr	r2, [r3, #28]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	055b      	lsls	r3, r3, #21
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b002      	add	sp, #8
 8002000:	bd80      	pop	{r7, pc}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	40021000 	.word	0x40021000

08002008 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b08b      	sub	sp, #44	; 0x2c
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	2414      	movs	r4, #20
 8002012:	193b      	adds	r3, r7, r4
 8002014:	0018      	movs	r0, r3
 8002016:	2314      	movs	r3, #20
 8002018:	001a      	movs	r2, r3
 800201a:	2100      	movs	r1, #0
 800201c:	f003 fa26 	bl	800546c <memset>
  if(hi2c->Instance==I2C2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a1c      	ldr	r2, [pc, #112]	; (8002098 <HAL_I2C_MspInit+0x90>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d132      	bne.n	8002090 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202a:	4b1c      	ldr	r3, [pc, #112]	; (800209c <HAL_I2C_MspInit+0x94>)
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	4b1b      	ldr	r3, [pc, #108]	; (800209c <HAL_I2C_MspInit+0x94>)
 8002030:	2180      	movs	r1, #128	; 0x80
 8002032:	02c9      	lsls	r1, r1, #11
 8002034:	430a      	orrs	r2, r1
 8002036:	615a      	str	r2, [r3, #20]
 8002038:	4b18      	ldr	r3, [pc, #96]	; (800209c <HAL_I2C_MspInit+0x94>)
 800203a:	695a      	ldr	r2, [r3, #20]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	02db      	lsls	r3, r3, #11
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8002046:	193b      	adds	r3, r7, r4
 8002048:	22c0      	movs	r2, #192	; 0xc0
 800204a:	0112      	lsls	r2, r2, #4
 800204c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800204e:	0021      	movs	r1, r4
 8002050:	187b      	adds	r3, r7, r1
 8002052:	2212      	movs	r2, #18
 8002054:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002056:	187b      	adds	r3, r7, r1
 8002058:	2201      	movs	r2, #1
 800205a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800205c:	187b      	adds	r3, r7, r1
 800205e:	2203      	movs	r2, #3
 8002060:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8002062:	187b      	adds	r3, r7, r1
 8002064:	2201      	movs	r2, #1
 8002066:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002068:	187b      	adds	r3, r7, r1
 800206a:	4a0d      	ldr	r2, [pc, #52]	; (80020a0 <HAL_I2C_MspInit+0x98>)
 800206c:	0019      	movs	r1, r3
 800206e:	0010      	movs	r0, r2
 8002070:	f000 fb50 	bl	8002714 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_I2C_MspInit+0x94>)
 8002076:	69da      	ldr	r2, [r3, #28]
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <HAL_I2C_MspInit+0x94>)
 800207a:	2180      	movs	r1, #128	; 0x80
 800207c:	03c9      	lsls	r1, r1, #15
 800207e:	430a      	orrs	r2, r1
 8002080:	61da      	str	r2, [r3, #28]
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_I2C_MspInit+0x94>)
 8002084:	69da      	ldr	r2, [r3, #28]
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	03db      	lsls	r3, r3, #15
 800208a:	4013      	ands	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002090:	46c0      	nop			; (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	b00b      	add	sp, #44	; 0x2c
 8002096:	bd90      	pop	{r4, r7, pc}
 8002098:	40005800 	.word	0x40005800
 800209c:	40021000 	.word	0x40021000
 80020a0:	48000400 	.word	0x48000400

080020a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b08b      	sub	sp, #44	; 0x2c
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	2414      	movs	r4, #20
 80020ae:	193b      	adds	r3, r7, r4
 80020b0:	0018      	movs	r0, r3
 80020b2:	2314      	movs	r3, #20
 80020b4:	001a      	movs	r2, r3
 80020b6:	2100      	movs	r1, #0
 80020b8:	f003 f9d8 	bl	800546c <memset>
  if(hspi->Instance==SPI2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a1c      	ldr	r2, [pc, #112]	; (8002134 <HAL_SPI_MspInit+0x90>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d132      	bne.n	800212c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020c6:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <HAL_SPI_MspInit+0x94>)
 80020c8:	69da      	ldr	r2, [r3, #28]
 80020ca:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <HAL_SPI_MspInit+0x94>)
 80020cc:	2180      	movs	r1, #128	; 0x80
 80020ce:	01c9      	lsls	r1, r1, #7
 80020d0:	430a      	orrs	r2, r1
 80020d2:	61da      	str	r2, [r3, #28]
 80020d4:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_SPI_MspInit+0x94>)
 80020d6:	69da      	ldr	r2, [r3, #28]
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	01db      	lsls	r3, r3, #7
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_SPI_MspInit+0x94>)
 80020e4:	695a      	ldr	r2, [r3, #20]
 80020e6:	4b14      	ldr	r3, [pc, #80]	; (8002138 <HAL_SPI_MspInit+0x94>)
 80020e8:	2180      	movs	r1, #128	; 0x80
 80020ea:	02c9      	lsls	r1, r1, #11
 80020ec:	430a      	orrs	r2, r1
 80020ee:	615a      	str	r2, [r3, #20]
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <HAL_SPI_MspInit+0x94>)
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	02db      	lsls	r3, r3, #11
 80020f8:	4013      	ands	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|GPIO_PIN_14|SPI2_MOSI_Pin;
 80020fe:	193b      	adds	r3, r7, r4
 8002100:	22e0      	movs	r2, #224	; 0xe0
 8002102:	0212      	lsls	r2, r2, #8
 8002104:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	0021      	movs	r1, r4
 8002108:	187b      	adds	r3, r7, r1
 800210a:	2202      	movs	r2, #2
 800210c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	187b      	adds	r3, r7, r1
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002114:	187b      	adds	r3, r7, r1
 8002116:	2203      	movs	r2, #3
 8002118:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800211a:	187b      	adds	r3, r7, r1
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002120:	187b      	adds	r3, r7, r1
 8002122:	4a06      	ldr	r2, [pc, #24]	; (800213c <HAL_SPI_MspInit+0x98>)
 8002124:	0019      	movs	r1, r3
 8002126:	0010      	movs	r0, r2
 8002128:	f000 faf4 	bl	8002714 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800212c:	46c0      	nop			; (mov r8, r8)
 800212e:	46bd      	mov	sp, r7
 8002130:	b00b      	add	sp, #44	; 0x2c
 8002132:	bd90      	pop	{r4, r7, pc}
 8002134:	40003800 	.word	0x40003800
 8002138:	40021000 	.word	0x40021000
 800213c:	48000400 	.word	0x48000400

08002140 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b08b      	sub	sp, #44	; 0x2c
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	2414      	movs	r4, #20
 800214a:	193b      	adds	r3, r7, r4
 800214c:	0018      	movs	r0, r3
 800214e:	2314      	movs	r3, #20
 8002150:	001a      	movs	r2, r3
 8002152:	2100      	movs	r1, #0
 8002154:	f003 f98a 	bl	800546c <memset>
  if(htsc->Instance==TSC)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a44      	ldr	r2, [pc, #272]	; (8002270 <HAL_TSC_MspInit+0x130>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d000      	beq.n	8002164 <HAL_TSC_MspInit+0x24>
 8002162:	e080      	b.n	8002266 <HAL_TSC_MspInit+0x126>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8002164:	4b43      	ldr	r3, [pc, #268]	; (8002274 <HAL_TSC_MspInit+0x134>)
 8002166:	695a      	ldr	r2, [r3, #20]
 8002168:	4b42      	ldr	r3, [pc, #264]	; (8002274 <HAL_TSC_MspInit+0x134>)
 800216a:	2180      	movs	r1, #128	; 0x80
 800216c:	0449      	lsls	r1, r1, #17
 800216e:	430a      	orrs	r2, r1
 8002170:	615a      	str	r2, [r3, #20]
 8002172:	4b40      	ldr	r3, [pc, #256]	; (8002274 <HAL_TSC_MspInit+0x134>)
 8002174:	695a      	ldr	r2, [r3, #20]
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	045b      	lsls	r3, r3, #17
 800217a:	4013      	ands	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002180:	4b3c      	ldr	r3, [pc, #240]	; (8002274 <HAL_TSC_MspInit+0x134>)
 8002182:	695a      	ldr	r2, [r3, #20]
 8002184:	4b3b      	ldr	r3, [pc, #236]	; (8002274 <HAL_TSC_MspInit+0x134>)
 8002186:	2180      	movs	r1, #128	; 0x80
 8002188:	0289      	lsls	r1, r1, #10
 800218a:	430a      	orrs	r2, r1
 800218c:	615a      	str	r2, [r3, #20]
 800218e:	4b39      	ldr	r3, [pc, #228]	; (8002274 <HAL_TSC_MspInit+0x134>)
 8002190:	695a      	ldr	r2, [r3, #20]
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	029b      	lsls	r3, r3, #10
 8002196:	4013      	ands	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219c:	4b35      	ldr	r3, [pc, #212]	; (8002274 <HAL_TSC_MspInit+0x134>)
 800219e:	695a      	ldr	r2, [r3, #20]
 80021a0:	4b34      	ldr	r3, [pc, #208]	; (8002274 <HAL_TSC_MspInit+0x134>)
 80021a2:	2180      	movs	r1, #128	; 0x80
 80021a4:	02c9      	lsls	r1, r1, #11
 80021a6:	430a      	orrs	r2, r1
 80021a8:	615a      	str	r2, [r3, #20]
 80021aa:	4b32      	ldr	r3, [pc, #200]	; (8002274 <HAL_TSC_MspInit+0x134>)
 80021ac:	695a      	ldr	r2, [r3, #20]
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	02db      	lsls	r3, r3, #11
 80021b2:	4013      	ands	r3, r2
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80021b8:	193b      	adds	r3, r7, r4
 80021ba:	2244      	movs	r2, #68	; 0x44
 80021bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	193b      	adds	r3, r7, r4
 80021c0:	2202      	movs	r2, #2
 80021c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	193b      	adds	r3, r7, r4
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	193b      	adds	r3, r7, r4
 80021cc:	2200      	movs	r2, #0
 80021ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80021d0:	193b      	adds	r3, r7, r4
 80021d2:	2203      	movs	r2, #3
 80021d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d6:	193a      	adds	r2, r7, r4
 80021d8:	2390      	movs	r3, #144	; 0x90
 80021da:	05db      	lsls	r3, r3, #23
 80021dc:	0011      	movs	r1, r2
 80021de:	0018      	movs	r0, r3
 80021e0:	f000 fa98 	bl	8002714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 80021e4:	193b      	adds	r3, r7, r4
 80021e6:	2288      	movs	r2, #136	; 0x88
 80021e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ea:	193b      	adds	r3, r7, r4
 80021ec:	2212      	movs	r2, #18
 80021ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	193b      	adds	r3, r7, r4
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	193b      	adds	r3, r7, r4
 80021f8:	2200      	movs	r2, #0
 80021fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80021fc:	193b      	adds	r3, r7, r4
 80021fe:	2203      	movs	r2, #3
 8002200:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002202:	193a      	adds	r2, r7, r4
 8002204:	2390      	movs	r3, #144	; 0x90
 8002206:	05db      	lsls	r3, r3, #23
 8002208:	0011      	movs	r1, r2
 800220a:	0018      	movs	r0, r3
 800220c:	f000 fa82 	bl	8002714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002210:	193b      	adds	r3, r7, r4
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	193b      	adds	r3, r7, r4
 8002218:	2202      	movs	r2, #2
 800221a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	193b      	adds	r3, r7, r4
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	193b      	adds	r3, r7, r4
 8002224:	2200      	movs	r2, #0
 8002226:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8002228:	193b      	adds	r3, r7, r4
 800222a:	2203      	movs	r2, #3
 800222c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222e:	193b      	adds	r3, r7, r4
 8002230:	4a11      	ldr	r2, [pc, #68]	; (8002278 <HAL_TSC_MspInit+0x138>)
 8002232:	0019      	movs	r1, r3
 8002234:	0010      	movs	r0, r2
 8002236:	f000 fa6d 	bl	8002714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800223a:	0021      	movs	r1, r4
 800223c:	187b      	adds	r3, r7, r1
 800223e:	2202      	movs	r2, #2
 8002240:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002242:	187b      	adds	r3, r7, r1
 8002244:	2212      	movs	r2, #18
 8002246:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	187b      	adds	r3, r7, r1
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224e:	187b      	adds	r3, r7, r1
 8002250:	2200      	movs	r2, #0
 8002252:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8002254:	187b      	adds	r3, r7, r1
 8002256:	2203      	movs	r2, #3
 8002258:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225a:	187b      	adds	r3, r7, r1
 800225c:	4a06      	ldr	r2, [pc, #24]	; (8002278 <HAL_TSC_MspInit+0x138>)
 800225e:	0019      	movs	r1, r3
 8002260:	0010      	movs	r0, r2
 8002262:	f000 fa57 	bl	8002714 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	46bd      	mov	sp, r7
 800226a:	b00b      	add	sp, #44	; 0x2c
 800226c:	bd90      	pop	{r4, r7, pc}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	40024000 	.word	0x40024000
 8002274:	40021000 	.word	0x40021000
 8002278:	48000400 	.word	0x48000400

0800227c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800227c:	b590      	push	{r4, r7, lr}
 800227e:	b08b      	sub	sp, #44	; 0x2c
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	2414      	movs	r4, #20
 8002286:	193b      	adds	r3, r7, r4
 8002288:	0018      	movs	r0, r3
 800228a:	2314      	movs	r3, #20
 800228c:	001a      	movs	r2, r3
 800228e:	2100      	movs	r1, #0
 8002290:	f003 f8ec 	bl	800546c <memset>
  if(huart->Instance==USART4)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a2e      	ldr	r2, [pc, #184]	; (8002354 <HAL_UART_MspInit+0xd8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d156      	bne.n	800234c <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART4_MspInit 0 */

  /* USER CODE END USART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART4_CLK_ENABLE();
 800229e:	4b2e      	ldr	r3, [pc, #184]	; (8002358 <HAL_UART_MspInit+0xdc>)
 80022a0:	69da      	ldr	r2, [r3, #28]
 80022a2:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <HAL_UART_MspInit+0xdc>)
 80022a4:	2180      	movs	r1, #128	; 0x80
 80022a6:	0309      	lsls	r1, r1, #12
 80022a8:	430a      	orrs	r2, r1
 80022aa:	61da      	str	r2, [r3, #28]
 80022ac:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <HAL_UART_MspInit+0xdc>)
 80022ae:	69da      	ldr	r2, [r3, #28]
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	031b      	lsls	r3, r3, #12
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	4b27      	ldr	r3, [pc, #156]	; (8002358 <HAL_UART_MspInit+0xdc>)
 80022bc:	695a      	ldr	r2, [r3, #20]
 80022be:	4b26      	ldr	r3, [pc, #152]	; (8002358 <HAL_UART_MspInit+0xdc>)
 80022c0:	2180      	movs	r1, #128	; 0x80
 80022c2:	0289      	lsls	r1, r1, #10
 80022c4:	430a      	orrs	r2, r1
 80022c6:	615a      	str	r2, [r3, #20]
 80022c8:	4b23      	ldr	r3, [pc, #140]	; (8002358 <HAL_UART_MspInit+0xdc>)
 80022ca:	695a      	ldr	r2, [r3, #20]
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	029b      	lsls	r3, r3, #10
 80022d0:	4013      	ands	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d6:	4b20      	ldr	r3, [pc, #128]	; (8002358 <HAL_UART_MspInit+0xdc>)
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	4b1f      	ldr	r3, [pc, #124]	; (8002358 <HAL_UART_MspInit+0xdc>)
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	0309      	lsls	r1, r1, #12
 80022e0:	430a      	orrs	r2, r1
 80022e2:	615a      	str	r2, [r3, #20]
 80022e4:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <HAL_UART_MspInit+0xdc>)
 80022e6:	695a      	ldr	r2, [r3, #20]
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	031b      	lsls	r3, r3, #12
 80022ec:	4013      	ands	r3, r2
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]
    /**USART4 GPIO Configuration
    PA1     ------> USART4_RX
    PC10     ------> USART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80022f2:	193b      	adds	r3, r7, r4
 80022f4:	2202      	movs	r2, #2
 80022f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	193b      	adds	r3, r7, r4
 80022fa:	2202      	movs	r2, #2
 80022fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	193b      	adds	r3, r7, r4
 8002300:	2200      	movs	r2, #0
 8002302:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002304:	193b      	adds	r3, r7, r4
 8002306:	2203      	movs	r2, #3
 8002308:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 800230a:	193b      	adds	r3, r7, r4
 800230c:	2204      	movs	r2, #4
 800230e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002310:	193a      	adds	r2, r7, r4
 8002312:	2390      	movs	r3, #144	; 0x90
 8002314:	05db      	lsls	r3, r3, #23
 8002316:	0011      	movs	r1, r2
 8002318:	0018      	movs	r0, r3
 800231a:	f000 f9fb 	bl	8002714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800231e:	0021      	movs	r1, r4
 8002320:	187b      	adds	r3, r7, r1
 8002322:	2280      	movs	r2, #128	; 0x80
 8002324:	00d2      	lsls	r2, r2, #3
 8002326:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	187b      	adds	r3, r7, r1
 800232a:	2202      	movs	r2, #2
 800232c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	187b      	adds	r3, r7, r1
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002334:	187b      	adds	r3, r7, r1
 8002336:	2203      	movs	r2, #3
 8002338:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART4;
 800233a:	187b      	adds	r3, r7, r1
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002340:	187b      	adds	r3, r7, r1
 8002342:	4a06      	ldr	r2, [pc, #24]	; (800235c <HAL_UART_MspInit+0xe0>)
 8002344:	0019      	movs	r1, r3
 8002346:	0010      	movs	r0, r2
 8002348:	f000 f9e4 	bl	8002714 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 800234c:	46c0      	nop			; (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	b00b      	add	sp, #44	; 0x2c
 8002352:	bd90      	pop	{r4, r7, pc}
 8002354:	40004c00 	.word	0x40004c00
 8002358:	40021000 	.word	0x40021000
 800235c:	48000800 	.word	0x48000800

08002360 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <HAL_PCD_MspInit+0x38>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d10d      	bne.n	800238e <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_PCD_MspInit+0x3c>)
 8002374:	69da      	ldr	r2, [r3, #28]
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <HAL_PCD_MspInit+0x3c>)
 8002378:	2180      	movs	r1, #128	; 0x80
 800237a:	0409      	lsls	r1, r1, #16
 800237c:	430a      	orrs	r2, r1
 800237e:	61da      	str	r2, [r3, #28]
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_PCD_MspInit+0x3c>)
 8002382:	69da      	ldr	r2, [r3, #28]
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	041b      	lsls	r3, r3, #16
 8002388:	4013      	ands	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	46bd      	mov	sp, r7
 8002392:	b004      	add	sp, #16
 8002394:	bd80      	pop	{r7, pc}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	40005c00 	.word	0x40005c00
 800239c:	40021000 	.word	0x40021000

080023a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <NMI_Handler+0x4>

080023a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023aa:	e7fe      	b.n	80023aa <HardFault_Handler+0x4>

080023ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80023b0:	46c0      	nop			; (mov r8, r8)
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023c4:	f000 f8b2 	bl	800252c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c8:	46c0      	nop			; (mov r8, r8)
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023d8:	4a14      	ldr	r2, [pc, #80]	; (800242c <_sbrk+0x5c>)
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <_sbrk+0x60>)
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <_sbrk+0x64>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d102      	bne.n	80023f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023ec:	4b11      	ldr	r3, [pc, #68]	; (8002434 <_sbrk+0x64>)
 80023ee:	4a12      	ldr	r2, [pc, #72]	; (8002438 <_sbrk+0x68>)
 80023f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <_sbrk+0x64>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	18d3      	adds	r3, r2, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d207      	bcs.n	8002410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002400:	f003 f84a 	bl	8005498 <__errno>
 8002404:	0003      	movs	r3, r0
 8002406:	220c      	movs	r2, #12
 8002408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800240a:	2301      	movs	r3, #1
 800240c:	425b      	negs	r3, r3
 800240e:	e009      	b.n	8002424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002410:	4b08      	ldr	r3, [pc, #32]	; (8002434 <_sbrk+0x64>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <_sbrk+0x64>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	18d2      	adds	r2, r2, r3
 800241e:	4b05      	ldr	r3, [pc, #20]	; (8002434 <_sbrk+0x64>)
 8002420:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002422:	68fb      	ldr	r3, [r7, #12]
}
 8002424:	0018      	movs	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	b006      	add	sp, #24
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20004000 	.word	0x20004000
 8002430:	00000400 	.word	0x00000400
 8002434:	200004f4 	.word	0x200004f4
 8002438:	20000648 	.word	0x20000648

0800243c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002440:	46c0      	nop			; (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002448:	480d      	ldr	r0, [pc, #52]	; (8002480 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800244a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800244c:	f7ff fff6 	bl	800243c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002450:	480c      	ldr	r0, [pc, #48]	; (8002484 <LoopForever+0x6>)
  ldr r1, =_edata
 8002452:	490d      	ldr	r1, [pc, #52]	; (8002488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002454:	4a0d      	ldr	r2, [pc, #52]	; (800248c <LoopForever+0xe>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002458:	e002      	b.n	8002460 <LoopCopyDataInit>

0800245a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800245a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800245c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800245e:	3304      	adds	r3, #4

08002460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002464:	d3f9      	bcc.n	800245a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002468:	4c0a      	ldr	r4, [pc, #40]	; (8002494 <LoopForever+0x16>)
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800246c:	e001      	b.n	8002472 <LoopFillZerobss>

0800246e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800246e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002470:	3204      	adds	r2, #4

08002472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002474:	d3fb      	bcc.n	800246e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002476:	f003 f815 	bl	80054a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800247a:	f7ff f8e7 	bl	800164c <main>

0800247e <LoopForever>:

LoopForever:
    b LoopForever
 800247e:	e7fe      	b.n	800247e <LoopForever>
  ldr   r0, =_estack
 8002480:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002488:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800248c:	08005e88 	.word	0x08005e88
  ldr r2, =_sbss
 8002490:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002494:	20000644 	.word	0x20000644

08002498 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002498:	e7fe      	b.n	8002498 <ADC1_COMP_IRQHandler>
	...

0800249c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a0:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <HAL_Init+0x24>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_Init+0x24>)
 80024a6:	2110      	movs	r1, #16
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80024ac:	2000      	movs	r0, #0
 80024ae:	f000 f809 	bl	80024c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024b2:	f7ff fd85 	bl	8001fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	0018      	movs	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	40022000 	.word	0x40022000

080024c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024cc:	4b14      	ldr	r3, [pc, #80]	; (8002520 <HAL_InitTick+0x5c>)
 80024ce:	681c      	ldr	r4, [r3, #0]
 80024d0:	4b14      	ldr	r3, [pc, #80]	; (8002524 <HAL_InitTick+0x60>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	0019      	movs	r1, r3
 80024d6:	23fa      	movs	r3, #250	; 0xfa
 80024d8:	0098      	lsls	r0, r3, #2
 80024da:	f7fd fe27 	bl	800012c <__udivsi3>
 80024de:	0003      	movs	r3, r0
 80024e0:	0019      	movs	r1, r3
 80024e2:	0020      	movs	r0, r4
 80024e4:	f7fd fe22 	bl	800012c <__udivsi3>
 80024e8:	0003      	movs	r3, r0
 80024ea:	0018      	movs	r0, r3
 80024ec:	f000 f905 	bl	80026fa <HAL_SYSTICK_Config>
 80024f0:	1e03      	subs	r3, r0, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e00f      	b.n	8002518 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d80b      	bhi.n	8002516 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	2301      	movs	r3, #1
 8002502:	425b      	negs	r3, r3
 8002504:	2200      	movs	r2, #0
 8002506:	0018      	movs	r0, r3
 8002508:	f000 f8e2 	bl	80026d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_InitTick+0x64>)
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e000      	b.n	8002518 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
}
 8002518:	0018      	movs	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	b003      	add	sp, #12
 800251e:	bd90      	pop	{r4, r7, pc}
 8002520:	20000000 	.word	0x20000000
 8002524:	20000008 	.word	0x20000008
 8002528:	20000004 	.word	0x20000004

0800252c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <HAL_IncTick+0x1c>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	001a      	movs	r2, r3
 8002536:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_IncTick+0x20>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	18d2      	adds	r2, r2, r3
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_IncTick+0x20>)
 800253e:	601a      	str	r2, [r3, #0]
}
 8002540:	46c0      	nop			; (mov r8, r8)
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	20000008 	.word	0x20000008
 800254c:	200004f8 	.word	0x200004f8

08002550 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  return uwTick;
 8002554:	4b02      	ldr	r3, [pc, #8]	; (8002560 <HAL_GetTick+0x10>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	0018      	movs	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	200004f8 	.word	0x200004f8

08002564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800256c:	f7ff fff0 	bl	8002550 <HAL_GetTick>
 8002570:	0003      	movs	r3, r0
 8002572:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3301      	adds	r3, #1
 800257c:	d005      	beq.n	800258a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800257e:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <HAL_Delay+0x44>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	001a      	movs	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	189b      	adds	r3, r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	f7ff ffe0 	bl	8002550 <HAL_GetTick>
 8002590:	0002      	movs	r2, r0
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	429a      	cmp	r2, r3
 800259a:	d8f7      	bhi.n	800258c <HAL_Delay+0x28>
  {
  }
}
 800259c:	46c0      	nop			; (mov r8, r8)
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b004      	add	sp, #16
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	20000008 	.word	0x20000008

080025ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025ac:	b590      	push	{r4, r7, lr}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	0002      	movs	r2, r0
 80025b4:	6039      	str	r1, [r7, #0]
 80025b6:	1dfb      	adds	r3, r7, #7
 80025b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025ba:	1dfb      	adds	r3, r7, #7
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b7f      	cmp	r3, #127	; 0x7f
 80025c0:	d828      	bhi.n	8002614 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025c2:	4a2f      	ldr	r2, [pc, #188]	; (8002680 <__NVIC_SetPriority+0xd4>)
 80025c4:	1dfb      	adds	r3, r7, #7
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	b25b      	sxtb	r3, r3
 80025ca:	089b      	lsrs	r3, r3, #2
 80025cc:	33c0      	adds	r3, #192	; 0xc0
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	589b      	ldr	r3, [r3, r2]
 80025d2:	1dfa      	adds	r2, r7, #7
 80025d4:	7812      	ldrb	r2, [r2, #0]
 80025d6:	0011      	movs	r1, r2
 80025d8:	2203      	movs	r2, #3
 80025da:	400a      	ands	r2, r1
 80025dc:	00d2      	lsls	r2, r2, #3
 80025de:	21ff      	movs	r1, #255	; 0xff
 80025e0:	4091      	lsls	r1, r2
 80025e2:	000a      	movs	r2, r1
 80025e4:	43d2      	mvns	r2, r2
 80025e6:	401a      	ands	r2, r3
 80025e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	019b      	lsls	r3, r3, #6
 80025ee:	22ff      	movs	r2, #255	; 0xff
 80025f0:	401a      	ands	r2, r3
 80025f2:	1dfb      	adds	r3, r7, #7
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	0018      	movs	r0, r3
 80025f8:	2303      	movs	r3, #3
 80025fa:	4003      	ands	r3, r0
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002600:	481f      	ldr	r0, [pc, #124]	; (8002680 <__NVIC_SetPriority+0xd4>)
 8002602:	1dfb      	adds	r3, r7, #7
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	b25b      	sxtb	r3, r3
 8002608:	089b      	lsrs	r3, r3, #2
 800260a:	430a      	orrs	r2, r1
 800260c:	33c0      	adds	r3, #192	; 0xc0
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002612:	e031      	b.n	8002678 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002614:	4a1b      	ldr	r2, [pc, #108]	; (8002684 <__NVIC_SetPriority+0xd8>)
 8002616:	1dfb      	adds	r3, r7, #7
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	0019      	movs	r1, r3
 800261c:	230f      	movs	r3, #15
 800261e:	400b      	ands	r3, r1
 8002620:	3b08      	subs	r3, #8
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	3306      	adds	r3, #6
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	18d3      	adds	r3, r2, r3
 800262a:	3304      	adds	r3, #4
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	1dfa      	adds	r2, r7, #7
 8002630:	7812      	ldrb	r2, [r2, #0]
 8002632:	0011      	movs	r1, r2
 8002634:	2203      	movs	r2, #3
 8002636:	400a      	ands	r2, r1
 8002638:	00d2      	lsls	r2, r2, #3
 800263a:	21ff      	movs	r1, #255	; 0xff
 800263c:	4091      	lsls	r1, r2
 800263e:	000a      	movs	r2, r1
 8002640:	43d2      	mvns	r2, r2
 8002642:	401a      	ands	r2, r3
 8002644:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	019b      	lsls	r3, r3, #6
 800264a:	22ff      	movs	r2, #255	; 0xff
 800264c:	401a      	ands	r2, r3
 800264e:	1dfb      	adds	r3, r7, #7
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	0018      	movs	r0, r3
 8002654:	2303      	movs	r3, #3
 8002656:	4003      	ands	r3, r0
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800265c:	4809      	ldr	r0, [pc, #36]	; (8002684 <__NVIC_SetPriority+0xd8>)
 800265e:	1dfb      	adds	r3, r7, #7
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	001c      	movs	r4, r3
 8002664:	230f      	movs	r3, #15
 8002666:	4023      	ands	r3, r4
 8002668:	3b08      	subs	r3, #8
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	430a      	orrs	r2, r1
 800266e:	3306      	adds	r3, #6
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	18c3      	adds	r3, r0, r3
 8002674:	3304      	adds	r3, #4
 8002676:	601a      	str	r2, [r3, #0]
}
 8002678:	46c0      	nop			; (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	b003      	add	sp, #12
 800267e:	bd90      	pop	{r4, r7, pc}
 8002680:	e000e100 	.word	0xe000e100
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	1e5a      	subs	r2, r3, #1
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	045b      	lsls	r3, r3, #17
 8002698:	429a      	cmp	r2, r3
 800269a:	d301      	bcc.n	80026a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800269c:	2301      	movs	r3, #1
 800269e:	e010      	b.n	80026c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a0:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <SysTick_Config+0x44>)
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	3a01      	subs	r2, #1
 80026a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a8:	2301      	movs	r3, #1
 80026aa:	425b      	negs	r3, r3
 80026ac:	2103      	movs	r1, #3
 80026ae:	0018      	movs	r0, r3
 80026b0:	f7ff ff7c 	bl	80025ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <SysTick_Config+0x44>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ba:	4b04      	ldr	r3, [pc, #16]	; (80026cc <SysTick_Config+0x44>)
 80026bc:	2207      	movs	r2, #7
 80026be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	0018      	movs	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b002      	add	sp, #8
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	e000e010 	.word	0xe000e010

080026d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	210f      	movs	r1, #15
 80026dc:	187b      	adds	r3, r7, r1
 80026de:	1c02      	adds	r2, r0, #0
 80026e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	187b      	adds	r3, r7, r1
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	b25b      	sxtb	r3, r3
 80026ea:	0011      	movs	r1, r2
 80026ec:	0018      	movs	r0, r3
 80026ee:	f7ff ff5d 	bl	80025ac <__NVIC_SetPriority>
}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	46bd      	mov	sp, r7
 80026f6:	b004      	add	sp, #16
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	0018      	movs	r0, r3
 8002706:	f7ff ffbf 	bl	8002688 <SysTick_Config>
 800270a:	0003      	movs	r3, r0
}
 800270c:	0018      	movs	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	b002      	add	sp, #8
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002722:	e155      	b.n	80029d0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2101      	movs	r1, #1
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4091      	lsls	r1, r2
 800272e:	000a      	movs	r2, r1
 8002730:	4013      	ands	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d100      	bne.n	800273c <HAL_GPIO_Init+0x28>
 800273a:	e146      	b.n	80029ca <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2203      	movs	r2, #3
 8002742:	4013      	ands	r3, r2
 8002744:	2b01      	cmp	r3, #1
 8002746:	d005      	beq.n	8002754 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2203      	movs	r2, #3
 800274e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002750:	2b02      	cmp	r3, #2
 8002752:	d130      	bne.n	80027b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	409a      	lsls	r2, r3
 8002762:	0013      	movs	r3, r2
 8002764:	43da      	mvns	r2, r3
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	409a      	lsls	r2, r3
 8002776:	0013      	movs	r3, r2
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800278a:	2201      	movs	r2, #1
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	409a      	lsls	r2, r3
 8002790:	0013      	movs	r3, r2
 8002792:	43da      	mvns	r2, r3
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4013      	ands	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	091b      	lsrs	r3, r3, #4
 80027a0:	2201      	movs	r2, #1
 80027a2:	401a      	ands	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	409a      	lsls	r2, r3
 80027a8:	0013      	movs	r3, r2
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2203      	movs	r2, #3
 80027bc:	4013      	ands	r3, r2
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d017      	beq.n	80027f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	2203      	movs	r2, #3
 80027ce:	409a      	lsls	r2, r3
 80027d0:	0013      	movs	r3, r2
 80027d2:	43da      	mvns	r2, r3
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4013      	ands	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	409a      	lsls	r2, r3
 80027e4:	0013      	movs	r3, r2
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2203      	movs	r2, #3
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d123      	bne.n	8002846 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	08da      	lsrs	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3208      	adds	r2, #8
 8002806:	0092      	lsls	r2, r2, #2
 8002808:	58d3      	ldr	r3, [r2, r3]
 800280a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2207      	movs	r2, #7
 8002810:	4013      	ands	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	220f      	movs	r2, #15
 8002816:	409a      	lsls	r2, r3
 8002818:	0013      	movs	r3, r2
 800281a:	43da      	mvns	r2, r3
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2107      	movs	r1, #7
 800282a:	400b      	ands	r3, r1
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	409a      	lsls	r2, r3
 8002830:	0013      	movs	r3, r2
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	08da      	lsrs	r2, r3, #3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3208      	adds	r2, #8
 8002840:	0092      	lsls	r2, r2, #2
 8002842:	6939      	ldr	r1, [r7, #16]
 8002844:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	2203      	movs	r2, #3
 8002852:	409a      	lsls	r2, r3
 8002854:	0013      	movs	r3, r2
 8002856:	43da      	mvns	r2, r3
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4013      	ands	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2203      	movs	r2, #3
 8002864:	401a      	ands	r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	409a      	lsls	r2, r3
 800286c:	0013      	movs	r3, r2
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	23c0      	movs	r3, #192	; 0xc0
 8002880:	029b      	lsls	r3, r3, #10
 8002882:	4013      	ands	r3, r2
 8002884:	d100      	bne.n	8002888 <HAL_GPIO_Init+0x174>
 8002886:	e0a0      	b.n	80029ca <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002888:	4b57      	ldr	r3, [pc, #348]	; (80029e8 <HAL_GPIO_Init+0x2d4>)
 800288a:	699a      	ldr	r2, [r3, #24]
 800288c:	4b56      	ldr	r3, [pc, #344]	; (80029e8 <HAL_GPIO_Init+0x2d4>)
 800288e:	2101      	movs	r1, #1
 8002890:	430a      	orrs	r2, r1
 8002892:	619a      	str	r2, [r3, #24]
 8002894:	4b54      	ldr	r3, [pc, #336]	; (80029e8 <HAL_GPIO_Init+0x2d4>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	2201      	movs	r2, #1
 800289a:	4013      	ands	r3, r2
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028a0:	4a52      	ldr	r2, [pc, #328]	; (80029ec <HAL_GPIO_Init+0x2d8>)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	089b      	lsrs	r3, r3, #2
 80028a6:	3302      	adds	r3, #2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	589b      	ldr	r3, [r3, r2]
 80028ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2203      	movs	r2, #3
 80028b2:	4013      	ands	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	220f      	movs	r2, #15
 80028b8:	409a      	lsls	r2, r3
 80028ba:	0013      	movs	r3, r2
 80028bc:	43da      	mvns	r2, r3
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	2390      	movs	r3, #144	; 0x90
 80028c8:	05db      	lsls	r3, r3, #23
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d019      	beq.n	8002902 <HAL_GPIO_Init+0x1ee>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a47      	ldr	r2, [pc, #284]	; (80029f0 <HAL_GPIO_Init+0x2dc>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d013      	beq.n	80028fe <HAL_GPIO_Init+0x1ea>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a46      	ldr	r2, [pc, #280]	; (80029f4 <HAL_GPIO_Init+0x2e0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00d      	beq.n	80028fa <HAL_GPIO_Init+0x1e6>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a45      	ldr	r2, [pc, #276]	; (80029f8 <HAL_GPIO_Init+0x2e4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d007      	beq.n	80028f6 <HAL_GPIO_Init+0x1e2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a44      	ldr	r2, [pc, #272]	; (80029fc <HAL_GPIO_Init+0x2e8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d101      	bne.n	80028f2 <HAL_GPIO_Init+0x1de>
 80028ee:	2304      	movs	r3, #4
 80028f0:	e008      	b.n	8002904 <HAL_GPIO_Init+0x1f0>
 80028f2:	2305      	movs	r3, #5
 80028f4:	e006      	b.n	8002904 <HAL_GPIO_Init+0x1f0>
 80028f6:	2303      	movs	r3, #3
 80028f8:	e004      	b.n	8002904 <HAL_GPIO_Init+0x1f0>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e002      	b.n	8002904 <HAL_GPIO_Init+0x1f0>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <HAL_GPIO_Init+0x1f0>
 8002902:	2300      	movs	r3, #0
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	2103      	movs	r1, #3
 8002908:	400a      	ands	r2, r1
 800290a:	0092      	lsls	r2, r2, #2
 800290c:	4093      	lsls	r3, r2
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002914:	4935      	ldr	r1, [pc, #212]	; (80029ec <HAL_GPIO_Init+0x2d8>)
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	089b      	lsrs	r3, r3, #2
 800291a:	3302      	adds	r3, #2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002922:	4b37      	ldr	r3, [pc, #220]	; (8002a00 <HAL_GPIO_Init+0x2ec>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	43da      	mvns	r2, r3
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4013      	ands	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	035b      	lsls	r3, r3, #13
 800293a:	4013      	ands	r3, r2
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002946:	4b2e      	ldr	r3, [pc, #184]	; (8002a00 <HAL_GPIO_Init+0x2ec>)
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800294c:	4b2c      	ldr	r3, [pc, #176]	; (8002a00 <HAL_GPIO_Init+0x2ec>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	43da      	mvns	r2, r3
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	039b      	lsls	r3, r3, #14
 8002964:	4013      	ands	r3, r2
 8002966:	d003      	beq.n	8002970 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002970:	4b23      	ldr	r3, [pc, #140]	; (8002a00 <HAL_GPIO_Init+0x2ec>)
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002976:	4b22      	ldr	r3, [pc, #136]	; (8002a00 <HAL_GPIO_Init+0x2ec>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	43da      	mvns	r2, r3
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4013      	ands	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	029b      	lsls	r3, r3, #10
 800298e:	4013      	ands	r3, r2
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800299a:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <HAL_GPIO_Init+0x2ec>)
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80029a0:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <HAL_GPIO_Init+0x2ec>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	43da      	mvns	r2, r3
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	025b      	lsls	r3, r3, #9
 80029b8:	4013      	ands	r3, r2
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80029c4:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <HAL_GPIO_Init+0x2ec>)
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	3301      	adds	r3, #1
 80029ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	40da      	lsrs	r2, r3
 80029d8:	1e13      	subs	r3, r2, #0
 80029da:	d000      	beq.n	80029de <HAL_GPIO_Init+0x2ca>
 80029dc:	e6a2      	b.n	8002724 <HAL_GPIO_Init+0x10>
  } 
}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	46c0      	nop			; (mov r8, r8)
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b006      	add	sp, #24
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40010000 	.word	0x40010000
 80029f0:	48000400 	.word	0x48000400
 80029f4:	48000800 	.word	0x48000800
 80029f8:	48000c00 	.word	0x48000c00
 80029fc:	48001000 	.word	0x48001000
 8002a00:	40010400 	.word	0x40010400

08002a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	0008      	movs	r0, r1
 8002a0e:	0011      	movs	r1, r2
 8002a10:	1cbb      	adds	r3, r7, #2
 8002a12:	1c02      	adds	r2, r0, #0
 8002a14:	801a      	strh	r2, [r3, #0]
 8002a16:	1c7b      	adds	r3, r7, #1
 8002a18:	1c0a      	adds	r2, r1, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a1c:	1c7b      	adds	r3, r7, #1
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d004      	beq.n	8002a2e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a24:	1cbb      	adds	r3, r7, #2
 8002a26:	881a      	ldrh	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a2c:	e003      	b.n	8002a36 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a2e:	1cbb      	adds	r3, r7, #2
 8002a30:	881a      	ldrh	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b002      	add	sp, #8
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e082      	b.n	8002b58 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2241      	movs	r2, #65	; 0x41
 8002a56:	5c9b      	ldrb	r3, [r3, r2]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d107      	bne.n	8002a6e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2240      	movs	r2, #64	; 0x40
 8002a62:	2100      	movs	r1, #0
 8002a64:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7ff facd 	bl	8002008 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2241      	movs	r2, #65	; 0x41
 8002a72:	2124      	movs	r1, #36	; 0x24
 8002a74:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2101      	movs	r1, #1
 8002a82:	438a      	bics	r2, r1
 8002a84:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4934      	ldr	r1, [pc, #208]	; (8002b60 <HAL_I2C_Init+0x120>)
 8002a90:	400a      	ands	r2, r1
 8002a92:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4931      	ldr	r1, [pc, #196]	; (8002b64 <HAL_I2C_Init+0x124>)
 8002aa0:	400a      	ands	r2, r1
 8002aa2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d108      	bne.n	8002abe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2180      	movs	r1, #128	; 0x80
 8002ab6:	0209      	lsls	r1, r1, #8
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	e007      	b.n	8002ace <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2184      	movs	r1, #132	; 0x84
 8002ac8:	0209      	lsls	r1, r1, #8
 8002aca:	430a      	orrs	r2, r1
 8002acc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d104      	bne.n	8002ae0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2280      	movs	r2, #128	; 0x80
 8002adc:	0112      	lsls	r2, r2, #4
 8002ade:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	491f      	ldr	r1, [pc, #124]	; (8002b68 <HAL_I2C_Init+0x128>)
 8002aec:	430a      	orrs	r2, r1
 8002aee:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	491a      	ldr	r1, [pc, #104]	; (8002b64 <HAL_I2C_Init+0x124>)
 8002afc:	400a      	ands	r2, r1
 8002afe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69d9      	ldr	r1, [r3, #28]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1a      	ldr	r2, [r3, #32]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2101      	movs	r1, #1
 8002b36:	430a      	orrs	r2, r1
 8002b38:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2241      	movs	r2, #65	; 0x41
 8002b44:	2120      	movs	r1, #32
 8002b46:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2242      	movs	r2, #66	; 0x42
 8002b52:	2100      	movs	r1, #0
 8002b54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	0018      	movs	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b002      	add	sp, #8
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	f0ffffff 	.word	0xf0ffffff
 8002b64:	ffff7fff 	.word	0xffff7fff
 8002b68:	02008000 	.word	0x02008000

08002b6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2241      	movs	r2, #65	; 0x41
 8002b7a:	5c9b      	ldrb	r3, [r3, r2]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	d138      	bne.n	8002bf4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2240      	movs	r2, #64	; 0x40
 8002b86:	5c9b      	ldrb	r3, [r3, r2]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e032      	b.n	8002bf6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2240      	movs	r2, #64	; 0x40
 8002b94:	2101      	movs	r1, #1
 8002b96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2241      	movs	r2, #65	; 0x41
 8002b9c:	2124      	movs	r1, #36	; 0x24
 8002b9e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2101      	movs	r1, #1
 8002bac:	438a      	bics	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4911      	ldr	r1, [pc, #68]	; (8002c00 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002bbc:	400a      	ands	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6819      	ldr	r1, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2101      	movs	r1, #1
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2241      	movs	r2, #65	; 0x41
 8002be4:	2120      	movs	r1, #32
 8002be6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2240      	movs	r2, #64	; 0x40
 8002bec:	2100      	movs	r1, #0
 8002bee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e000      	b.n	8002bf6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bf4:	2302      	movs	r3, #2
  }
}
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b002      	add	sp, #8
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	ffffefff 	.word	0xffffefff

08002c04 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2241      	movs	r2, #65	; 0x41
 8002c12:	5c9b      	ldrb	r3, [r3, r2]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	d139      	bne.n	8002c8e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2240      	movs	r2, #64	; 0x40
 8002c1e:	5c9b      	ldrb	r3, [r3, r2]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e033      	b.n	8002c90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2240      	movs	r2, #64	; 0x40
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2241      	movs	r2, #65	; 0x41
 8002c34:	2124      	movs	r1, #36	; 0x24
 8002c36:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2101      	movs	r1, #1
 8002c44:	438a      	bics	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4a11      	ldr	r2, [pc, #68]	; (8002c98 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	021b      	lsls	r3, r3, #8
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2101      	movs	r1, #1
 8002c76:	430a      	orrs	r2, r1
 8002c78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2241      	movs	r2, #65	; 0x41
 8002c7e:	2120      	movs	r1, #32
 8002c80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2240      	movs	r2, #64	; 0x40
 8002c86:	2100      	movs	r1, #0
 8002c88:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	e000      	b.n	8002c90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c8e:	2302      	movs	r3, #2
  }
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b004      	add	sp, #16
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	fffff0ff 	.word	0xfffff0ff

08002c9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c9e:	b08b      	sub	sp, #44	; 0x2c
 8002ca0:	af06      	add	r7, sp, #24
 8002ca2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e0f0      	b.n	8002e90 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a79      	ldr	r2, [pc, #484]	; (8002e98 <HAL_PCD_Init+0x1fc>)
 8002cb2:	5c9b      	ldrb	r3, [r3, r2]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d108      	bne.n	8002ccc <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	23aa      	movs	r3, #170	; 0xaa
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f7ff fb4a 	bl	8002360 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a72      	ldr	r2, [pc, #456]	; (8002e98 <HAL_PCD_Init+0x1fc>)
 8002cd0:	2103      	movs	r1, #3
 8002cd2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f002 fb65 	bl	80053a8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cde:	230f      	movs	r3, #15
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	e049      	b.n	8002d7c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ce8:	200f      	movs	r0, #15
 8002cea:	183b      	adds	r3, r7, r0
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	0013      	movs	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	189b      	adds	r3, r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	18cb      	adds	r3, r1, r3
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	2201      	movs	r2, #1
 8002d00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d02:	183b      	adds	r3, r7, r0
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	0013      	movs	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	189b      	adds	r3, r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	183a      	adds	r2, r7, r0
 8002d14:	7812      	ldrb	r2, [r2, #0]
 8002d16:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d18:	183b      	adds	r3, r7, r0
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	0013      	movs	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	189b      	adds	r3, r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	18cb      	adds	r3, r1, r3
 8002d2a:	3303      	adds	r3, #3
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d30:	183b      	adds	r3, r7, r0
 8002d32:	781a      	ldrb	r2, [r3, #0]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	0013      	movs	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	189b      	adds	r3, r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	18cb      	adds	r3, r1, r3
 8002d40:	3338      	adds	r3, #56	; 0x38
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d46:	183b      	adds	r3, r7, r0
 8002d48:	781a      	ldrb	r2, [r3, #0]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	0013      	movs	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	189b      	adds	r3, r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	18cb      	adds	r3, r1, r3
 8002d56:	333c      	adds	r3, #60	; 0x3c
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d5c:	183b      	adds	r3, r7, r0
 8002d5e:	781a      	ldrb	r2, [r3, #0]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	0013      	movs	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	189b      	adds	r3, r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	18cb      	adds	r3, r1, r3
 8002d6c:	3340      	adds	r3, #64	; 0x40
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d72:	183b      	adds	r3, r7, r0
 8002d74:	781a      	ldrb	r2, [r3, #0]
 8002d76:	183b      	adds	r3, r7, r0
 8002d78:	3201      	adds	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
 8002d7c:	210f      	movs	r1, #15
 8002d7e:	187b      	adds	r3, r7, r1
 8002d80:	781a      	ldrb	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d3ae      	bcc.n	8002ce8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	701a      	strb	r2, [r3, #0]
 8002d90:	e056      	b.n	8002e40 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d92:	240f      	movs	r4, #15
 8002d94:	193b      	adds	r3, r7, r4
 8002d96:	781a      	ldrb	r2, [r3, #0]
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	236a      	movs	r3, #106	; 0x6a
 8002d9c:	33ff      	adds	r3, #255	; 0xff
 8002d9e:	0019      	movs	r1, r3
 8002da0:	0013      	movs	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	189b      	adds	r3, r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	18c3      	adds	r3, r0, r3
 8002daa:	185b      	adds	r3, r3, r1
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002db0:	193b      	adds	r3, r7, r4
 8002db2:	781a      	ldrb	r2, [r3, #0]
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	23b4      	movs	r3, #180	; 0xb4
 8002db8:	0059      	lsls	r1, r3, #1
 8002dba:	0013      	movs	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	189b      	adds	r3, r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	18c3      	adds	r3, r0, r3
 8002dc4:	185b      	adds	r3, r3, r1
 8002dc6:	193a      	adds	r2, r7, r4
 8002dc8:	7812      	ldrb	r2, [r2, #0]
 8002dca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002dcc:	193b      	adds	r3, r7, r4
 8002dce:	781a      	ldrb	r2, [r3, #0]
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	236c      	movs	r3, #108	; 0x6c
 8002dd4:	33ff      	adds	r3, #255	; 0xff
 8002dd6:	0019      	movs	r1, r3
 8002dd8:	0013      	movs	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	189b      	adds	r3, r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	18c3      	adds	r3, r0, r3
 8002de2:	185b      	adds	r3, r3, r1
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002de8:	193b      	adds	r3, r7, r4
 8002dea:	781a      	ldrb	r2, [r3, #0]
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	23bc      	movs	r3, #188	; 0xbc
 8002df0:	0059      	lsls	r1, r3, #1
 8002df2:	0013      	movs	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	189b      	adds	r3, r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	18c3      	adds	r3, r0, r3
 8002dfc:	185b      	adds	r3, r3, r1
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e02:	193b      	adds	r3, r7, r4
 8002e04:	781a      	ldrb	r2, [r3, #0]
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	23be      	movs	r3, #190	; 0xbe
 8002e0a:	0059      	lsls	r1, r3, #1
 8002e0c:	0013      	movs	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	189b      	adds	r3, r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	18c3      	adds	r3, r0, r3
 8002e16:	185b      	adds	r3, r3, r1
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e1c:	193b      	adds	r3, r7, r4
 8002e1e:	781a      	ldrb	r2, [r3, #0]
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	23c0      	movs	r3, #192	; 0xc0
 8002e24:	0059      	lsls	r1, r3, #1
 8002e26:	0013      	movs	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	189b      	adds	r3, r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	18c3      	adds	r3, r0, r3
 8002e30:	185b      	adds	r3, r3, r1
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e36:	193b      	adds	r3, r7, r4
 8002e38:	781a      	ldrb	r2, [r3, #0]
 8002e3a:	193b      	adds	r3, r7, r4
 8002e3c:	3201      	adds	r2, #1
 8002e3e:	701a      	strb	r2, [r3, #0]
 8002e40:	230f      	movs	r3, #15
 8002e42:	18fb      	adds	r3, r7, r3
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d3a1      	bcc.n	8002d92 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	466a      	mov	r2, sp
 8002e56:	0011      	movs	r1, r2
 8002e58:	001a      	movs	r2, r3
 8002e5a:	3210      	adds	r2, #16
 8002e5c:	ca70      	ldmia	r2!, {r4, r5, r6}
 8002e5e:	c170      	stmia	r1!, {r4, r5, r6}
 8002e60:	ca30      	ldmia	r2!, {r4, r5}
 8002e62:	c130      	stmia	r1!, {r4, r5}
 8002e64:	6859      	ldr	r1, [r3, #4]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f002 fab7 	bl	80053dc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2224      	movs	r2, #36	; 0x24
 8002e72:	2100      	movs	r1, #0
 8002e74:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a07      	ldr	r2, [pc, #28]	; (8002e98 <HAL_PCD_Init+0x1fc>)
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d103      	bne.n	8002e8e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f000 f807 	bl	8002e9c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	0018      	movs	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b005      	add	sp, #20
 8002e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e98:	000002a9 	.word	0x000002a9

08002e9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	23ba      	movs	r3, #186	; 0xba
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	23b8      	movs	r3, #184	; 0xb8
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	2100      	movs	r1, #0
 8002ebc:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2254      	movs	r2, #84	; 0x54
 8002ec2:	5a9b      	ldrh	r3, [r3, r2]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	b299      	uxth	r1, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2254      	movs	r2, #84	; 0x54
 8002ed0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2254      	movs	r2, #84	; 0x54
 8002ed6:	5a9b      	ldrh	r3, [r3, r2]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2202      	movs	r2, #2
 8002edc:	4313      	orrs	r3, r2
 8002ede:	b299      	uxth	r1, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2254      	movs	r2, #84	; 0x54
 8002ee4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b004      	add	sp, #16
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d102      	bne.n	8002f04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	f000 fb76 	bl	80035f0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d100      	bne.n	8002f10 <HAL_RCC_OscConfig+0x20>
 8002f0e:	e08e      	b.n	800302e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f10:	4bc5      	ldr	r3, [pc, #788]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	220c      	movs	r2, #12
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d00e      	beq.n	8002f3a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f1c:	4bc2      	ldr	r3, [pc, #776]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	220c      	movs	r2, #12
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d117      	bne.n	8002f58 <HAL_RCC_OscConfig+0x68>
 8002f28:	4bbf      	ldr	r3, [pc, #764]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	23c0      	movs	r3, #192	; 0xc0
 8002f2e:	025b      	lsls	r3, r3, #9
 8002f30:	401a      	ands	r2, r3
 8002f32:	2380      	movs	r3, #128	; 0x80
 8002f34:	025b      	lsls	r3, r3, #9
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d10e      	bne.n	8002f58 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3a:	4bbb      	ldr	r3, [pc, #748]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	2380      	movs	r3, #128	; 0x80
 8002f40:	029b      	lsls	r3, r3, #10
 8002f42:	4013      	ands	r3, r2
 8002f44:	d100      	bne.n	8002f48 <HAL_RCC_OscConfig+0x58>
 8002f46:	e071      	b.n	800302c <HAL_RCC_OscConfig+0x13c>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d000      	beq.n	8002f52 <HAL_RCC_OscConfig+0x62>
 8002f50:	e06c      	b.n	800302c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	f000 fb4c 	bl	80035f0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d107      	bne.n	8002f70 <HAL_RCC_OscConfig+0x80>
 8002f60:	4bb1      	ldr	r3, [pc, #708]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4bb0      	ldr	r3, [pc, #704]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8002f66:	2180      	movs	r1, #128	; 0x80
 8002f68:	0249      	lsls	r1, r1, #9
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	e02f      	b.n	8002fd0 <HAL_RCC_OscConfig+0xe0>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10c      	bne.n	8002f92 <HAL_RCC_OscConfig+0xa2>
 8002f78:	4bab      	ldr	r3, [pc, #684]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4baa      	ldr	r3, [pc, #680]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8002f7e:	49ab      	ldr	r1, [pc, #684]	; (800322c <HAL_RCC_OscConfig+0x33c>)
 8002f80:	400a      	ands	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	4ba8      	ldr	r3, [pc, #672]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4ba7      	ldr	r3, [pc, #668]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8002f8a:	49a9      	ldr	r1, [pc, #676]	; (8003230 <HAL_RCC_OscConfig+0x340>)
 8002f8c:	400a      	ands	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	e01e      	b.n	8002fd0 <HAL_RCC_OscConfig+0xe0>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b05      	cmp	r3, #5
 8002f98:	d10e      	bne.n	8002fb8 <HAL_RCC_OscConfig+0xc8>
 8002f9a:	4ba3      	ldr	r3, [pc, #652]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4ba2      	ldr	r3, [pc, #648]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8002fa0:	2180      	movs	r1, #128	; 0x80
 8002fa2:	02c9      	lsls	r1, r1, #11
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	4b9f      	ldr	r3, [pc, #636]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4b9e      	ldr	r3, [pc, #632]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8002fae:	2180      	movs	r1, #128	; 0x80
 8002fb0:	0249      	lsls	r1, r1, #9
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	e00b      	b.n	8002fd0 <HAL_RCC_OscConfig+0xe0>
 8002fb8:	4b9b      	ldr	r3, [pc, #620]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b9a      	ldr	r3, [pc, #616]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8002fbe:	499b      	ldr	r1, [pc, #620]	; (800322c <HAL_RCC_OscConfig+0x33c>)
 8002fc0:	400a      	ands	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	4b98      	ldr	r3, [pc, #608]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4b97      	ldr	r3, [pc, #604]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8002fca:	4999      	ldr	r1, [pc, #612]	; (8003230 <HAL_RCC_OscConfig+0x340>)
 8002fcc:	400a      	ands	r2, r1
 8002fce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d014      	beq.n	8003002 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd8:	f7ff faba 	bl	8002550 <HAL_GetTick>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fe2:	f7ff fab5 	bl	8002550 <HAL_GetTick>
 8002fe6:	0002      	movs	r2, r0
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b64      	cmp	r3, #100	; 0x64
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e2fd      	b.n	80035f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff4:	4b8c      	ldr	r3, [pc, #560]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	029b      	lsls	r3, r3, #10
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0xf2>
 8003000:	e015      	b.n	800302e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003002:	f7ff faa5 	bl	8002550 <HAL_GetTick>
 8003006:	0003      	movs	r3, r0
 8003008:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800300c:	f7ff faa0 	bl	8002550 <HAL_GetTick>
 8003010:	0002      	movs	r2, r0
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b64      	cmp	r3, #100	; 0x64
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e2e8      	b.n	80035f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	4b82      	ldr	r3, [pc, #520]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	2380      	movs	r3, #128	; 0x80
 8003024:	029b      	lsls	r3, r3, #10
 8003026:	4013      	ands	r3, r2
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x11c>
 800302a:	e000      	b.n	800302e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2202      	movs	r2, #2
 8003034:	4013      	ands	r3, r2
 8003036:	d100      	bne.n	800303a <HAL_RCC_OscConfig+0x14a>
 8003038:	e06c      	b.n	8003114 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800303a:	4b7b      	ldr	r3, [pc, #492]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	220c      	movs	r2, #12
 8003040:	4013      	ands	r3, r2
 8003042:	d00e      	beq.n	8003062 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003044:	4b78      	ldr	r3, [pc, #480]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	220c      	movs	r2, #12
 800304a:	4013      	ands	r3, r2
 800304c:	2b08      	cmp	r3, #8
 800304e:	d11f      	bne.n	8003090 <HAL_RCC_OscConfig+0x1a0>
 8003050:	4b75      	ldr	r3, [pc, #468]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	23c0      	movs	r3, #192	; 0xc0
 8003056:	025b      	lsls	r3, r3, #9
 8003058:	401a      	ands	r2, r3
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	021b      	lsls	r3, r3, #8
 800305e:	429a      	cmp	r2, r3
 8003060:	d116      	bne.n	8003090 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003062:	4b71      	ldr	r3, [pc, #452]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2202      	movs	r2, #2
 8003068:	4013      	ands	r3, r2
 800306a:	d005      	beq.n	8003078 <HAL_RCC_OscConfig+0x188>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d001      	beq.n	8003078 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e2bb      	b.n	80035f0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003078:	4b6b      	ldr	r3, [pc, #428]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	22f8      	movs	r2, #248	; 0xf8
 800307e:	4393      	bics	r3, r2
 8003080:	0019      	movs	r1, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	00da      	lsls	r2, r3, #3
 8003088:	4b67      	ldr	r3, [pc, #412]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 800308a:	430a      	orrs	r2, r1
 800308c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308e:	e041      	b.n	8003114 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d024      	beq.n	80030e2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003098:	4b63      	ldr	r3, [pc, #396]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4b62      	ldr	r3, [pc, #392]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 800309e:	2101      	movs	r1, #1
 80030a0:	430a      	orrs	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a4:	f7ff fa54 	bl	8002550 <HAL_GetTick>
 80030a8:	0003      	movs	r3, r0
 80030aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ae:	f7ff fa4f 	bl	8002550 <HAL_GetTick>
 80030b2:	0002      	movs	r2, r0
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e297      	b.n	80035f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c0:	4b59      	ldr	r3, [pc, #356]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2202      	movs	r2, #2
 80030c6:	4013      	ands	r3, r2
 80030c8:	d0f1      	beq.n	80030ae <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ca:	4b57      	ldr	r3, [pc, #348]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	22f8      	movs	r2, #248	; 0xf8
 80030d0:	4393      	bics	r3, r2
 80030d2:	0019      	movs	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	00da      	lsls	r2, r3, #3
 80030da:	4b53      	ldr	r3, [pc, #332]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 80030dc:	430a      	orrs	r2, r1
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	e018      	b.n	8003114 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030e2:	4b51      	ldr	r3, [pc, #324]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	4b50      	ldr	r3, [pc, #320]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 80030e8:	2101      	movs	r1, #1
 80030ea:	438a      	bics	r2, r1
 80030ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ee:	f7ff fa2f 	bl	8002550 <HAL_GetTick>
 80030f2:	0003      	movs	r3, r0
 80030f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030f8:	f7ff fa2a 	bl	8002550 <HAL_GetTick>
 80030fc:	0002      	movs	r2, r0
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e272      	b.n	80035f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310a:	4b47      	ldr	r3, [pc, #284]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2202      	movs	r2, #2
 8003110:	4013      	ands	r3, r2
 8003112:	d1f1      	bne.n	80030f8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2208      	movs	r2, #8
 800311a:	4013      	ands	r3, r2
 800311c:	d036      	beq.n	800318c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d019      	beq.n	800315a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003126:	4b40      	ldr	r3, [pc, #256]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8003128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800312a:	4b3f      	ldr	r3, [pc, #252]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 800312c:	2101      	movs	r1, #1
 800312e:	430a      	orrs	r2, r1
 8003130:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003132:	f7ff fa0d 	bl	8002550 <HAL_GetTick>
 8003136:	0003      	movs	r3, r0
 8003138:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800313c:	f7ff fa08 	bl	8002550 <HAL_GetTick>
 8003140:	0002      	movs	r2, r0
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e250      	b.n	80035f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314e:	4b36      	ldr	r3, [pc, #216]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	2202      	movs	r2, #2
 8003154:	4013      	ands	r3, r2
 8003156:	d0f1      	beq.n	800313c <HAL_RCC_OscConfig+0x24c>
 8003158:	e018      	b.n	800318c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800315a:	4b33      	ldr	r3, [pc, #204]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 800315c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800315e:	4b32      	ldr	r3, [pc, #200]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8003160:	2101      	movs	r1, #1
 8003162:	438a      	bics	r2, r1
 8003164:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003166:	f7ff f9f3 	bl	8002550 <HAL_GetTick>
 800316a:	0003      	movs	r3, r0
 800316c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003170:	f7ff f9ee 	bl	8002550 <HAL_GetTick>
 8003174:	0002      	movs	r2, r0
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e236      	b.n	80035f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003182:	4b29      	ldr	r3, [pc, #164]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	2202      	movs	r2, #2
 8003188:	4013      	ands	r3, r2
 800318a:	d1f1      	bne.n	8003170 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2204      	movs	r2, #4
 8003192:	4013      	ands	r3, r2
 8003194:	d100      	bne.n	8003198 <HAL_RCC_OscConfig+0x2a8>
 8003196:	e0b5      	b.n	8003304 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003198:	201f      	movs	r0, #31
 800319a:	183b      	adds	r3, r7, r0
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a0:	4b21      	ldr	r3, [pc, #132]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 80031a2:	69da      	ldr	r2, [r3, #28]
 80031a4:	2380      	movs	r3, #128	; 0x80
 80031a6:	055b      	lsls	r3, r3, #21
 80031a8:	4013      	ands	r3, r2
 80031aa:	d110      	bne.n	80031ce <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ac:	4b1e      	ldr	r3, [pc, #120]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 80031b2:	2180      	movs	r1, #128	; 0x80
 80031b4:	0549      	lsls	r1, r1, #21
 80031b6:	430a      	orrs	r2, r1
 80031b8:	61da      	str	r2, [r3, #28]
 80031ba:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 80031bc:	69da      	ldr	r2, [r3, #28]
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	055b      	lsls	r3, r3, #21
 80031c2:	4013      	ands	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80031c8:	183b      	adds	r3, r7, r0
 80031ca:	2201      	movs	r2, #1
 80031cc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ce:	4b19      	ldr	r3, [pc, #100]	; (8003234 <HAL_RCC_OscConfig+0x344>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4013      	ands	r3, r2
 80031d8:	d11a      	bne.n	8003210 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031da:	4b16      	ldr	r3, [pc, #88]	; (8003234 <HAL_RCC_OscConfig+0x344>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	4b15      	ldr	r3, [pc, #84]	; (8003234 <HAL_RCC_OscConfig+0x344>)
 80031e0:	2180      	movs	r1, #128	; 0x80
 80031e2:	0049      	lsls	r1, r1, #1
 80031e4:	430a      	orrs	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e8:	f7ff f9b2 	bl	8002550 <HAL_GetTick>
 80031ec:	0003      	movs	r3, r0
 80031ee:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f2:	f7ff f9ad 	bl	8002550 <HAL_GetTick>
 80031f6:	0002      	movs	r2, r0
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b64      	cmp	r3, #100	; 0x64
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e1f5      	b.n	80035f0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCC_OscConfig+0x344>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	2380      	movs	r3, #128	; 0x80
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	4013      	ands	r3, r2
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d10f      	bne.n	8003238 <HAL_RCC_OscConfig+0x348>
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 800321a:	6a1a      	ldr	r2, [r3, #32]
 800321c:	4b02      	ldr	r3, [pc, #8]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 800321e:	2101      	movs	r1, #1
 8003220:	430a      	orrs	r2, r1
 8003222:	621a      	str	r2, [r3, #32]
 8003224:	e036      	b.n	8003294 <HAL_RCC_OscConfig+0x3a4>
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	40021000 	.word	0x40021000
 800322c:	fffeffff 	.word	0xfffeffff
 8003230:	fffbffff 	.word	0xfffbffff
 8003234:	40007000 	.word	0x40007000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10c      	bne.n	800325a <HAL_RCC_OscConfig+0x36a>
 8003240:	4bca      	ldr	r3, [pc, #808]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003242:	6a1a      	ldr	r2, [r3, #32]
 8003244:	4bc9      	ldr	r3, [pc, #804]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003246:	2101      	movs	r1, #1
 8003248:	438a      	bics	r2, r1
 800324a:	621a      	str	r2, [r3, #32]
 800324c:	4bc7      	ldr	r3, [pc, #796]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 800324e:	6a1a      	ldr	r2, [r3, #32]
 8003250:	4bc6      	ldr	r3, [pc, #792]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003252:	2104      	movs	r1, #4
 8003254:	438a      	bics	r2, r1
 8003256:	621a      	str	r2, [r3, #32]
 8003258:	e01c      	b.n	8003294 <HAL_RCC_OscConfig+0x3a4>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b05      	cmp	r3, #5
 8003260:	d10c      	bne.n	800327c <HAL_RCC_OscConfig+0x38c>
 8003262:	4bc2      	ldr	r3, [pc, #776]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003264:	6a1a      	ldr	r2, [r3, #32]
 8003266:	4bc1      	ldr	r3, [pc, #772]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003268:	2104      	movs	r1, #4
 800326a:	430a      	orrs	r2, r1
 800326c:	621a      	str	r2, [r3, #32]
 800326e:	4bbf      	ldr	r3, [pc, #764]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003270:	6a1a      	ldr	r2, [r3, #32]
 8003272:	4bbe      	ldr	r3, [pc, #760]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003274:	2101      	movs	r1, #1
 8003276:	430a      	orrs	r2, r1
 8003278:	621a      	str	r2, [r3, #32]
 800327a:	e00b      	b.n	8003294 <HAL_RCC_OscConfig+0x3a4>
 800327c:	4bbb      	ldr	r3, [pc, #748]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 800327e:	6a1a      	ldr	r2, [r3, #32]
 8003280:	4bba      	ldr	r3, [pc, #744]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003282:	2101      	movs	r1, #1
 8003284:	438a      	bics	r2, r1
 8003286:	621a      	str	r2, [r3, #32]
 8003288:	4bb8      	ldr	r3, [pc, #736]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 800328a:	6a1a      	ldr	r2, [r3, #32]
 800328c:	4bb7      	ldr	r3, [pc, #732]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 800328e:	2104      	movs	r1, #4
 8003290:	438a      	bics	r2, r1
 8003292:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d014      	beq.n	80032c6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329c:	f7ff f958 	bl	8002550 <HAL_GetTick>
 80032a0:	0003      	movs	r3, r0
 80032a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a4:	e009      	b.n	80032ba <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a6:	f7ff f953 	bl	8002550 <HAL_GetTick>
 80032aa:	0002      	movs	r2, r0
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	4aaf      	ldr	r2, [pc, #700]	; (8003570 <HAL_RCC_OscConfig+0x680>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e19a      	b.n	80035f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ba:	4bac      	ldr	r3, [pc, #688]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	2202      	movs	r2, #2
 80032c0:	4013      	ands	r3, r2
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCC_OscConfig+0x3b6>
 80032c4:	e013      	b.n	80032ee <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c6:	f7ff f943 	bl	8002550 <HAL_GetTick>
 80032ca:	0003      	movs	r3, r0
 80032cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ce:	e009      	b.n	80032e4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d0:	f7ff f93e 	bl	8002550 <HAL_GetTick>
 80032d4:	0002      	movs	r2, r0
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	4aa5      	ldr	r2, [pc, #660]	; (8003570 <HAL_RCC_OscConfig+0x680>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e185      	b.n	80035f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e4:	4ba1      	ldr	r3, [pc, #644]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	2202      	movs	r2, #2
 80032ea:	4013      	ands	r3, r2
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032ee:	231f      	movs	r3, #31
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d105      	bne.n	8003304 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f8:	4b9c      	ldr	r3, [pc, #624]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 80032fa:	69da      	ldr	r2, [r3, #28]
 80032fc:	4b9b      	ldr	r3, [pc, #620]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 80032fe:	499d      	ldr	r1, [pc, #628]	; (8003574 <HAL_RCC_OscConfig+0x684>)
 8003300:	400a      	ands	r2, r1
 8003302:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2210      	movs	r2, #16
 800330a:	4013      	ands	r3, r2
 800330c:	d063      	beq.n	80033d6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d12a      	bne.n	800336c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003316:	4b95      	ldr	r3, [pc, #596]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800331a:	4b94      	ldr	r3, [pc, #592]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 800331c:	2104      	movs	r1, #4
 800331e:	430a      	orrs	r2, r1
 8003320:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003322:	4b92      	ldr	r3, [pc, #584]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003326:	4b91      	ldr	r3, [pc, #580]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003328:	2101      	movs	r1, #1
 800332a:	430a      	orrs	r2, r1
 800332c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332e:	f7ff f90f 	bl	8002550 <HAL_GetTick>
 8003332:	0003      	movs	r3, r0
 8003334:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003338:	f7ff f90a 	bl	8002550 <HAL_GetTick>
 800333c:	0002      	movs	r2, r0
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e152      	b.n	80035f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800334a:	4b88      	ldr	r3, [pc, #544]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 800334c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334e:	2202      	movs	r2, #2
 8003350:	4013      	ands	r3, r2
 8003352:	d0f1      	beq.n	8003338 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003354:	4b85      	ldr	r3, [pc, #532]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003358:	22f8      	movs	r2, #248	; 0xf8
 800335a:	4393      	bics	r3, r2
 800335c:	0019      	movs	r1, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	00da      	lsls	r2, r3, #3
 8003364:	4b81      	ldr	r3, [pc, #516]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003366:	430a      	orrs	r2, r1
 8003368:	635a      	str	r2, [r3, #52]	; 0x34
 800336a:	e034      	b.n	80033d6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	3305      	adds	r3, #5
 8003372:	d111      	bne.n	8003398 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003374:	4b7d      	ldr	r3, [pc, #500]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003378:	4b7c      	ldr	r3, [pc, #496]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 800337a:	2104      	movs	r1, #4
 800337c:	438a      	bics	r2, r1
 800337e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003380:	4b7a      	ldr	r3, [pc, #488]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003384:	22f8      	movs	r2, #248	; 0xf8
 8003386:	4393      	bics	r3, r2
 8003388:	0019      	movs	r1, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	00da      	lsls	r2, r3, #3
 8003390:	4b76      	ldr	r3, [pc, #472]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003392:	430a      	orrs	r2, r1
 8003394:	635a      	str	r2, [r3, #52]	; 0x34
 8003396:	e01e      	b.n	80033d6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003398:	4b74      	ldr	r3, [pc, #464]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 800339a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800339c:	4b73      	ldr	r3, [pc, #460]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 800339e:	2104      	movs	r1, #4
 80033a0:	430a      	orrs	r2, r1
 80033a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80033a4:	4b71      	ldr	r3, [pc, #452]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 80033a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a8:	4b70      	ldr	r3, [pc, #448]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 80033aa:	2101      	movs	r1, #1
 80033ac:	438a      	bics	r2, r1
 80033ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b0:	f7ff f8ce 	bl	8002550 <HAL_GetTick>
 80033b4:	0003      	movs	r3, r0
 80033b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80033ba:	f7ff f8c9 	bl	8002550 <HAL_GetTick>
 80033be:	0002      	movs	r2, r0
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e111      	b.n	80035f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80033cc:	4b67      	ldr	r3, [pc, #412]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 80033ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d0:	2202      	movs	r2, #2
 80033d2:	4013      	ands	r3, r2
 80033d4:	d1f1      	bne.n	80033ba <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2220      	movs	r2, #32
 80033dc:	4013      	ands	r3, r2
 80033de:	d05c      	beq.n	800349a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80033e0:	4b62      	ldr	r3, [pc, #392]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	220c      	movs	r2, #12
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b0c      	cmp	r3, #12
 80033ea:	d00e      	beq.n	800340a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80033ec:	4b5f      	ldr	r3, [pc, #380]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	220c      	movs	r2, #12
 80033f2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d114      	bne.n	8003422 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80033f8:	4b5c      	ldr	r3, [pc, #368]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	23c0      	movs	r3, #192	; 0xc0
 80033fe:	025b      	lsls	r3, r3, #9
 8003400:	401a      	ands	r2, r3
 8003402:	23c0      	movs	r3, #192	; 0xc0
 8003404:	025b      	lsls	r3, r3, #9
 8003406:	429a      	cmp	r2, r3
 8003408:	d10b      	bne.n	8003422 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800340a:	4b58      	ldr	r3, [pc, #352]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 800340c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	029b      	lsls	r3, r3, #10
 8003412:	4013      	ands	r3, r2
 8003414:	d040      	beq.n	8003498 <HAL_RCC_OscConfig+0x5a8>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d03c      	beq.n	8003498 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e0e6      	b.n	80035f0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d01b      	beq.n	8003462 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800342a:	4b50      	ldr	r3, [pc, #320]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 800342c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800342e:	4b4f      	ldr	r3, [pc, #316]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003430:	2180      	movs	r1, #128	; 0x80
 8003432:	0249      	lsls	r1, r1, #9
 8003434:	430a      	orrs	r2, r1
 8003436:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7ff f88a 	bl	8002550 <HAL_GetTick>
 800343c:	0003      	movs	r3, r0
 800343e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003442:	f7ff f885 	bl	8002550 <HAL_GetTick>
 8003446:	0002      	movs	r2, r0
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e0cd      	b.n	80035f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003454:	4b45      	ldr	r3, [pc, #276]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003458:	2380      	movs	r3, #128	; 0x80
 800345a:	029b      	lsls	r3, r3, #10
 800345c:	4013      	ands	r3, r2
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x552>
 8003460:	e01b      	b.n	800349a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003462:	4b42      	ldr	r3, [pc, #264]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003466:	4b41      	ldr	r3, [pc, #260]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003468:	4943      	ldr	r1, [pc, #268]	; (8003578 <HAL_RCC_OscConfig+0x688>)
 800346a:	400a      	ands	r2, r1
 800346c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346e:	f7ff f86f 	bl	8002550 <HAL_GetTick>
 8003472:	0003      	movs	r3, r0
 8003474:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003478:	f7ff f86a 	bl	8002550 <HAL_GetTick>
 800347c:	0002      	movs	r2, r0
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e0b2      	b.n	80035f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800348a:	4b38      	ldr	r3, [pc, #224]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 800348c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	029b      	lsls	r3, r3, #10
 8003492:	4013      	ands	r3, r2
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x588>
 8003496:	e000      	b.n	800349a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003498:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d100      	bne.n	80034a4 <HAL_RCC_OscConfig+0x5b4>
 80034a2:	e0a4      	b.n	80035ee <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034a4:	4b31      	ldr	r3, [pc, #196]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	220c      	movs	r2, #12
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d100      	bne.n	80034b2 <HAL_RCC_OscConfig+0x5c2>
 80034b0:	e078      	b.n	80035a4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d14c      	bne.n	8003554 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ba:	4b2c      	ldr	r3, [pc, #176]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4b2b      	ldr	r3, [pc, #172]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 80034c0:	492e      	ldr	r1, [pc, #184]	; (800357c <HAL_RCC_OscConfig+0x68c>)
 80034c2:	400a      	ands	r2, r1
 80034c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c6:	f7ff f843 	bl	8002550 <HAL_GetTick>
 80034ca:	0003      	movs	r3, r0
 80034cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d0:	f7ff f83e 	bl	8002550 <HAL_GetTick>
 80034d4:	0002      	movs	r2, r0
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e086      	b.n	80035f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e2:	4b22      	ldr	r3, [pc, #136]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	2380      	movs	r3, #128	; 0x80
 80034e8:	049b      	lsls	r3, r3, #18
 80034ea:	4013      	ands	r3, r2
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ee:	4b1f      	ldr	r3, [pc, #124]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	220f      	movs	r2, #15
 80034f4:	4393      	bics	r3, r2
 80034f6:	0019      	movs	r1, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034fc:	4b1b      	ldr	r3, [pc, #108]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 80034fe:	430a      	orrs	r2, r1
 8003500:	62da      	str	r2, [r3, #44]	; 0x2c
 8003502:	4b1a      	ldr	r3, [pc, #104]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <HAL_RCC_OscConfig+0x690>)
 8003508:	4013      	ands	r3, r2
 800350a:	0019      	movs	r1, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	431a      	orrs	r2, r3
 8003516:	4b15      	ldr	r3, [pc, #84]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003518:	430a      	orrs	r2, r1
 800351a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800351c:	4b13      	ldr	r3, [pc, #76]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4b12      	ldr	r3, [pc, #72]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003522:	2180      	movs	r1, #128	; 0x80
 8003524:	0449      	lsls	r1, r1, #17
 8003526:	430a      	orrs	r2, r1
 8003528:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352a:	f7ff f811 	bl	8002550 <HAL_GetTick>
 800352e:	0003      	movs	r3, r0
 8003530:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003534:	f7ff f80c 	bl	8002550 <HAL_GetTick>
 8003538:	0002      	movs	r2, r0
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e054      	b.n	80035f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003546:	4b09      	ldr	r3, [pc, #36]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	2380      	movs	r3, #128	; 0x80
 800354c:	049b      	lsls	r3, r3, #18
 800354e:	4013      	ands	r3, r2
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0x644>
 8003552:	e04c      	b.n	80035ee <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	4b04      	ldr	r3, [pc, #16]	; (800356c <HAL_RCC_OscConfig+0x67c>)
 800355a:	4908      	ldr	r1, [pc, #32]	; (800357c <HAL_RCC_OscConfig+0x68c>)
 800355c:	400a      	ands	r2, r1
 800355e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003560:	f7fe fff6 	bl	8002550 <HAL_GetTick>
 8003564:	0003      	movs	r3, r0
 8003566:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003568:	e015      	b.n	8003596 <HAL_RCC_OscConfig+0x6a6>
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	40021000 	.word	0x40021000
 8003570:	00001388 	.word	0x00001388
 8003574:	efffffff 	.word	0xefffffff
 8003578:	fffeffff 	.word	0xfffeffff
 800357c:	feffffff 	.word	0xfeffffff
 8003580:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003584:	f7fe ffe4 	bl	8002550 <HAL_GetTick>
 8003588:	0002      	movs	r2, r0
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e02c      	b.n	80035f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003596:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <HAL_RCC_OscConfig+0x708>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	049b      	lsls	r3, r3, #18
 800359e:	4013      	ands	r3, r2
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x694>
 80035a2:	e024      	b.n	80035ee <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e01f      	b.n	80035f0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80035b0:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <HAL_RCC_OscConfig+0x708>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80035b6:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <HAL_RCC_OscConfig+0x708>)
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	23c0      	movs	r3, #192	; 0xc0
 80035c0:	025b      	lsls	r3, r3, #9
 80035c2:	401a      	ands	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d10e      	bne.n	80035ea <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	220f      	movs	r2, #15
 80035d0:	401a      	ands	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d107      	bne.n	80035ea <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	23f0      	movs	r3, #240	; 0xf0
 80035de:	039b      	lsls	r3, r3, #14
 80035e0:	401a      	ands	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d001      	beq.n	80035ee <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	0018      	movs	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b008      	add	sp, #32
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40021000 	.word	0x40021000

080035fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0bf      	b.n	8003790 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003610:	4b61      	ldr	r3, [pc, #388]	; (8003798 <HAL_RCC_ClockConfig+0x19c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2201      	movs	r2, #1
 8003616:	4013      	ands	r3, r2
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d911      	bls.n	8003642 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361e:	4b5e      	ldr	r3, [pc, #376]	; (8003798 <HAL_RCC_ClockConfig+0x19c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2201      	movs	r2, #1
 8003624:	4393      	bics	r3, r2
 8003626:	0019      	movs	r1, r3
 8003628:	4b5b      	ldr	r3, [pc, #364]	; (8003798 <HAL_RCC_ClockConfig+0x19c>)
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003630:	4b59      	ldr	r3, [pc, #356]	; (8003798 <HAL_RCC_ClockConfig+0x19c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2201      	movs	r2, #1
 8003636:	4013      	ands	r3, r2
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d001      	beq.n	8003642 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e0a6      	b.n	8003790 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2202      	movs	r2, #2
 8003648:	4013      	ands	r3, r2
 800364a:	d015      	beq.n	8003678 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2204      	movs	r2, #4
 8003652:	4013      	ands	r3, r2
 8003654:	d006      	beq.n	8003664 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003656:	4b51      	ldr	r3, [pc, #324]	; (800379c <HAL_RCC_ClockConfig+0x1a0>)
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	4b50      	ldr	r3, [pc, #320]	; (800379c <HAL_RCC_ClockConfig+0x1a0>)
 800365c:	21e0      	movs	r1, #224	; 0xe0
 800365e:	00c9      	lsls	r1, r1, #3
 8003660:	430a      	orrs	r2, r1
 8003662:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003664:	4b4d      	ldr	r3, [pc, #308]	; (800379c <HAL_RCC_ClockConfig+0x1a0>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	22f0      	movs	r2, #240	; 0xf0
 800366a:	4393      	bics	r3, r2
 800366c:	0019      	movs	r1, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	4b4a      	ldr	r3, [pc, #296]	; (800379c <HAL_RCC_ClockConfig+0x1a0>)
 8003674:	430a      	orrs	r2, r1
 8003676:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2201      	movs	r2, #1
 800367e:	4013      	ands	r3, r2
 8003680:	d04c      	beq.n	800371c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d107      	bne.n	800369a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368a:	4b44      	ldr	r3, [pc, #272]	; (800379c <HAL_RCC_ClockConfig+0x1a0>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	2380      	movs	r3, #128	; 0x80
 8003690:	029b      	lsls	r3, r3, #10
 8003692:	4013      	ands	r3, r2
 8003694:	d120      	bne.n	80036d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e07a      	b.n	8003790 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d107      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a2:	4b3e      	ldr	r3, [pc, #248]	; (800379c <HAL_RCC_ClockConfig+0x1a0>)
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	049b      	lsls	r3, r3, #18
 80036aa:	4013      	ands	r3, r2
 80036ac:	d114      	bne.n	80036d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e06e      	b.n	8003790 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d107      	bne.n	80036ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80036ba:	4b38      	ldr	r3, [pc, #224]	; (800379c <HAL_RCC_ClockConfig+0x1a0>)
 80036bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036be:	2380      	movs	r3, #128	; 0x80
 80036c0:	029b      	lsls	r3, r3, #10
 80036c2:	4013      	ands	r3, r2
 80036c4:	d108      	bne.n	80036d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e062      	b.n	8003790 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ca:	4b34      	ldr	r3, [pc, #208]	; (800379c <HAL_RCC_ClockConfig+0x1a0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2202      	movs	r2, #2
 80036d0:	4013      	ands	r3, r2
 80036d2:	d101      	bne.n	80036d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e05b      	b.n	8003790 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036d8:	4b30      	ldr	r3, [pc, #192]	; (800379c <HAL_RCC_ClockConfig+0x1a0>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2203      	movs	r2, #3
 80036de:	4393      	bics	r3, r2
 80036e0:	0019      	movs	r1, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	4b2d      	ldr	r3, [pc, #180]	; (800379c <HAL_RCC_ClockConfig+0x1a0>)
 80036e8:	430a      	orrs	r2, r1
 80036ea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036ec:	f7fe ff30 	bl	8002550 <HAL_GetTick>
 80036f0:	0003      	movs	r3, r0
 80036f2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f4:	e009      	b.n	800370a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f6:	f7fe ff2b 	bl	8002550 <HAL_GetTick>
 80036fa:	0002      	movs	r2, r0
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	4a27      	ldr	r2, [pc, #156]	; (80037a0 <HAL_RCC_ClockConfig+0x1a4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e042      	b.n	8003790 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370a:	4b24      	ldr	r3, [pc, #144]	; (800379c <HAL_RCC_ClockConfig+0x1a0>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	220c      	movs	r2, #12
 8003710:	401a      	ands	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	429a      	cmp	r2, r3
 800371a:	d1ec      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800371c:	4b1e      	ldr	r3, [pc, #120]	; (8003798 <HAL_RCC_ClockConfig+0x19c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2201      	movs	r2, #1
 8003722:	4013      	ands	r3, r2
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d211      	bcs.n	800374e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372a:	4b1b      	ldr	r3, [pc, #108]	; (8003798 <HAL_RCC_ClockConfig+0x19c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2201      	movs	r2, #1
 8003730:	4393      	bics	r3, r2
 8003732:	0019      	movs	r1, r3
 8003734:	4b18      	ldr	r3, [pc, #96]	; (8003798 <HAL_RCC_ClockConfig+0x19c>)
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373c:	4b16      	ldr	r3, [pc, #88]	; (8003798 <HAL_RCC_ClockConfig+0x19c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2201      	movs	r2, #1
 8003742:	4013      	ands	r3, r2
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d001      	beq.n	800374e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e020      	b.n	8003790 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2204      	movs	r2, #4
 8003754:	4013      	ands	r3, r2
 8003756:	d009      	beq.n	800376c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003758:	4b10      	ldr	r3, [pc, #64]	; (800379c <HAL_RCC_ClockConfig+0x1a0>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4a11      	ldr	r2, [pc, #68]	; (80037a4 <HAL_RCC_ClockConfig+0x1a8>)
 800375e:	4013      	ands	r3, r2
 8003760:	0019      	movs	r1, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	4b0d      	ldr	r3, [pc, #52]	; (800379c <HAL_RCC_ClockConfig+0x1a0>)
 8003768:	430a      	orrs	r2, r1
 800376a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800376c:	f000 f820 	bl	80037b0 <HAL_RCC_GetSysClockFreq>
 8003770:	0001      	movs	r1, r0
 8003772:	4b0a      	ldr	r3, [pc, #40]	; (800379c <HAL_RCC_ClockConfig+0x1a0>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	091b      	lsrs	r3, r3, #4
 8003778:	220f      	movs	r2, #15
 800377a:	4013      	ands	r3, r2
 800377c:	4a0a      	ldr	r2, [pc, #40]	; (80037a8 <HAL_RCC_ClockConfig+0x1ac>)
 800377e:	5cd3      	ldrb	r3, [r2, r3]
 8003780:	000a      	movs	r2, r1
 8003782:	40da      	lsrs	r2, r3
 8003784:	4b09      	ldr	r3, [pc, #36]	; (80037ac <HAL_RCC_ClockConfig+0x1b0>)
 8003786:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003788:	2000      	movs	r0, #0
 800378a:	f7fe fe9b 	bl	80024c4 <HAL_InitTick>
  
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	0018      	movs	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	b004      	add	sp, #16
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40022000 	.word	0x40022000
 800379c:	40021000 	.word	0x40021000
 80037a0:	00001388 	.word	0x00001388
 80037a4:	fffff8ff 	.word	0xfffff8ff
 80037a8:	08005e14 	.word	0x08005e14
 80037ac:	20000000 	.word	0x20000000

080037b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	2300      	movs	r3, #0
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	2300      	movs	r3, #0
 80037c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80037ca:	4b2d      	ldr	r3, [pc, #180]	; (8003880 <HAL_RCC_GetSysClockFreq+0xd0>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	220c      	movs	r2, #12
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b0c      	cmp	r3, #12
 80037d8:	d046      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0xb8>
 80037da:	d848      	bhi.n	800386e <HAL_RCC_GetSysClockFreq+0xbe>
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d002      	beq.n	80037e6 <HAL_RCC_GetSysClockFreq+0x36>
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d003      	beq.n	80037ec <HAL_RCC_GetSysClockFreq+0x3c>
 80037e4:	e043      	b.n	800386e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037e6:	4b27      	ldr	r3, [pc, #156]	; (8003884 <HAL_RCC_GetSysClockFreq+0xd4>)
 80037e8:	613b      	str	r3, [r7, #16]
      break;
 80037ea:	e043      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	0c9b      	lsrs	r3, r3, #18
 80037f0:	220f      	movs	r2, #15
 80037f2:	4013      	ands	r3, r2
 80037f4:	4a24      	ldr	r2, [pc, #144]	; (8003888 <HAL_RCC_GetSysClockFreq+0xd8>)
 80037f6:	5cd3      	ldrb	r3, [r2, r3]
 80037f8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80037fa:	4b21      	ldr	r3, [pc, #132]	; (8003880 <HAL_RCC_GetSysClockFreq+0xd0>)
 80037fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fe:	220f      	movs	r2, #15
 8003800:	4013      	ands	r3, r2
 8003802:	4a22      	ldr	r2, [pc, #136]	; (800388c <HAL_RCC_GetSysClockFreq+0xdc>)
 8003804:	5cd3      	ldrb	r3, [r2, r3]
 8003806:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	23c0      	movs	r3, #192	; 0xc0
 800380c:	025b      	lsls	r3, r3, #9
 800380e:	401a      	ands	r2, r3
 8003810:	2380      	movs	r3, #128	; 0x80
 8003812:	025b      	lsls	r3, r3, #9
 8003814:	429a      	cmp	r2, r3
 8003816:	d109      	bne.n	800382c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	481a      	ldr	r0, [pc, #104]	; (8003884 <HAL_RCC_GetSysClockFreq+0xd4>)
 800381c:	f7fc fc86 	bl	800012c <__udivsi3>
 8003820:	0003      	movs	r3, r0
 8003822:	001a      	movs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4353      	muls	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	e01a      	b.n	8003862 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	23c0      	movs	r3, #192	; 0xc0
 8003830:	025b      	lsls	r3, r3, #9
 8003832:	401a      	ands	r2, r3
 8003834:	23c0      	movs	r3, #192	; 0xc0
 8003836:	025b      	lsls	r3, r3, #9
 8003838:	429a      	cmp	r2, r3
 800383a:	d109      	bne.n	8003850 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	4814      	ldr	r0, [pc, #80]	; (8003890 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003840:	f7fc fc74 	bl	800012c <__udivsi3>
 8003844:	0003      	movs	r3, r0
 8003846:	001a      	movs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4353      	muls	r3, r2
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	e008      	b.n	8003862 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003850:	68b9      	ldr	r1, [r7, #8]
 8003852:	480c      	ldr	r0, [pc, #48]	; (8003884 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003854:	f7fc fc6a 	bl	800012c <__udivsi3>
 8003858:	0003      	movs	r3, r0
 800385a:	001a      	movs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4353      	muls	r3, r2
 8003860:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	613b      	str	r3, [r7, #16]
      break;
 8003866:	e005      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003868:	4b09      	ldr	r3, [pc, #36]	; (8003890 <HAL_RCC_GetSysClockFreq+0xe0>)
 800386a:	613b      	str	r3, [r7, #16]
      break;
 800386c:	e002      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800386e:	4b05      	ldr	r3, [pc, #20]	; (8003884 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003870:	613b      	str	r3, [r7, #16]
      break;
 8003872:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003874:	693b      	ldr	r3, [r7, #16]
}
 8003876:	0018      	movs	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	b006      	add	sp, #24
 800387c:	bd80      	pop	{r7, pc}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	40021000 	.word	0x40021000
 8003884:	007a1200 	.word	0x007a1200
 8003888:	08005e2c 	.word	0x08005e2c
 800388c:	08005e3c 	.word	0x08005e3c
 8003890:	02dc6c00 	.word	0x02dc6c00

08003894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003898:	4b02      	ldr	r3, [pc, #8]	; (80038a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800389a:	681b      	ldr	r3, [r3, #0]
}
 800389c:	0018      	movs	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	20000000 	.word	0x20000000

080038a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80038ac:	f7ff fff2 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038b0:	0001      	movs	r1, r0
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	0a1b      	lsrs	r3, r3, #8
 80038b8:	2207      	movs	r2, #7
 80038ba:	4013      	ands	r3, r2
 80038bc:	4a04      	ldr	r2, [pc, #16]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038be:	5cd3      	ldrb	r3, [r2, r3]
 80038c0:	40d9      	lsrs	r1, r3
 80038c2:	000b      	movs	r3, r1
}    
 80038c4:	0018      	movs	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	40021000 	.word	0x40021000
 80038d0:	08005e24 	.word	0x08005e24

080038d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	2380      	movs	r3, #128	; 0x80
 80038ea:	025b      	lsls	r3, r3, #9
 80038ec:	4013      	ands	r3, r2
 80038ee:	d100      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80038f0:	e08e      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80038f2:	2017      	movs	r0, #23
 80038f4:	183b      	adds	r3, r7, r0
 80038f6:	2200      	movs	r2, #0
 80038f8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038fa:	4b6e      	ldr	r3, [pc, #440]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038fc:	69da      	ldr	r2, [r3, #28]
 80038fe:	2380      	movs	r3, #128	; 0x80
 8003900:	055b      	lsls	r3, r3, #21
 8003902:	4013      	ands	r3, r2
 8003904:	d110      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003906:	4b6b      	ldr	r3, [pc, #428]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003908:	69da      	ldr	r2, [r3, #28]
 800390a:	4b6a      	ldr	r3, [pc, #424]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800390c:	2180      	movs	r1, #128	; 0x80
 800390e:	0549      	lsls	r1, r1, #21
 8003910:	430a      	orrs	r2, r1
 8003912:	61da      	str	r2, [r3, #28]
 8003914:	4b67      	ldr	r3, [pc, #412]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003916:	69da      	ldr	r2, [r3, #28]
 8003918:	2380      	movs	r3, #128	; 0x80
 800391a:	055b      	lsls	r3, r3, #21
 800391c:	4013      	ands	r3, r2
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003922:	183b      	adds	r3, r7, r0
 8003924:	2201      	movs	r2, #1
 8003926:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003928:	4b63      	ldr	r3, [pc, #396]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	2380      	movs	r3, #128	; 0x80
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	4013      	ands	r3, r2
 8003932:	d11a      	bne.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003934:	4b60      	ldr	r3, [pc, #384]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	4b5f      	ldr	r3, [pc, #380]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800393a:	2180      	movs	r1, #128	; 0x80
 800393c:	0049      	lsls	r1, r1, #1
 800393e:	430a      	orrs	r2, r1
 8003940:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003942:	f7fe fe05 	bl	8002550 <HAL_GetTick>
 8003946:	0003      	movs	r3, r0
 8003948:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394a:	e008      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394c:	f7fe fe00 	bl	8002550 <HAL_GetTick>
 8003950:	0002      	movs	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	; 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e0a6      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395e:	4b56      	ldr	r3, [pc, #344]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	2380      	movs	r3, #128	; 0x80
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	4013      	ands	r3, r2
 8003968:	d0f0      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800396a:	4b52      	ldr	r3, [pc, #328]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800396c:	6a1a      	ldr	r2, [r3, #32]
 800396e:	23c0      	movs	r3, #192	; 0xc0
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4013      	ands	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d034      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	23c0      	movs	r3, #192	; 0xc0
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4013      	ands	r3, r2
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	429a      	cmp	r2, r3
 800398a:	d02c      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800398c:	4b49      	ldr	r3, [pc, #292]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	4a4a      	ldr	r2, [pc, #296]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003992:	4013      	ands	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003996:	4b47      	ldr	r3, [pc, #284]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003998:	6a1a      	ldr	r2, [r3, #32]
 800399a:	4b46      	ldr	r3, [pc, #280]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800399c:	2180      	movs	r1, #128	; 0x80
 800399e:	0249      	lsls	r1, r1, #9
 80039a0:	430a      	orrs	r2, r1
 80039a2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039a4:	4b43      	ldr	r3, [pc, #268]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039a6:	6a1a      	ldr	r2, [r3, #32]
 80039a8:	4b42      	ldr	r3, [pc, #264]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039aa:	4945      	ldr	r1, [pc, #276]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80039ac:	400a      	ands	r2, r1
 80039ae:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039b0:	4b40      	ldr	r3, [pc, #256]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2201      	movs	r2, #1
 80039ba:	4013      	ands	r3, r2
 80039bc:	d013      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039be:	f7fe fdc7 	bl	8002550 <HAL_GetTick>
 80039c2:	0003      	movs	r3, r0
 80039c4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c6:	e009      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c8:	f7fe fdc2 	bl	8002550 <HAL_GetTick>
 80039cc:	0002      	movs	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	4a3c      	ldr	r2, [pc, #240]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d901      	bls.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e067      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039dc:	4b35      	ldr	r3, [pc, #212]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	2202      	movs	r2, #2
 80039e2:	4013      	ands	r3, r2
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039e6:	4b33      	ldr	r3, [pc, #204]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	4a34      	ldr	r2, [pc, #208]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80039ec:	4013      	ands	r3, r2
 80039ee:	0019      	movs	r1, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	4b2f      	ldr	r3, [pc, #188]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039f6:	430a      	orrs	r2, r1
 80039f8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039fa:	2317      	movs	r3, #23
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d105      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a04:	4b2b      	ldr	r3, [pc, #172]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a06:	69da      	ldr	r2, [r3, #28]
 8003a08:	4b2a      	ldr	r3, [pc, #168]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a0a:	492f      	ldr	r1, [pc, #188]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003a0c:	400a      	ands	r2, r1
 8003a0e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2201      	movs	r2, #1
 8003a16:	4013      	ands	r3, r2
 8003a18:	d009      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a1a:	4b26      	ldr	r3, [pc, #152]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	2203      	movs	r2, #3
 8003a20:	4393      	bics	r3, r2
 8003a22:	0019      	movs	r1, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	4b22      	ldr	r3, [pc, #136]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2202      	movs	r2, #2
 8003a34:	4013      	ands	r3, r2
 8003a36:	d009      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a38:	4b1e      	ldr	r3, [pc, #120]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	4a23      	ldr	r2, [pc, #140]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	0019      	movs	r1, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	4b1b      	ldr	r3, [pc, #108]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2220      	movs	r2, #32
 8003a52:	4013      	ands	r3, r2
 8003a54:	d009      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a56:	4b17      	ldr	r3, [pc, #92]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	2210      	movs	r2, #16
 8003a5c:	4393      	bics	r3, r2
 8003a5e:	0019      	movs	r1, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	4b13      	ldr	r3, [pc, #76]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a66:	430a      	orrs	r2, r1
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	2380      	movs	r3, #128	; 0x80
 8003a70:	029b      	lsls	r3, r3, #10
 8003a72:	4013      	ands	r3, r2
 8003a74:	d009      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a76:	4b0f      	ldr	r3, [pc, #60]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	2280      	movs	r2, #128	; 0x80
 8003a7c:	4393      	bics	r3, r2
 8003a7e:	0019      	movs	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699a      	ldr	r2, [r3, #24]
 8003a84:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a86:	430a      	orrs	r2, r1
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	2380      	movs	r3, #128	; 0x80
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4013      	ands	r3, r2
 8003a94:	d009      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a96:	4b07      	ldr	r3, [pc, #28]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	2240      	movs	r2, #64	; 0x40
 8003a9c:	4393      	bics	r3, r2
 8003a9e:	0019      	movs	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	0018      	movs	r0, r3
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	b006      	add	sp, #24
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40007000 	.word	0x40007000
 8003abc:	fffffcff 	.word	0xfffffcff
 8003ac0:	fffeffff 	.word	0xfffeffff
 8003ac4:	00001388 	.word	0x00001388
 8003ac8:	efffffff 	.word	0xefffffff
 8003acc:	fffcffff 	.word	0xfffcffff

08003ad0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e0a8      	b.n	8003c34 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d109      	bne.n	8003afe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	2382      	movs	r3, #130	; 0x82
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d009      	beq.n	8003b0a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	61da      	str	r2, [r3, #28]
 8003afc:	e005      	b.n	8003b0a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	225d      	movs	r2, #93	; 0x5d
 8003b14:	5c9b      	ldrb	r3, [r3, r2]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d107      	bne.n	8003b2c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	225c      	movs	r2, #92	; 0x5c
 8003b20:	2100      	movs	r1, #0
 8003b22:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	0018      	movs	r0, r3
 8003b28:	f7fe fabc 	bl	80020a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	225d      	movs	r2, #93	; 0x5d
 8003b30:	2102      	movs	r1, #2
 8003b32:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2140      	movs	r1, #64	; 0x40
 8003b40:	438a      	bics	r2, r1
 8003b42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	23e0      	movs	r3, #224	; 0xe0
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d902      	bls.n	8003b56 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	e002      	b.n	8003b5c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b56:	2380      	movs	r3, #128	; 0x80
 8003b58:	015b      	lsls	r3, r3, #5
 8003b5a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	23f0      	movs	r3, #240	; 0xf0
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d008      	beq.n	8003b7a <HAL_SPI_Init+0xaa>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	23e0      	movs	r3, #224	; 0xe0
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d002      	beq.n	8003b7a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	2382      	movs	r3, #130	; 0x82
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	401a      	ands	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6899      	ldr	r1, [r3, #8]
 8003b88:	2384      	movs	r3, #132	; 0x84
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	400b      	ands	r3, r1
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	2102      	movs	r1, #2
 8003b96:	400b      	ands	r3, r1
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	400b      	ands	r3, r1
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6999      	ldr	r1, [r3, #24]
 8003ba8:	2380      	movs	r3, #128	; 0x80
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	400b      	ands	r3, r1
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	2138      	movs	r1, #56	; 0x38
 8003bb6:	400b      	ands	r3, r1
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	2180      	movs	r1, #128	; 0x80
 8003bc0:	400b      	ands	r3, r1
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	0011      	movs	r1, r2
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	019b      	lsls	r3, r3, #6
 8003bce:	401a      	ands	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	0c1b      	lsrs	r3, r3, #16
 8003bde:	2204      	movs	r2, #4
 8003be0:	401a      	ands	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	2110      	movs	r1, #16
 8003be8:	400b      	ands	r3, r1
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf0:	2108      	movs	r1, #8
 8003bf2:	400b      	ands	r3, r1
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68d9      	ldr	r1, [r3, #12]
 8003bfa:	23f0      	movs	r3, #240	; 0xf0
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	400b      	ands	r3, r1
 8003c00:	431a      	orrs	r2, r3
 8003c02:	0011      	movs	r1, r2
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	2380      	movs	r3, #128	; 0x80
 8003c08:	015b      	lsls	r3, r3, #5
 8003c0a:	401a      	ands	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	69da      	ldr	r2, [r3, #28]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4907      	ldr	r1, [pc, #28]	; (8003c3c <HAL_SPI_Init+0x16c>)
 8003c20:	400a      	ands	r2, r1
 8003c22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	225d      	movs	r2, #93	; 0x5d
 8003c2e:	2101      	movs	r1, #1
 8003c30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	0018      	movs	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b004      	add	sp, #16
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	fffff7ff 	.word	0xfffff7ff

08003c40 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	603b      	str	r3, [r7, #0]
 8003c4c:	1dbb      	adds	r3, r7, #6
 8003c4e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c50:	231f      	movs	r3, #31
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	2200      	movs	r2, #0
 8003c56:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	225c      	movs	r2, #92	; 0x5c
 8003c5c:	5c9b      	ldrb	r3, [r3, r2]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <HAL_SPI_Transmit+0x26>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e147      	b.n	8003ef6 <HAL_SPI_Transmit+0x2b6>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	225c      	movs	r2, #92	; 0x5c
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c6e:	f7fe fc6f 	bl	8002550 <HAL_GetTick>
 8003c72:	0003      	movs	r3, r0
 8003c74:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003c76:	2316      	movs	r3, #22
 8003c78:	18fb      	adds	r3, r7, r3
 8003c7a:	1dba      	adds	r2, r7, #6
 8003c7c:	8812      	ldrh	r2, [r2, #0]
 8003c7e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	225d      	movs	r2, #93	; 0x5d
 8003c84:	5c9b      	ldrb	r3, [r3, r2]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d004      	beq.n	8003c96 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003c8c:	231f      	movs	r3, #31
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	2202      	movs	r2, #2
 8003c92:	701a      	strb	r2, [r3, #0]
    goto error;
 8003c94:	e128      	b.n	8003ee8 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_SPI_Transmit+0x64>
 8003c9c:	1dbb      	adds	r3, r7, #6
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d104      	bne.n	8003cae <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003ca4:	231f      	movs	r3, #31
 8003ca6:	18fb      	adds	r3, r7, r3
 8003ca8:	2201      	movs	r2, #1
 8003caa:	701a      	strb	r2, [r3, #0]
    goto error;
 8003cac:	e11c      	b.n	8003ee8 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	225d      	movs	r2, #93	; 0x5d
 8003cb2:	2103      	movs	r1, #3
 8003cb4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1dba      	adds	r2, r7, #6
 8003cc6:	8812      	ldrh	r2, [r2, #0]
 8003cc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1dba      	adds	r2, r7, #6
 8003cce:	8812      	ldrh	r2, [r2, #0]
 8003cd0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2244      	movs	r2, #68	; 0x44
 8003cdc:	2100      	movs	r1, #0
 8003cde:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2246      	movs	r2, #70	; 0x46
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	2380      	movs	r3, #128	; 0x80
 8003cfa:	021b      	lsls	r3, r3, #8
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d110      	bne.n	8003d22 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2140      	movs	r1, #64	; 0x40
 8003d0c:	438a      	bics	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2180      	movs	r1, #128	; 0x80
 8003d1c:	01c9      	lsls	r1, r1, #7
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2240      	movs	r2, #64	; 0x40
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	2b40      	cmp	r3, #64	; 0x40
 8003d2e:	d007      	beq.n	8003d40 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2140      	movs	r1, #64	; 0x40
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	23e0      	movs	r3, #224	; 0xe0
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d952      	bls.n	8003df2 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d004      	beq.n	8003d5e <HAL_SPI_Transmit+0x11e>
 8003d54:	2316      	movs	r3, #22
 8003d56:	18fb      	adds	r3, r7, r3
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d143      	bne.n	8003de6 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d62:	881a      	ldrh	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6e:	1c9a      	adds	r2, r3, #2
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d82:	e030      	b.n	8003de6 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d112      	bne.n	8003db8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	881a      	ldrh	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	1c9a      	adds	r2, r3, #2
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003db6:	e016      	b.n	8003de6 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003db8:	f7fe fbca 	bl	8002550 <HAL_GetTick>
 8003dbc:	0002      	movs	r2, r0
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d802      	bhi.n	8003dce <HAL_SPI_Transmit+0x18e>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	d102      	bne.n	8003dd4 <HAL_SPI_Transmit+0x194>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d108      	bne.n	8003de6 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003dd4:	231f      	movs	r3, #31
 8003dd6:	18fb      	adds	r3, r7, r3
 8003dd8:	2203      	movs	r2, #3
 8003dda:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	225d      	movs	r2, #93	; 0x5d
 8003de0:	2101      	movs	r1, #1
 8003de2:	5499      	strb	r1, [r3, r2]
          goto error;
 8003de4:	e080      	b.n	8003ee8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1c9      	bne.n	8003d84 <HAL_SPI_Transmit+0x144>
 8003df0:	e053      	b.n	8003e9a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d004      	beq.n	8003e04 <HAL_SPI_Transmit+0x1c4>
 8003dfa:	2316      	movs	r3, #22
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d145      	bne.n	8003e90 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	330c      	adds	r3, #12
 8003e0e:	7812      	ldrb	r2, [r2, #0]
 8003e10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003e2a:	e031      	b.n	8003e90 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2202      	movs	r2, #2
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d113      	bne.n	8003e62 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	330c      	adds	r3, #12
 8003e44:	7812      	ldrb	r2, [r2, #0]
 8003e46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e60:	e016      	b.n	8003e90 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e62:	f7fe fb75 	bl	8002550 <HAL_GetTick>
 8003e66:	0002      	movs	r2, r0
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d802      	bhi.n	8003e78 <HAL_SPI_Transmit+0x238>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	3301      	adds	r3, #1
 8003e76:	d102      	bne.n	8003e7e <HAL_SPI_Transmit+0x23e>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d108      	bne.n	8003e90 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8003e7e:	231f      	movs	r3, #31
 8003e80:	18fb      	adds	r3, r7, r3
 8003e82:	2203      	movs	r2, #3
 8003e84:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	225d      	movs	r2, #93	; 0x5d
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	5499      	strb	r1, [r3, r2]
          goto error;
 8003e8e:	e02b      	b.n	8003ee8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1c8      	bne.n	8003e2c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	6839      	ldr	r1, [r7, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f000 fcef 	bl	8004884 <SPI_EndRxTxTransaction>
 8003ea6:	1e03      	subs	r3, r0, #0
 8003ea8:	d002      	beq.n	8003eb0 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10a      	bne.n	8003ece <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003eb8:	2300      	movs	r3, #0
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d004      	beq.n	8003ee0 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8003ed6:	231f      	movs	r3, #31
 8003ed8:	18fb      	adds	r3, r7, r3
 8003eda:	2201      	movs	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	e003      	b.n	8003ee8 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	225d      	movs	r2, #93	; 0x5d
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	225c      	movs	r2, #92	; 0x5c
 8003eec:	2100      	movs	r1, #0
 8003eee:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003ef0:	231f      	movs	r3, #31
 8003ef2:	18fb      	adds	r3, r7, r3
 8003ef4:	781b      	ldrb	r3, [r3, #0]
}
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b008      	add	sp, #32
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f00:	b590      	push	{r4, r7, lr}
 8003f02:	b089      	sub	sp, #36	; 0x24
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	1dbb      	adds	r3, r7, #6
 8003f0e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f10:	2117      	movs	r1, #23
 8003f12:	187b      	adds	r3, r7, r1
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	225d      	movs	r2, #93	; 0x5d
 8003f1c:	5c9b      	ldrb	r3, [r3, r2]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d003      	beq.n	8003f2c <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8003f24:	187b      	adds	r3, r7, r1
 8003f26:	2202      	movs	r2, #2
 8003f28:	701a      	strb	r2, [r3, #0]
    goto error;
 8003f2a:	e12b      	b.n	8004184 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	2382      	movs	r3, #130	; 0x82
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d113      	bne.n	8003f60 <HAL_SPI_Receive+0x60>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10f      	bne.n	8003f60 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	225d      	movs	r2, #93	; 0x5d
 8003f44:	2104      	movs	r1, #4
 8003f46:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f48:	1dbb      	adds	r3, r7, #6
 8003f4a:	881c      	ldrh	r4, [r3, #0]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	0023      	movs	r3, r4
 8003f58:	f000 f924 	bl	80041a4 <HAL_SPI_TransmitReceive>
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	e118      	b.n	8004192 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	225c      	movs	r2, #92	; 0x5c
 8003f64:	5c9b      	ldrb	r3, [r3, r2]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d101      	bne.n	8003f6e <HAL_SPI_Receive+0x6e>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e111      	b.n	8004192 <HAL_SPI_Receive+0x292>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	225c      	movs	r2, #92	; 0x5c
 8003f72:	2101      	movs	r1, #1
 8003f74:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f76:	f7fe faeb 	bl	8002550 <HAL_GetTick>
 8003f7a:	0003      	movs	r3, r0
 8003f7c:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_SPI_Receive+0x8c>
 8003f84:	1dbb      	adds	r3, r7, #6
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d104      	bne.n	8003f96 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8003f8c:	2317      	movs	r3, #23
 8003f8e:	18fb      	adds	r3, r7, r3
 8003f90:	2201      	movs	r2, #1
 8003f92:	701a      	strb	r2, [r3, #0]
    goto error;
 8003f94:	e0f6      	b.n	8004184 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	225d      	movs	r2, #93	; 0x5d
 8003f9a:	2104      	movs	r1, #4
 8003f9c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1dba      	adds	r2, r7, #6
 8003fae:	2144      	movs	r1, #68	; 0x44
 8003fb0:	8812      	ldrh	r2, [r2, #0]
 8003fb2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	1dba      	adds	r2, r7, #6
 8003fb8:	2146      	movs	r1, #70	; 0x46
 8003fba:	8812      	ldrh	r2, [r2, #0]
 8003fbc:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	23e0      	movs	r3, #224	; 0xe0
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d908      	bls.n	8003ffa <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	496a      	ldr	r1, [pc, #424]	; (800419c <HAL_SPI_Receive+0x29c>)
 8003ff4:	400a      	ands	r2, r1
 8003ff6:	605a      	str	r2, [r3, #4]
 8003ff8:	e008      	b.n	800400c <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2180      	movs	r1, #128	; 0x80
 8004006:	0149      	lsls	r1, r1, #5
 8004008:	430a      	orrs	r2, r1
 800400a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	2380      	movs	r3, #128	; 0x80
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	429a      	cmp	r2, r3
 8004016:	d10f      	bne.n	8004038 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2140      	movs	r1, #64	; 0x40
 8004024:	438a      	bics	r2, r1
 8004026:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	495b      	ldr	r1, [pc, #364]	; (80041a0 <HAL_SPI_Receive+0x2a0>)
 8004034:	400a      	ands	r2, r1
 8004036:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2240      	movs	r2, #64	; 0x40
 8004040:	4013      	ands	r3, r2
 8004042:	2b40      	cmp	r3, #64	; 0x40
 8004044:	d007      	beq.n	8004056 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2140      	movs	r1, #64	; 0x40
 8004052:	430a      	orrs	r2, r1
 8004054:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	23e0      	movs	r3, #224	; 0xe0
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	429a      	cmp	r2, r3
 8004060:	d900      	bls.n	8004064 <HAL_SPI_Receive+0x164>
 8004062:	e071      	b.n	8004148 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004064:	e035      	b.n	80040d2 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2201      	movs	r2, #1
 800406e:	4013      	ands	r3, r2
 8004070:	2b01      	cmp	r3, #1
 8004072:	d117      	bne.n	80040a4 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	330c      	adds	r3, #12
 800407a:	001a      	movs	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	7812      	ldrb	r2, [r2, #0]
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2246      	movs	r2, #70	; 0x46
 8004094:	5a9b      	ldrh	r3, [r3, r2]
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b299      	uxth	r1, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2246      	movs	r2, #70	; 0x46
 80040a0:	5299      	strh	r1, [r3, r2]
 80040a2:	e016      	b.n	80040d2 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040a4:	f7fe fa54 	bl	8002550 <HAL_GetTick>
 80040a8:	0002      	movs	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d802      	bhi.n	80040ba <HAL_SPI_Receive+0x1ba>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	3301      	adds	r3, #1
 80040b8:	d102      	bne.n	80040c0 <HAL_SPI_Receive+0x1c0>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d108      	bne.n	80040d2 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 80040c0:	2317      	movs	r3, #23
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	2203      	movs	r2, #3
 80040c6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	225d      	movs	r2, #93	; 0x5d
 80040cc:	2101      	movs	r1, #1
 80040ce:	5499      	strb	r1, [r3, r2]
          goto error;
 80040d0:	e058      	b.n	8004184 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2246      	movs	r2, #70	; 0x46
 80040d6:	5a9b      	ldrh	r3, [r3, r2]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1c3      	bne.n	8004066 <HAL_SPI_Receive+0x166>
 80040de:	e039      	b.n	8004154 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2201      	movs	r2, #1
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d115      	bne.n	800411a <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	b292      	uxth	r2, r2
 80040fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	1c9a      	adds	r2, r3, #2
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2246      	movs	r2, #70	; 0x46
 800410a:	5a9b      	ldrh	r3, [r3, r2]
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b299      	uxth	r1, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2246      	movs	r2, #70	; 0x46
 8004116:	5299      	strh	r1, [r3, r2]
 8004118:	e016      	b.n	8004148 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800411a:	f7fe fa19 	bl	8002550 <HAL_GetTick>
 800411e:	0002      	movs	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d802      	bhi.n	8004130 <HAL_SPI_Receive+0x230>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	3301      	adds	r3, #1
 800412e:	d102      	bne.n	8004136 <HAL_SPI_Receive+0x236>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d108      	bne.n	8004148 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8004136:	2317      	movs	r3, #23
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	2203      	movs	r2, #3
 800413c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	225d      	movs	r2, #93	; 0x5d
 8004142:	2101      	movs	r1, #1
 8004144:	5499      	strb	r1, [r3, r2]
          goto error;
 8004146:	e01d      	b.n	8004184 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2246      	movs	r2, #70	; 0x46
 800414c:	5a9b      	ldrh	r3, [r3, r2]
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1c5      	bne.n	80040e0 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	6839      	ldr	r1, [r7, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	0018      	movs	r0, r3
 800415c:	f000 fb34 	bl	80047c8 <SPI_EndRxTransaction>
 8004160:	1e03      	subs	r3, r0, #0
 8004162:	d002      	beq.n	800416a <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800416e:	2b00      	cmp	r3, #0
 8004170:	d004      	beq.n	800417c <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8004172:	2317      	movs	r3, #23
 8004174:	18fb      	adds	r3, r7, r3
 8004176:	2201      	movs	r2, #1
 8004178:	701a      	strb	r2, [r3, #0]
 800417a:	e003      	b.n	8004184 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	225d      	movs	r2, #93	; 0x5d
 8004180:	2101      	movs	r1, #1
 8004182:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	225c      	movs	r2, #92	; 0x5c
 8004188:	2100      	movs	r1, #0
 800418a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800418c:	2317      	movs	r3, #23
 800418e:	18fb      	adds	r3, r7, r3
 8004190:	781b      	ldrb	r3, [r3, #0]
}
 8004192:	0018      	movs	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	b007      	add	sp, #28
 8004198:	bd90      	pop	{r4, r7, pc}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	ffffefff 	.word	0xffffefff
 80041a0:	ffffbfff 	.word	0xffffbfff

080041a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08a      	sub	sp, #40	; 0x28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	001a      	movs	r2, r3
 80041b2:	1cbb      	adds	r3, r7, #2
 80041b4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041b6:	2301      	movs	r3, #1
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041ba:	2323      	movs	r3, #35	; 0x23
 80041bc:	18fb      	adds	r3, r7, r3
 80041be:	2200      	movs	r2, #0
 80041c0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	225c      	movs	r2, #92	; 0x5c
 80041c6:	5c9b      	ldrb	r3, [r3, r2]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_SPI_TransmitReceive+0x2c>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e1c4      	b.n	800455a <HAL_SPI_TransmitReceive+0x3b6>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	225c      	movs	r2, #92	; 0x5c
 80041d4:	2101      	movs	r1, #1
 80041d6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041d8:	f7fe f9ba 	bl	8002550 <HAL_GetTick>
 80041dc:	0003      	movs	r3, r0
 80041de:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041e0:	201b      	movs	r0, #27
 80041e2:	183b      	adds	r3, r7, r0
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	215d      	movs	r1, #93	; 0x5d
 80041e8:	5c52      	ldrb	r2, [r2, r1]
 80041ea:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80041f2:	2312      	movs	r3, #18
 80041f4:	18fb      	adds	r3, r7, r3
 80041f6:	1cba      	adds	r2, r7, #2
 80041f8:	8812      	ldrh	r2, [r2, #0]
 80041fa:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041fc:	183b      	adds	r3, r7, r0
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d011      	beq.n	8004228 <HAL_SPI_TransmitReceive+0x84>
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	2382      	movs	r3, #130	; 0x82
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	429a      	cmp	r2, r3
 800420c:	d107      	bne.n	800421e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d103      	bne.n	800421e <HAL_SPI_TransmitReceive+0x7a>
 8004216:	183b      	adds	r3, r7, r0
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b04      	cmp	r3, #4
 800421c:	d004      	beq.n	8004228 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800421e:	2323      	movs	r3, #35	; 0x23
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	2202      	movs	r2, #2
 8004224:	701a      	strb	r2, [r3, #0]
    goto error;
 8004226:	e191      	b.n	800454c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d006      	beq.n	800423c <HAL_SPI_TransmitReceive+0x98>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_SPI_TransmitReceive+0x98>
 8004234:	1cbb      	adds	r3, r7, #2
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d104      	bne.n	8004246 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800423c:	2323      	movs	r3, #35	; 0x23
 800423e:	18fb      	adds	r3, r7, r3
 8004240:	2201      	movs	r2, #1
 8004242:	701a      	strb	r2, [r3, #0]
    goto error;
 8004244:	e182      	b.n	800454c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	225d      	movs	r2, #93	; 0x5d
 800424a:	5c9b      	ldrb	r3, [r3, r2]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b04      	cmp	r3, #4
 8004250:	d003      	beq.n	800425a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	225d      	movs	r2, #93	; 0x5d
 8004256:	2105      	movs	r1, #5
 8004258:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1cba      	adds	r2, r7, #2
 800426a:	2146      	movs	r1, #70	; 0x46
 800426c:	8812      	ldrh	r2, [r2, #0]
 800426e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	1cba      	adds	r2, r7, #2
 8004274:	2144      	movs	r1, #68	; 0x44
 8004276:	8812      	ldrh	r2, [r2, #0]
 8004278:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	1cba      	adds	r2, r7, #2
 8004284:	8812      	ldrh	r2, [r2, #0]
 8004286:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	1cba      	adds	r2, r7, #2
 800428c:	8812      	ldrh	r2, [r2, #0]
 800428e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	23e0      	movs	r3, #224	; 0xe0
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d908      	bls.n	80042ba <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	49ac      	ldr	r1, [pc, #688]	; (8004564 <HAL_SPI_TransmitReceive+0x3c0>)
 80042b4:	400a      	ands	r2, r1
 80042b6:	605a      	str	r2, [r3, #4]
 80042b8:	e008      	b.n	80042cc <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2180      	movs	r1, #128	; 0x80
 80042c6:	0149      	lsls	r1, r1, #5
 80042c8:	430a      	orrs	r2, r1
 80042ca:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2240      	movs	r2, #64	; 0x40
 80042d4:	4013      	ands	r3, r2
 80042d6:	2b40      	cmp	r3, #64	; 0x40
 80042d8:	d007      	beq.n	80042ea <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2140      	movs	r1, #64	; 0x40
 80042e6:	430a      	orrs	r2, r1
 80042e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	23e0      	movs	r3, #224	; 0xe0
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d800      	bhi.n	80042f8 <HAL_SPI_TransmitReceive+0x154>
 80042f6:	e083      	b.n	8004400 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d005      	beq.n	800430c <HAL_SPI_TransmitReceive+0x168>
 8004300:	2312      	movs	r3, #18
 8004302:	18fb      	adds	r3, r7, r3
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d000      	beq.n	800430c <HAL_SPI_TransmitReceive+0x168>
 800430a:	e06d      	b.n	80043e8 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	881a      	ldrh	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431c:	1c9a      	adds	r2, r3, #2
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004330:	e05a      	b.n	80043e8 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2202      	movs	r2, #2
 800433a:	4013      	ands	r3, r2
 800433c:	2b02      	cmp	r3, #2
 800433e:	d11b      	bne.n	8004378 <HAL_SPI_TransmitReceive+0x1d4>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d016      	beq.n	8004378 <HAL_SPI_TransmitReceive+0x1d4>
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	2b01      	cmp	r3, #1
 800434e:	d113      	bne.n	8004378 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	881a      	ldrh	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004360:	1c9a      	adds	r2, r3, #2
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2201      	movs	r2, #1
 8004380:	4013      	ands	r3, r2
 8004382:	2b01      	cmp	r3, #1
 8004384:	d11c      	bne.n	80043c0 <HAL_SPI_TransmitReceive+0x21c>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2246      	movs	r2, #70	; 0x46
 800438a:	5a9b      	ldrh	r3, [r3, r2]
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d016      	beq.n	80043c0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	b292      	uxth	r2, r2
 800439e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a4:	1c9a      	adds	r2, r3, #2
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2246      	movs	r2, #70	; 0x46
 80043ae:	5a9b      	ldrh	r3, [r3, r2]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b299      	uxth	r1, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2246      	movs	r2, #70	; 0x46
 80043ba:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043bc:	2301      	movs	r3, #1
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043c0:	f7fe f8c6 	bl	8002550 <HAL_GetTick>
 80043c4:	0002      	movs	r2, r0
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d80b      	bhi.n	80043e8 <HAL_SPI_TransmitReceive+0x244>
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	3301      	adds	r3, #1
 80043d4:	d008      	beq.n	80043e8 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80043d6:	2323      	movs	r3, #35	; 0x23
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	2203      	movs	r2, #3
 80043dc:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	225d      	movs	r2, #93	; 0x5d
 80043e2:	2101      	movs	r1, #1
 80043e4:	5499      	strb	r1, [r3, r2]
        goto error;
 80043e6:	e0b1      	b.n	800454c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d19f      	bne.n	8004332 <HAL_SPI_TransmitReceive+0x18e>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2246      	movs	r2, #70	; 0x46
 80043f6:	5a9b      	ldrh	r3, [r3, r2]
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d199      	bne.n	8004332 <HAL_SPI_TransmitReceive+0x18e>
 80043fe:	e089      	b.n	8004514 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <HAL_SPI_TransmitReceive+0x270>
 8004408:	2312      	movs	r3, #18
 800440a:	18fb      	adds	r3, r7, r3
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d000      	beq.n	8004414 <HAL_SPI_TransmitReceive+0x270>
 8004412:	e074      	b.n	80044fe <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	330c      	adds	r3, #12
 800441e:	7812      	ldrb	r2, [r2, #0]
 8004420:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004430:	b29b      	uxth	r3, r3
 8004432:	3b01      	subs	r3, #1
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800443a:	e060      	b.n	80044fe <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2202      	movs	r2, #2
 8004444:	4013      	ands	r3, r2
 8004446:	2b02      	cmp	r3, #2
 8004448:	d11c      	bne.n	8004484 <HAL_SPI_TransmitReceive+0x2e0>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d017      	beq.n	8004484 <HAL_SPI_TransmitReceive+0x2e0>
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	2b01      	cmp	r3, #1
 8004458:	d114      	bne.n	8004484 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	330c      	adds	r3, #12
 8004464:	7812      	ldrb	r2, [r2, #0]
 8004466:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2201      	movs	r2, #1
 800448c:	4013      	ands	r3, r2
 800448e:	2b01      	cmp	r3, #1
 8004490:	d11e      	bne.n	80044d0 <HAL_SPI_TransmitReceive+0x32c>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2246      	movs	r2, #70	; 0x46
 8004496:	5a9b      	ldrh	r3, [r3, r2]
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d018      	beq.n	80044d0 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	330c      	adds	r3, #12
 80044a4:	001a      	movs	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	7812      	ldrb	r2, [r2, #0]
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2246      	movs	r2, #70	; 0x46
 80044be:	5a9b      	ldrh	r3, [r3, r2]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b299      	uxth	r1, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2246      	movs	r2, #70	; 0x46
 80044ca:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044cc:	2301      	movs	r3, #1
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044d0:	f7fe f83e 	bl	8002550 <HAL_GetTick>
 80044d4:	0002      	movs	r2, r0
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044dc:	429a      	cmp	r2, r3
 80044de:	d802      	bhi.n	80044e6 <HAL_SPI_TransmitReceive+0x342>
 80044e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e2:	3301      	adds	r3, #1
 80044e4:	d102      	bne.n	80044ec <HAL_SPI_TransmitReceive+0x348>
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d108      	bne.n	80044fe <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80044ec:	2323      	movs	r3, #35	; 0x23
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	2203      	movs	r2, #3
 80044f2:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	225d      	movs	r2, #93	; 0x5d
 80044f8:	2101      	movs	r1, #1
 80044fa:	5499      	strb	r1, [r3, r2]
        goto error;
 80044fc:	e026      	b.n	800454c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004502:	b29b      	uxth	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d199      	bne.n	800443c <HAL_SPI_TransmitReceive+0x298>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2246      	movs	r2, #70	; 0x46
 800450c:	5a9b      	ldrh	r3, [r3, r2]
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d193      	bne.n	800443c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004514:	69fa      	ldr	r2, [r7, #28]
 8004516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	0018      	movs	r0, r3
 800451c:	f000 f9b2 	bl	8004884 <SPI_EndRxTxTransaction>
 8004520:	1e03      	subs	r3, r0, #0
 8004522:	d006      	beq.n	8004532 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8004524:	2323      	movs	r3, #35	; 0x23
 8004526:	18fb      	adds	r3, r7, r3
 8004528:	2201      	movs	r2, #1
 800452a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2220      	movs	r2, #32
 8004530:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004536:	2b00      	cmp	r3, #0
 8004538:	d004      	beq.n	8004544 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800453a:	2323      	movs	r3, #35	; 0x23
 800453c:	18fb      	adds	r3, r7, r3
 800453e:	2201      	movs	r2, #1
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	e003      	b.n	800454c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	225d      	movs	r2, #93	; 0x5d
 8004548:	2101      	movs	r1, #1
 800454a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	225c      	movs	r2, #92	; 0x5c
 8004550:	2100      	movs	r1, #0
 8004552:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004554:	2323      	movs	r3, #35	; 0x23
 8004556:	18fb      	adds	r3, r7, r3
 8004558:	781b      	ldrb	r3, [r3, #0]
}
 800455a:	0018      	movs	r0, r3
 800455c:	46bd      	mov	sp, r7
 800455e:	b00a      	add	sp, #40	; 0x28
 8004560:	bd80      	pop	{r7, pc}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	ffffefff 	.word	0xffffefff

08004568 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	1dfb      	adds	r3, r7, #7
 8004576:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004578:	f7fd ffea 	bl	8002550 <HAL_GetTick>
 800457c:	0002      	movs	r2, r0
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	18d3      	adds	r3, r2, r3
 8004586:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004588:	f7fd ffe2 	bl	8002550 <HAL_GetTick>
 800458c:	0003      	movs	r3, r0
 800458e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004590:	4b3a      	ldr	r3, [pc, #232]	; (800467c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	015b      	lsls	r3, r3, #5
 8004596:	0d1b      	lsrs	r3, r3, #20
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	4353      	muls	r3, r2
 800459c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800459e:	e058      	b.n	8004652 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	3301      	adds	r3, #1
 80045a4:	d055      	beq.n	8004652 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045a6:	f7fd ffd3 	bl	8002550 <HAL_GetTick>
 80045aa:	0002      	movs	r2, r0
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	69fa      	ldr	r2, [r7, #28]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d902      	bls.n	80045bc <SPI_WaitFlagStateUntilTimeout+0x54>
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d142      	bne.n	8004642 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	21e0      	movs	r1, #224	; 0xe0
 80045c8:	438a      	bics	r2, r1
 80045ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	2382      	movs	r3, #130	; 0x82
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d113      	bne.n	8004600 <SPI_WaitFlagStateUntilTimeout+0x98>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	2380      	movs	r3, #128	; 0x80
 80045de:	021b      	lsls	r3, r3, #8
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d005      	beq.n	80045f0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	2380      	movs	r3, #128	; 0x80
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d107      	bne.n	8004600 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2140      	movs	r1, #64	; 0x40
 80045fc:	438a      	bics	r2, r1
 80045fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004604:	2380      	movs	r3, #128	; 0x80
 8004606:	019b      	lsls	r3, r3, #6
 8004608:	429a      	cmp	r2, r3
 800460a:	d110      	bne.n	800462e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	491a      	ldr	r1, [pc, #104]	; (8004680 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004618:	400a      	ands	r2, r1
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2180      	movs	r1, #128	; 0x80
 8004628:	0189      	lsls	r1, r1, #6
 800462a:	430a      	orrs	r2, r1
 800462c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	225d      	movs	r2, #93	; 0x5d
 8004632:	2101      	movs	r1, #1
 8004634:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	225c      	movs	r2, #92	; 0x5c
 800463a:	2100      	movs	r1, #0
 800463c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e017      	b.n	8004672 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	3b01      	subs	r3, #1
 8004650:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	4013      	ands	r3, r2
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	425a      	negs	r2, r3
 8004662:	4153      	adcs	r3, r2
 8004664:	b2db      	uxtb	r3, r3
 8004666:	001a      	movs	r2, r3
 8004668:	1dfb      	adds	r3, r7, #7
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d197      	bne.n	80045a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	0018      	movs	r0, r3
 8004674:	46bd      	mov	sp, r7
 8004676:	b008      	add	sp, #32
 8004678:	bd80      	pop	{r7, pc}
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	20000000 	.word	0x20000000
 8004680:	ffffdfff 	.word	0xffffdfff

08004684 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	; 0x28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004692:	2317      	movs	r3, #23
 8004694:	18fb      	adds	r3, r7, r3
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800469a:	f7fd ff59 	bl	8002550 <HAL_GetTick>
 800469e:	0002      	movs	r2, r0
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	1a9b      	subs	r3, r3, r2
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	18d3      	adds	r3, r2, r3
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80046aa:	f7fd ff51 	bl	8002550 <HAL_GetTick>
 80046ae:	0003      	movs	r3, r0
 80046b0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	330c      	adds	r3, #12
 80046b8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80046ba:	4b41      	ldr	r3, [pc, #260]	; (80047c0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	0013      	movs	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	189b      	adds	r3, r3, r2
 80046c4:	00da      	lsls	r2, r3, #3
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	0d1b      	lsrs	r3, r3, #20
 80046ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046cc:	4353      	muls	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80046d0:	e068      	b.n	80047a4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	23c0      	movs	r3, #192	; 0xc0
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	429a      	cmp	r2, r3
 80046da:	d10a      	bne.n	80046f2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d107      	bne.n	80046f2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	2117      	movs	r1, #23
 80046ea:	187b      	adds	r3, r7, r1
 80046ec:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80046ee:	187b      	adds	r3, r7, r1
 80046f0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	3301      	adds	r3, #1
 80046f6:	d055      	beq.n	80047a4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046f8:	f7fd ff2a 	bl	8002550 <HAL_GetTick>
 80046fc:	0002      	movs	r2, r0
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004704:	429a      	cmp	r2, r3
 8004706:	d902      	bls.n	800470e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	2b00      	cmp	r3, #0
 800470c:	d142      	bne.n	8004794 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	21e0      	movs	r1, #224	; 0xe0
 800471a:	438a      	bics	r2, r1
 800471c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	2382      	movs	r3, #130	; 0x82
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	429a      	cmp	r2, r3
 8004728:	d113      	bne.n	8004752 <SPI_WaitFifoStateUntilTimeout+0xce>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	2380      	movs	r3, #128	; 0x80
 8004730:	021b      	lsls	r3, r3, #8
 8004732:	429a      	cmp	r2, r3
 8004734:	d005      	beq.n	8004742 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	429a      	cmp	r2, r3
 8004740:	d107      	bne.n	8004752 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2140      	movs	r1, #64	; 0x40
 800474e:	438a      	bics	r2, r1
 8004750:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	019b      	lsls	r3, r3, #6
 800475a:	429a      	cmp	r2, r3
 800475c:	d110      	bne.n	8004780 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4916      	ldr	r1, [pc, #88]	; (80047c4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800476a:	400a      	ands	r2, r1
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2180      	movs	r1, #128	; 0x80
 800477a:	0189      	lsls	r1, r1, #6
 800477c:	430a      	orrs	r2, r1
 800477e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	225d      	movs	r2, #93	; 0x5d
 8004784:	2101      	movs	r1, #1
 8004786:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	225c      	movs	r2, #92	; 0x5c
 800478c:	2100      	movs	r1, #0
 800478e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e010      	b.n	80047b6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	3b01      	subs	r3, #1
 80047a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	4013      	ands	r3, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d18e      	bne.n	80046d2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	0018      	movs	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b00a      	add	sp, #40	; 0x28
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	20000000 	.word	0x20000000
 80047c4:	ffffdfff 	.word	0xffffdfff

080047c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af02      	add	r7, sp, #8
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	2382      	movs	r3, #130	; 0x82
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	429a      	cmp	r2, r3
 80047de:	d113      	bne.n	8004808 <SPI_EndRxTransaction+0x40>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	2380      	movs	r3, #128	; 0x80
 80047e6:	021b      	lsls	r3, r3, #8
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d005      	beq.n	80047f8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	2380      	movs	r3, #128	; 0x80
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d107      	bne.n	8004808 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2140      	movs	r1, #64	; 0x40
 8004804:	438a      	bics	r2, r1
 8004806:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	0013      	movs	r3, r2
 8004812:	2200      	movs	r2, #0
 8004814:	2180      	movs	r1, #128	; 0x80
 8004816:	f7ff fea7 	bl	8004568 <SPI_WaitFlagStateUntilTimeout>
 800481a:	1e03      	subs	r3, r0, #0
 800481c:	d007      	beq.n	800482e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004822:	2220      	movs	r2, #32
 8004824:	431a      	orrs	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e026      	b.n	800487c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	2382      	movs	r3, #130	; 0x82
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	429a      	cmp	r2, r3
 8004838:	d11f      	bne.n	800487a <SPI_EndRxTransaction+0xb2>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	689a      	ldr	r2, [r3, #8]
 800483e:	2380      	movs	r3, #128	; 0x80
 8004840:	021b      	lsls	r3, r3, #8
 8004842:	429a      	cmp	r2, r3
 8004844:	d005      	beq.n	8004852 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	2380      	movs	r3, #128	; 0x80
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	429a      	cmp	r2, r3
 8004850:	d113      	bne.n	800487a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	23c0      	movs	r3, #192	; 0xc0
 8004856:	00d9      	lsls	r1, r3, #3
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	0013      	movs	r3, r2
 8004860:	2200      	movs	r2, #0
 8004862:	f7ff ff0f 	bl	8004684 <SPI_WaitFifoStateUntilTimeout>
 8004866:	1e03      	subs	r3, r0, #0
 8004868:	d007      	beq.n	800487a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800486e:	2220      	movs	r2, #32
 8004870:	431a      	orrs	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e000      	b.n	800487c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	0018      	movs	r0, r3
 800487e:	46bd      	mov	sp, r7
 8004880:	b004      	add	sp, #16
 8004882:	bd80      	pop	{r7, pc}

08004884 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af02      	add	r7, sp, #8
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	23c0      	movs	r3, #192	; 0xc0
 8004894:	0159      	lsls	r1, r3, #5
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	0013      	movs	r3, r2
 800489e:	2200      	movs	r2, #0
 80048a0:	f7ff fef0 	bl	8004684 <SPI_WaitFifoStateUntilTimeout>
 80048a4:	1e03      	subs	r3, r0, #0
 80048a6:	d007      	beq.n	80048b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ac:	2220      	movs	r2, #32
 80048ae:	431a      	orrs	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e027      	b.n	8004908 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	0013      	movs	r3, r2
 80048c2:	2200      	movs	r2, #0
 80048c4:	2180      	movs	r1, #128	; 0x80
 80048c6:	f7ff fe4f 	bl	8004568 <SPI_WaitFlagStateUntilTimeout>
 80048ca:	1e03      	subs	r3, r0, #0
 80048cc:	d007      	beq.n	80048de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d2:	2220      	movs	r2, #32
 80048d4:	431a      	orrs	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e014      	b.n	8004908 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	23c0      	movs	r3, #192	; 0xc0
 80048e2:	00d9      	lsls	r1, r3, #3
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	0013      	movs	r3, r2
 80048ec:	2200      	movs	r2, #0
 80048ee:	f7ff fec9 	bl	8004684 <SPI_WaitFifoStateUntilTimeout>
 80048f2:	1e03      	subs	r3, r0, #0
 80048f4:	d007      	beq.n	8004906 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048fa:	2220      	movs	r2, #32
 80048fc:	431a      	orrs	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e000      	b.n	8004908 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	0018      	movs	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	b004      	add	sp, #16
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8004910:	b590      	push	{r4, r7, lr}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e074      	b.n	8004a0c <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	223c      	movs	r2, #60	; 0x3c
 8004926:	5c9b      	ldrb	r3, [r3, r2]
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d107      	bne.n	800493e <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	223d      	movs	r2, #61	; 0x3d
 8004932:	2100      	movs	r1, #0
 8004934:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	0018      	movs	r0, r3
 800493a:	f7fd fc01 	bl	8002140 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	223c      	movs	r2, #60	; 0x3c
 8004942:	2102      	movs	r1, #2
 8004944:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2201      	movs	r2, #1
 800494c:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6819      	ldr	r1, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800495c:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8004964:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800496a:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8004970:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8004976:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 800497c:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8004982:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	7b1b      	ldrb	r3, [r3, #12]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d108      	bne.n	80049a6 <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2180      	movs	r1, #128	; 0x80
 80049a0:	0249      	lsls	r1, r1, #9
 80049a2:	430a      	orrs	r2, r1
 80049a4:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	43d2      	mvns	r2, r2
 80049bc:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049d6:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681c      	ldr	r4, [r3, #0]
 80049e0:	0010      	movs	r0, r2
 80049e2:	f000 f817 	bl	8004a14 <TSC_extract_groups>
 80049e6:	0003      	movs	r3, r0
 80049e8:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2103      	movs	r1, #3
 80049f6:	438a      	bics	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2203      	movs	r2, #3
 8004a00:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	223c      	movs	r2, #60	; 0x3c
 8004a06:	2101      	movs	r1, #1
 8004a08:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	b003      	add	sp, #12
 8004a12:	bd90      	pop	{r4, r7, pc}

08004a14 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8004a20:	2300      	movs	r3, #0
 8004a22:	60bb      	str	r3, [r7, #8]
 8004a24:	e011      	b.n	8004a4a <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	220f      	movs	r2, #15
 8004a2c:	409a      	lsls	r2, r3
 8004a2e:	0013      	movs	r3, r2
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	4013      	ands	r3, r2
 8004a34:	d006      	beq.n	8004a44 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8004a36:	2201      	movs	r2, #1
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	0013      	movs	r3, r2
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	3301      	adds	r3, #1
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2b07      	cmp	r3, #7
 8004a4e:	d9ea      	bls.n	8004a26 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8004a50:	68fb      	ldr	r3, [r7, #12]
}
 8004a52:	0018      	movs	r0, r3
 8004a54:	46bd      	mov	sp, r7
 8004a56:	b004      	add	sp, #16
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e044      	b.n	8004af8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d107      	bne.n	8004a86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2278      	movs	r2, #120	; 0x78
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	0018      	movs	r0, r3
 8004a82:	f7fd fbfb 	bl	800227c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2224      	movs	r2, #36	; 0x24
 8004a8a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2101      	movs	r1, #1
 8004a98:	438a      	bics	r2, r1
 8004a9a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f000 f8d0 	bl	8004c44 <UART_SetConfig>
 8004aa4:	0003      	movs	r3, r0
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e024      	b.n	8004af8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f000 fa4b 	bl	8004f54 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	490d      	ldr	r1, [pc, #52]	; (8004b00 <HAL_UART_Init+0xa4>)
 8004aca:	400a      	ands	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	212a      	movs	r1, #42	; 0x2a
 8004ada:	438a      	bics	r2, r1
 8004adc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2101      	movs	r1, #1
 8004aea:	430a      	orrs	r2, r1
 8004aec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	0018      	movs	r0, r3
 8004af2:	f000 fae3 	bl	80050bc <UART_CheckIdleState>
 8004af6:	0003      	movs	r3, r0
}
 8004af8:	0018      	movs	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b002      	add	sp, #8
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	ffffb7ff 	.word	0xffffb7ff

08004b04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08a      	sub	sp, #40	; 0x28
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	1dbb      	adds	r3, r7, #6
 8004b12:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b18:	2b20      	cmp	r3, #32
 8004b1a:	d000      	beq.n	8004b1e <HAL_UART_Transmit+0x1a>
 8004b1c:	e08d      	b.n	8004c3a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <HAL_UART_Transmit+0x28>
 8004b24:	1dbb      	adds	r3, r7, #6
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e085      	b.n	8004c3c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	2380      	movs	r3, #128	; 0x80
 8004b36:	015b      	lsls	r3, r3, #5
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d109      	bne.n	8004b50 <HAL_UART_Transmit+0x4c>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d105      	bne.n	8004b50 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2201      	movs	r2, #1
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d001      	beq.n	8004b50 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e075      	b.n	8004c3c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2284      	movs	r2, #132	; 0x84
 8004b54:	2100      	movs	r1, #0
 8004b56:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2221      	movs	r2, #33	; 0x21
 8004b5c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b5e:	f7fd fcf7 	bl	8002550 <HAL_GetTick>
 8004b62:	0003      	movs	r3, r0
 8004b64:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	1dba      	adds	r2, r7, #6
 8004b6a:	2150      	movs	r1, #80	; 0x50
 8004b6c:	8812      	ldrh	r2, [r2, #0]
 8004b6e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	1dba      	adds	r2, r7, #6
 8004b74:	2152      	movs	r1, #82	; 0x52
 8004b76:	8812      	ldrh	r2, [r2, #0]
 8004b78:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	2380      	movs	r3, #128	; 0x80
 8004b80:	015b      	lsls	r3, r3, #5
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d108      	bne.n	8004b98 <HAL_UART_Transmit+0x94>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d104      	bne.n	8004b98 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	e003      	b.n	8004ba0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ba0:	e030      	b.n	8004c04 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	0013      	movs	r3, r2
 8004bac:	2200      	movs	r2, #0
 8004bae:	2180      	movs	r1, #128	; 0x80
 8004bb0:	f000 fb2c 	bl	800520c <UART_WaitOnFlagUntilTimeout>
 8004bb4:	1e03      	subs	r3, r0, #0
 8004bb6:	d004      	beq.n	8004bc2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e03c      	b.n	8004c3c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10b      	bne.n	8004be0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	881a      	ldrh	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	05d2      	lsls	r2, r2, #23
 8004bd2:	0dd2      	lsrs	r2, r2, #23
 8004bd4:	b292      	uxth	r2, r2
 8004bd6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	3302      	adds	r3, #2
 8004bdc:	61bb      	str	r3, [r7, #24]
 8004bde:	e008      	b.n	8004bf2 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	781a      	ldrb	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	b292      	uxth	r2, r2
 8004bea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2252      	movs	r2, #82	; 0x52
 8004bf6:	5a9b      	ldrh	r3, [r3, r2]
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b299      	uxth	r1, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2252      	movs	r2, #82	; 0x52
 8004c02:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2252      	movs	r2, #82	; 0x52
 8004c08:	5a9b      	ldrh	r3, [r3, r2]
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1c8      	bne.n	8004ba2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	0013      	movs	r3, r2
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2140      	movs	r1, #64	; 0x40
 8004c1e:	f000 faf5 	bl	800520c <UART_WaitOnFlagUntilTimeout>
 8004c22:	1e03      	subs	r3, r0, #0
 8004c24:	d004      	beq.n	8004c30 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e005      	b.n	8004c3c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2220      	movs	r2, #32
 8004c34:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	e000      	b.n	8004c3c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8004c3a:	2302      	movs	r3, #2
  }
}
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	b008      	add	sp, #32
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c4c:	231e      	movs	r3, #30
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	2200      	movs	r2, #0
 8004c52:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689a      	ldr	r2, [r3, #8]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4aaf      	ldr	r2, [pc, #700]	; (8004f30 <UART_SetConfig+0x2ec>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	0019      	movs	r1, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	4aaa      	ldr	r2, [pc, #680]	; (8004f34 <UART_SetConfig+0x2f0>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	0019      	movs	r1, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	4aa1      	ldr	r2, [pc, #644]	; (8004f38 <UART_SetConfig+0x2f4>)
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	0019      	movs	r1, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a9d      	ldr	r2, [pc, #628]	; (8004f3c <UART_SetConfig+0x2f8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d127      	bne.n	8004d1a <UART_SetConfig+0xd6>
 8004cca:	4b9d      	ldr	r3, [pc, #628]	; (8004f40 <UART_SetConfig+0x2fc>)
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cce:	2203      	movs	r2, #3
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d00d      	beq.n	8004cf2 <UART_SetConfig+0xae>
 8004cd6:	d81b      	bhi.n	8004d10 <UART_SetConfig+0xcc>
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d014      	beq.n	8004d06 <UART_SetConfig+0xc2>
 8004cdc:	d818      	bhi.n	8004d10 <UART_SetConfig+0xcc>
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <UART_SetConfig+0xa4>
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d00a      	beq.n	8004cfc <UART_SetConfig+0xb8>
 8004ce6:	e013      	b.n	8004d10 <UART_SetConfig+0xcc>
 8004ce8:	231f      	movs	r3, #31
 8004cea:	18fb      	adds	r3, r7, r3
 8004cec:	2200      	movs	r2, #0
 8004cee:	701a      	strb	r2, [r3, #0]
 8004cf0:	e065      	b.n	8004dbe <UART_SetConfig+0x17a>
 8004cf2:	231f      	movs	r3, #31
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	e060      	b.n	8004dbe <UART_SetConfig+0x17a>
 8004cfc:	231f      	movs	r3, #31
 8004cfe:	18fb      	adds	r3, r7, r3
 8004d00:	2204      	movs	r2, #4
 8004d02:	701a      	strb	r2, [r3, #0]
 8004d04:	e05b      	b.n	8004dbe <UART_SetConfig+0x17a>
 8004d06:	231f      	movs	r3, #31
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	2208      	movs	r2, #8
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	e056      	b.n	8004dbe <UART_SetConfig+0x17a>
 8004d10:	231f      	movs	r3, #31
 8004d12:	18fb      	adds	r3, r7, r3
 8004d14:	2210      	movs	r2, #16
 8004d16:	701a      	strb	r2, [r3, #0]
 8004d18:	e051      	b.n	8004dbe <UART_SetConfig+0x17a>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a89      	ldr	r2, [pc, #548]	; (8004f44 <UART_SetConfig+0x300>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d134      	bne.n	8004d8e <UART_SetConfig+0x14a>
 8004d24:	4b86      	ldr	r3, [pc, #536]	; (8004f40 <UART_SetConfig+0x2fc>)
 8004d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d28:	23c0      	movs	r3, #192	; 0xc0
 8004d2a:	029b      	lsls	r3, r3, #10
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	22c0      	movs	r2, #192	; 0xc0
 8004d30:	0292      	lsls	r2, r2, #10
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d017      	beq.n	8004d66 <UART_SetConfig+0x122>
 8004d36:	22c0      	movs	r2, #192	; 0xc0
 8004d38:	0292      	lsls	r2, r2, #10
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d822      	bhi.n	8004d84 <UART_SetConfig+0x140>
 8004d3e:	2280      	movs	r2, #128	; 0x80
 8004d40:	0292      	lsls	r2, r2, #10
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d019      	beq.n	8004d7a <UART_SetConfig+0x136>
 8004d46:	2280      	movs	r2, #128	; 0x80
 8004d48:	0292      	lsls	r2, r2, #10
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d81a      	bhi.n	8004d84 <UART_SetConfig+0x140>
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d004      	beq.n	8004d5c <UART_SetConfig+0x118>
 8004d52:	2280      	movs	r2, #128	; 0x80
 8004d54:	0252      	lsls	r2, r2, #9
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00a      	beq.n	8004d70 <UART_SetConfig+0x12c>
 8004d5a:	e013      	b.n	8004d84 <UART_SetConfig+0x140>
 8004d5c:	231f      	movs	r3, #31
 8004d5e:	18fb      	adds	r3, r7, r3
 8004d60:	2200      	movs	r2, #0
 8004d62:	701a      	strb	r2, [r3, #0]
 8004d64:	e02b      	b.n	8004dbe <UART_SetConfig+0x17a>
 8004d66:	231f      	movs	r3, #31
 8004d68:	18fb      	adds	r3, r7, r3
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	e026      	b.n	8004dbe <UART_SetConfig+0x17a>
 8004d70:	231f      	movs	r3, #31
 8004d72:	18fb      	adds	r3, r7, r3
 8004d74:	2204      	movs	r2, #4
 8004d76:	701a      	strb	r2, [r3, #0]
 8004d78:	e021      	b.n	8004dbe <UART_SetConfig+0x17a>
 8004d7a:	231f      	movs	r3, #31
 8004d7c:	18fb      	adds	r3, r7, r3
 8004d7e:	2208      	movs	r2, #8
 8004d80:	701a      	strb	r2, [r3, #0]
 8004d82:	e01c      	b.n	8004dbe <UART_SetConfig+0x17a>
 8004d84:	231f      	movs	r3, #31
 8004d86:	18fb      	adds	r3, r7, r3
 8004d88:	2210      	movs	r2, #16
 8004d8a:	701a      	strb	r2, [r3, #0]
 8004d8c:	e017      	b.n	8004dbe <UART_SetConfig+0x17a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a6d      	ldr	r2, [pc, #436]	; (8004f48 <UART_SetConfig+0x304>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d104      	bne.n	8004da2 <UART_SetConfig+0x15e>
 8004d98:	231f      	movs	r3, #31
 8004d9a:	18fb      	adds	r3, r7, r3
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	701a      	strb	r2, [r3, #0]
 8004da0:	e00d      	b.n	8004dbe <UART_SetConfig+0x17a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a69      	ldr	r2, [pc, #420]	; (8004f4c <UART_SetConfig+0x308>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d104      	bne.n	8004db6 <UART_SetConfig+0x172>
 8004dac:	231f      	movs	r3, #31
 8004dae:	18fb      	adds	r3, r7, r3
 8004db0:	2200      	movs	r2, #0
 8004db2:	701a      	strb	r2, [r3, #0]
 8004db4:	e003      	b.n	8004dbe <UART_SetConfig+0x17a>
 8004db6:	231f      	movs	r3, #31
 8004db8:	18fb      	adds	r3, r7, r3
 8004dba:	2210      	movs	r2, #16
 8004dbc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69da      	ldr	r2, [r3, #28]
 8004dc2:	2380      	movs	r3, #128	; 0x80
 8004dc4:	021b      	lsls	r3, r3, #8
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d15c      	bne.n	8004e84 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8004dca:	231f      	movs	r3, #31
 8004dcc:	18fb      	adds	r3, r7, r3
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d015      	beq.n	8004e00 <UART_SetConfig+0x1bc>
 8004dd4:	dc18      	bgt.n	8004e08 <UART_SetConfig+0x1c4>
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d00d      	beq.n	8004df6 <UART_SetConfig+0x1b2>
 8004dda:	dc15      	bgt.n	8004e08 <UART_SetConfig+0x1c4>
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <UART_SetConfig+0x1a2>
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d005      	beq.n	8004df0 <UART_SetConfig+0x1ac>
 8004de4:	e010      	b.n	8004e08 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de6:	f7fe fd5f 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 8004dea:	0003      	movs	r3, r0
 8004dec:	61bb      	str	r3, [r7, #24]
        break;
 8004dee:	e012      	b.n	8004e16 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004df0:	4b57      	ldr	r3, [pc, #348]	; (8004f50 <UART_SetConfig+0x30c>)
 8004df2:	61bb      	str	r3, [r7, #24]
        break;
 8004df4:	e00f      	b.n	8004e16 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004df6:	f7fe fcdb 	bl	80037b0 <HAL_RCC_GetSysClockFreq>
 8004dfa:	0003      	movs	r3, r0
 8004dfc:	61bb      	str	r3, [r7, #24]
        break;
 8004dfe:	e00a      	b.n	8004e16 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e00:	2380      	movs	r3, #128	; 0x80
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	61bb      	str	r3, [r7, #24]
        break;
 8004e06:	e006      	b.n	8004e16 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e0c:	231e      	movs	r3, #30
 8004e0e:	18fb      	adds	r3, r7, r3
 8004e10:	2201      	movs	r2, #1
 8004e12:	701a      	strb	r2, [r3, #0]
        break;
 8004e14:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d100      	bne.n	8004e1e <UART_SetConfig+0x1da>
 8004e1c:	e07a      	b.n	8004f14 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	005a      	lsls	r2, r3, #1
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	085b      	lsrs	r3, r3, #1
 8004e28:	18d2      	adds	r2, r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	0019      	movs	r1, r3
 8004e30:	0010      	movs	r0, r2
 8004e32:	f7fb f97b 	bl	800012c <__udivsi3>
 8004e36:	0003      	movs	r3, r0
 8004e38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	2b0f      	cmp	r3, #15
 8004e3e:	d91c      	bls.n	8004e7a <UART_SetConfig+0x236>
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	2380      	movs	r3, #128	; 0x80
 8004e44:	025b      	lsls	r3, r3, #9
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d217      	bcs.n	8004e7a <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	200e      	movs	r0, #14
 8004e50:	183b      	adds	r3, r7, r0
 8004e52:	210f      	movs	r1, #15
 8004e54:	438a      	bics	r2, r1
 8004e56:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2207      	movs	r2, #7
 8004e60:	4013      	ands	r3, r2
 8004e62:	b299      	uxth	r1, r3
 8004e64:	183b      	adds	r3, r7, r0
 8004e66:	183a      	adds	r2, r7, r0
 8004e68:	8812      	ldrh	r2, [r2, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	183a      	adds	r2, r7, r0
 8004e74:	8812      	ldrh	r2, [r2, #0]
 8004e76:	60da      	str	r2, [r3, #12]
 8004e78:	e04c      	b.n	8004f14 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8004e7a:	231e      	movs	r3, #30
 8004e7c:	18fb      	adds	r3, r7, r3
 8004e7e:	2201      	movs	r2, #1
 8004e80:	701a      	strb	r2, [r3, #0]
 8004e82:	e047      	b.n	8004f14 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e84:	231f      	movs	r3, #31
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	d015      	beq.n	8004eba <UART_SetConfig+0x276>
 8004e8e:	dc18      	bgt.n	8004ec2 <UART_SetConfig+0x27e>
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d00d      	beq.n	8004eb0 <UART_SetConfig+0x26c>
 8004e94:	dc15      	bgt.n	8004ec2 <UART_SetConfig+0x27e>
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <UART_SetConfig+0x25c>
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d005      	beq.n	8004eaa <UART_SetConfig+0x266>
 8004e9e:	e010      	b.n	8004ec2 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea0:	f7fe fd02 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 8004ea4:	0003      	movs	r3, r0
 8004ea6:	61bb      	str	r3, [r7, #24]
        break;
 8004ea8:	e012      	b.n	8004ed0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eaa:	4b29      	ldr	r3, [pc, #164]	; (8004f50 <UART_SetConfig+0x30c>)
 8004eac:	61bb      	str	r3, [r7, #24]
        break;
 8004eae:	e00f      	b.n	8004ed0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eb0:	f7fe fc7e 	bl	80037b0 <HAL_RCC_GetSysClockFreq>
 8004eb4:	0003      	movs	r3, r0
 8004eb6:	61bb      	str	r3, [r7, #24]
        break;
 8004eb8:	e00a      	b.n	8004ed0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eba:	2380      	movs	r3, #128	; 0x80
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	61bb      	str	r3, [r7, #24]
        break;
 8004ec0:	e006      	b.n	8004ed0 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ec6:	231e      	movs	r3, #30
 8004ec8:	18fb      	adds	r3, r7, r3
 8004eca:	2201      	movs	r2, #1
 8004ecc:	701a      	strb	r2, [r3, #0]
        break;
 8004ece:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01e      	beq.n	8004f14 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	085a      	lsrs	r2, r3, #1
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	18d2      	adds	r2, r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	0019      	movs	r1, r3
 8004ee6:	0010      	movs	r0, r2
 8004ee8:	f7fb f920 	bl	800012c <__udivsi3>
 8004eec:	0003      	movs	r3, r0
 8004eee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b0f      	cmp	r3, #15
 8004ef4:	d90a      	bls.n	8004f0c <UART_SetConfig+0x2c8>
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	2380      	movs	r3, #128	; 0x80
 8004efa:	025b      	lsls	r3, r3, #9
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d205      	bcs.n	8004f0c <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	60da      	str	r2, [r3, #12]
 8004f0a:	e003      	b.n	8004f14 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8004f0c:	231e      	movs	r3, #30
 8004f0e:	18fb      	adds	r3, r7, r3
 8004f10:	2201      	movs	r2, #1
 8004f12:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004f20:	231e      	movs	r3, #30
 8004f22:	18fb      	adds	r3, r7, r3
 8004f24:	781b      	ldrb	r3, [r3, #0]
}
 8004f26:	0018      	movs	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b008      	add	sp, #32
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	efff69f3 	.word	0xefff69f3
 8004f34:	ffffcfff 	.word	0xffffcfff
 8004f38:	fffff4ff 	.word	0xfffff4ff
 8004f3c:	40013800 	.word	0x40013800
 8004f40:	40021000 	.word	0x40021000
 8004f44:	40004400 	.word	0x40004400
 8004f48:	40004800 	.word	0x40004800
 8004f4c:	40004c00 	.word	0x40004c00
 8004f50:	007a1200 	.word	0x007a1200

08004f54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	2201      	movs	r2, #1
 8004f62:	4013      	ands	r3, r2
 8004f64:	d00b      	beq.n	8004f7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4a4a      	ldr	r2, [pc, #296]	; (8005098 <UART_AdvFeatureConfig+0x144>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	0019      	movs	r1, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	2202      	movs	r2, #2
 8004f84:	4013      	ands	r3, r2
 8004f86:	d00b      	beq.n	8004fa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	4a43      	ldr	r2, [pc, #268]	; (800509c <UART_AdvFeatureConfig+0x148>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	0019      	movs	r1, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	2204      	movs	r2, #4
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	d00b      	beq.n	8004fc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	4a3b      	ldr	r2, [pc, #236]	; (80050a0 <UART_AdvFeatureConfig+0x14c>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	0019      	movs	r1, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	2208      	movs	r2, #8
 8004fc8:	4013      	ands	r3, r2
 8004fca:	d00b      	beq.n	8004fe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	4a34      	ldr	r2, [pc, #208]	; (80050a4 <UART_AdvFeatureConfig+0x150>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	0019      	movs	r1, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	2210      	movs	r2, #16
 8004fea:	4013      	ands	r3, r2
 8004fec:	d00b      	beq.n	8005006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	4a2c      	ldr	r2, [pc, #176]	; (80050a8 <UART_AdvFeatureConfig+0x154>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	0019      	movs	r1, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	2220      	movs	r2, #32
 800500c:	4013      	ands	r3, r2
 800500e:	d00b      	beq.n	8005028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	4a25      	ldr	r2, [pc, #148]	; (80050ac <UART_AdvFeatureConfig+0x158>)
 8005018:	4013      	ands	r3, r2
 800501a:	0019      	movs	r1, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	2240      	movs	r2, #64	; 0x40
 800502e:	4013      	ands	r3, r2
 8005030:	d01d      	beq.n	800506e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	4a1d      	ldr	r2, [pc, #116]	; (80050b0 <UART_AdvFeatureConfig+0x15c>)
 800503a:	4013      	ands	r3, r2
 800503c:	0019      	movs	r1, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800504e:	2380      	movs	r3, #128	; 0x80
 8005050:	035b      	lsls	r3, r3, #13
 8005052:	429a      	cmp	r2, r3
 8005054:	d10b      	bne.n	800506e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	4a15      	ldr	r2, [pc, #84]	; (80050b4 <UART_AdvFeatureConfig+0x160>)
 800505e:	4013      	ands	r3, r2
 8005060:	0019      	movs	r1, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	2280      	movs	r2, #128	; 0x80
 8005074:	4013      	ands	r3, r2
 8005076:	d00b      	beq.n	8005090 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	4a0e      	ldr	r2, [pc, #56]	; (80050b8 <UART_AdvFeatureConfig+0x164>)
 8005080:	4013      	ands	r3, r2
 8005082:	0019      	movs	r1, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	605a      	str	r2, [r3, #4]
  }
}
 8005090:	46c0      	nop			; (mov r8, r8)
 8005092:	46bd      	mov	sp, r7
 8005094:	b002      	add	sp, #8
 8005096:	bd80      	pop	{r7, pc}
 8005098:	fffdffff 	.word	0xfffdffff
 800509c:	fffeffff 	.word	0xfffeffff
 80050a0:	fffbffff 	.word	0xfffbffff
 80050a4:	ffff7fff 	.word	0xffff7fff
 80050a8:	ffffefff 	.word	0xffffefff
 80050ac:	ffffdfff 	.word	0xffffdfff
 80050b0:	ffefffff 	.word	0xffefffff
 80050b4:	ff9fffff 	.word	0xff9fffff
 80050b8:	fff7ffff 	.word	0xfff7ffff

080050bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b092      	sub	sp, #72	; 0x48
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2284      	movs	r2, #132	; 0x84
 80050c8:	2100      	movs	r1, #0
 80050ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050cc:	f7fd fa40 	bl	8002550 <HAL_GetTick>
 80050d0:	0003      	movs	r3, r0
 80050d2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2208      	movs	r2, #8
 80050dc:	4013      	ands	r3, r2
 80050de:	2b08      	cmp	r3, #8
 80050e0:	d12c      	bne.n	800513c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e4:	2280      	movs	r2, #128	; 0x80
 80050e6:	0391      	lsls	r1, r2, #14
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	4a46      	ldr	r2, [pc, #280]	; (8005204 <UART_CheckIdleState+0x148>)
 80050ec:	9200      	str	r2, [sp, #0]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f000 f88c 	bl	800520c <UART_WaitOnFlagUntilTimeout>
 80050f4:	1e03      	subs	r3, r0, #0
 80050f6:	d021      	beq.n	800513c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050f8:	f3ef 8310 	mrs	r3, PRIMASK
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005100:	63bb      	str	r3, [r7, #56]	; 0x38
 8005102:	2301      	movs	r3, #1
 8005104:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005108:	f383 8810 	msr	PRIMASK, r3
}
 800510c:	46c0      	nop			; (mov r8, r8)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2180      	movs	r1, #128	; 0x80
 800511a:	438a      	bics	r2, r1
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005120:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005124:	f383 8810 	msr	PRIMASK, r3
}
 8005128:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2220      	movs	r2, #32
 800512e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2278      	movs	r2, #120	; 0x78
 8005134:	2100      	movs	r1, #0
 8005136:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e05f      	b.n	80051fc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2204      	movs	r2, #4
 8005144:	4013      	ands	r3, r2
 8005146:	2b04      	cmp	r3, #4
 8005148:	d146      	bne.n	80051d8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800514a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800514c:	2280      	movs	r2, #128	; 0x80
 800514e:	03d1      	lsls	r1, r2, #15
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	4a2c      	ldr	r2, [pc, #176]	; (8005204 <UART_CheckIdleState+0x148>)
 8005154:	9200      	str	r2, [sp, #0]
 8005156:	2200      	movs	r2, #0
 8005158:	f000 f858 	bl	800520c <UART_WaitOnFlagUntilTimeout>
 800515c:	1e03      	subs	r3, r0, #0
 800515e:	d03b      	beq.n	80051d8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005160:	f3ef 8310 	mrs	r3, PRIMASK
 8005164:	60fb      	str	r3, [r7, #12]
  return(result);
 8005166:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005168:	637b      	str	r3, [r7, #52]	; 0x34
 800516a:	2301      	movs	r3, #1
 800516c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f383 8810 	msr	PRIMASK, r3
}
 8005174:	46c0      	nop			; (mov r8, r8)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4921      	ldr	r1, [pc, #132]	; (8005208 <UART_CheckIdleState+0x14c>)
 8005182:	400a      	ands	r2, r1
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005188:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f383 8810 	msr	PRIMASK, r3
}
 8005190:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005192:	f3ef 8310 	mrs	r3, PRIMASK
 8005196:	61bb      	str	r3, [r7, #24]
  return(result);
 8005198:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519a:	633b      	str	r3, [r7, #48]	; 0x30
 800519c:	2301      	movs	r3, #1
 800519e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f383 8810 	msr	PRIMASK, r3
}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2101      	movs	r1, #1
 80051b4:	438a      	bics	r2, r1
 80051b6:	609a      	str	r2, [r3, #8]
 80051b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	f383 8810 	msr	PRIMASK, r3
}
 80051c2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2280      	movs	r2, #128	; 0x80
 80051c8:	2120      	movs	r1, #32
 80051ca:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2278      	movs	r2, #120	; 0x78
 80051d0:	2100      	movs	r1, #0
 80051d2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e011      	b.n	80051fc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2280      	movs	r2, #128	; 0x80
 80051e2:	2120      	movs	r1, #32
 80051e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2278      	movs	r2, #120	; 0x78
 80051f6:	2100      	movs	r1, #0
 80051f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	0018      	movs	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	b010      	add	sp, #64	; 0x40
 8005202:	bd80      	pop	{r7, pc}
 8005204:	01ffffff 	.word	0x01ffffff
 8005208:	fffffedf 	.word	0xfffffedf

0800520c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	1dfb      	adds	r3, r7, #7
 800521a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800521c:	e04b      	b.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	3301      	adds	r3, #1
 8005222:	d048      	beq.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005224:	f7fd f994 	bl	8002550 <HAL_GetTick>
 8005228:	0002      	movs	r2, r0
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	429a      	cmp	r2, r3
 8005232:	d302      	bcc.n	800523a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e04b      	b.n	80052d6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2204      	movs	r2, #4
 8005246:	4013      	ands	r3, r2
 8005248:	d035      	beq.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	2208      	movs	r2, #8
 8005252:	4013      	ands	r3, r2
 8005254:	2b08      	cmp	r3, #8
 8005256:	d111      	bne.n	800527c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2208      	movs	r2, #8
 800525e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	0018      	movs	r0, r3
 8005264:	f000 f83c 	bl	80052e0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2284      	movs	r2, #132	; 0x84
 800526c:	2108      	movs	r1, #8
 800526e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2278      	movs	r2, #120	; 0x78
 8005274:	2100      	movs	r1, #0
 8005276:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e02c      	b.n	80052d6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	69da      	ldr	r2, [r3, #28]
 8005282:	2380      	movs	r3, #128	; 0x80
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	401a      	ands	r2, r3
 8005288:	2380      	movs	r3, #128	; 0x80
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	429a      	cmp	r2, r3
 800528e:	d112      	bne.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2280      	movs	r2, #128	; 0x80
 8005296:	0112      	lsls	r2, r2, #4
 8005298:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	0018      	movs	r0, r3
 800529e:	f000 f81f 	bl	80052e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2284      	movs	r2, #132	; 0x84
 80052a6:	2120      	movs	r1, #32
 80052a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2278      	movs	r2, #120	; 0x78
 80052ae:	2100      	movs	r1, #0
 80052b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e00f      	b.n	80052d6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	4013      	ands	r3, r2
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	425a      	negs	r2, r3
 80052c6:	4153      	adcs	r3, r2
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	001a      	movs	r2, r3
 80052cc:	1dfb      	adds	r3, r7, #7
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d0a4      	beq.n	800521e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	0018      	movs	r0, r3
 80052d8:	46bd      	mov	sp, r7
 80052da:	b004      	add	sp, #16
 80052dc:	bd80      	pop	{r7, pc}
	...

080052e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08e      	sub	sp, #56	; 0x38
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052e8:	f3ef 8310 	mrs	r3, PRIMASK
 80052ec:	617b      	str	r3, [r7, #20]
  return(result);
 80052ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052f0:	637b      	str	r3, [r7, #52]	; 0x34
 80052f2:	2301      	movs	r3, #1
 80052f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	f383 8810 	msr	PRIMASK, r3
}
 80052fc:	46c0      	nop			; (mov r8, r8)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4926      	ldr	r1, [pc, #152]	; (80053a4 <UART_EndRxTransfer+0xc4>)
 800530a:	400a      	ands	r2, r1
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005310:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	f383 8810 	msr	PRIMASK, r3
}
 8005318:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800531a:	f3ef 8310 	mrs	r3, PRIMASK
 800531e:	623b      	str	r3, [r7, #32]
  return(result);
 8005320:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005322:	633b      	str	r3, [r7, #48]	; 0x30
 8005324:	2301      	movs	r3, #1
 8005326:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	f383 8810 	msr	PRIMASK, r3
}
 800532e:	46c0      	nop			; (mov r8, r8)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2101      	movs	r1, #1
 800533c:	438a      	bics	r2, r1
 800533e:	609a      	str	r2, [r3, #8]
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	f383 8810 	msr	PRIMASK, r3
}
 800534a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005350:	2b01      	cmp	r3, #1
 8005352:	d118      	bne.n	8005386 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005354:	f3ef 8310 	mrs	r3, PRIMASK
 8005358:	60bb      	str	r3, [r7, #8]
  return(result);
 800535a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800535e:	2301      	movs	r3, #1
 8005360:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f383 8810 	msr	PRIMASK, r3
}
 8005368:	46c0      	nop			; (mov r8, r8)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2110      	movs	r1, #16
 8005376:	438a      	bics	r2, r1
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f383 8810 	msr	PRIMASK, r3
}
 8005384:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2280      	movs	r2, #128	; 0x80
 800538a:	2120      	movs	r1, #32
 800538c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	669a      	str	r2, [r3, #104]	; 0x68
}
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	46bd      	mov	sp, r7
 800539e:	b00e      	add	sp, #56	; 0x38
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	fffffedf 	.word	0xfffffedf

080053a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053b0:	4b09      	ldr	r3, [pc, #36]	; (80053d8 <USB_DisableGlobalInt+0x30>)
 80053b2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2240      	movs	r2, #64	; 0x40
 80053b8:	5a9b      	ldrh	r3, [r3, r2]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	b292      	uxth	r2, r2
 80053c0:	43d2      	mvns	r2, r2
 80053c2:	b292      	uxth	r2, r2
 80053c4:	4013      	ands	r3, r2
 80053c6:	b299      	uxth	r1, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2240      	movs	r2, #64	; 0x40
 80053cc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	0018      	movs	r0, r3
 80053d2:	46bd      	mov	sp, r7
 80053d4:	b004      	add	sp, #16
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	0000bf80 	.word	0x0000bf80

080053dc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80053dc:	b084      	sub	sp, #16
 80053de:	b590      	push	{r4, r7, lr}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	2004      	movs	r0, #4
 80053e8:	2410      	movs	r4, #16
 80053ea:	1900      	adds	r0, r0, r4
 80053ec:	2408      	movs	r4, #8
 80053ee:	46a4      	mov	ip, r4
 80053f0:	44bc      	add	ip, r7
 80053f2:	4460      	add	r0, ip
 80053f4:	6001      	str	r1, [r0, #0]
 80053f6:	6042      	str	r2, [r0, #4]
 80053f8:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2240      	movs	r2, #64	; 0x40
 80053fe:	2101      	movs	r1, #1
 8005400:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2240      	movs	r2, #64	; 0x40
 8005406:	2100      	movs	r1, #0
 8005408:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2244      	movs	r2, #68	; 0x44
 800540e:	2100      	movs	r1, #0
 8005410:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2250      	movs	r2, #80	; 0x50
 8005416:	2100      	movs	r1, #0
 8005418:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	0018      	movs	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	b003      	add	sp, #12
 8005422:	bc90      	pop	{r4, r7}
 8005424:	bc08      	pop	{r3}
 8005426:	b004      	add	sp, #16
 8005428:	4718      	bx	r3
	...

0800542c <siprintf>:
 800542c:	b40e      	push	{r1, r2, r3}
 800542e:	b500      	push	{lr}
 8005430:	490b      	ldr	r1, [pc, #44]	; (8005460 <siprintf+0x34>)
 8005432:	b09c      	sub	sp, #112	; 0x70
 8005434:	ab1d      	add	r3, sp, #116	; 0x74
 8005436:	9002      	str	r0, [sp, #8]
 8005438:	9006      	str	r0, [sp, #24]
 800543a:	9107      	str	r1, [sp, #28]
 800543c:	9104      	str	r1, [sp, #16]
 800543e:	4809      	ldr	r0, [pc, #36]	; (8005464 <siprintf+0x38>)
 8005440:	4909      	ldr	r1, [pc, #36]	; (8005468 <siprintf+0x3c>)
 8005442:	cb04      	ldmia	r3!, {r2}
 8005444:	9105      	str	r1, [sp, #20]
 8005446:	6800      	ldr	r0, [r0, #0]
 8005448:	a902      	add	r1, sp, #8
 800544a:	9301      	str	r3, [sp, #4]
 800544c:	f000 f9ba 	bl	80057c4 <_svfiprintf_r>
 8005450:	2200      	movs	r2, #0
 8005452:	9b02      	ldr	r3, [sp, #8]
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	b01c      	add	sp, #112	; 0x70
 8005458:	bc08      	pop	{r3}
 800545a:	b003      	add	sp, #12
 800545c:	4718      	bx	r3
 800545e:	46c0      	nop			; (mov r8, r8)
 8005460:	7fffffff 	.word	0x7fffffff
 8005464:	20000058 	.word	0x20000058
 8005468:	ffff0208 	.word	0xffff0208

0800546c <memset>:
 800546c:	0003      	movs	r3, r0
 800546e:	1882      	adds	r2, r0, r2
 8005470:	4293      	cmp	r3, r2
 8005472:	d100      	bne.n	8005476 <memset+0xa>
 8005474:	4770      	bx	lr
 8005476:	7019      	strb	r1, [r3, #0]
 8005478:	3301      	adds	r3, #1
 800547a:	e7f9      	b.n	8005470 <memset+0x4>

0800547c <strcat>:
 800547c:	0002      	movs	r2, r0
 800547e:	b510      	push	{r4, lr}
 8005480:	7813      	ldrb	r3, [r2, #0]
 8005482:	0014      	movs	r4, r2
 8005484:	3201      	adds	r2, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1fa      	bne.n	8005480 <strcat+0x4>
 800548a:	5cca      	ldrb	r2, [r1, r3]
 800548c:	54e2      	strb	r2, [r4, r3]
 800548e:	3301      	adds	r3, #1
 8005490:	2a00      	cmp	r2, #0
 8005492:	d1fa      	bne.n	800548a <strcat+0xe>
 8005494:	bd10      	pop	{r4, pc}
	...

08005498 <__errno>:
 8005498:	4b01      	ldr	r3, [pc, #4]	; (80054a0 <__errno+0x8>)
 800549a:	6818      	ldr	r0, [r3, #0]
 800549c:	4770      	bx	lr
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	20000058 	.word	0x20000058

080054a4 <__libc_init_array>:
 80054a4:	b570      	push	{r4, r5, r6, lr}
 80054a6:	2600      	movs	r6, #0
 80054a8:	4c0c      	ldr	r4, [pc, #48]	; (80054dc <__libc_init_array+0x38>)
 80054aa:	4d0d      	ldr	r5, [pc, #52]	; (80054e0 <__libc_init_array+0x3c>)
 80054ac:	1b64      	subs	r4, r4, r5
 80054ae:	10a4      	asrs	r4, r4, #2
 80054b0:	42a6      	cmp	r6, r4
 80054b2:	d109      	bne.n	80054c8 <__libc_init_array+0x24>
 80054b4:	2600      	movs	r6, #0
 80054b6:	f000 fc6d 	bl	8005d94 <_init>
 80054ba:	4c0a      	ldr	r4, [pc, #40]	; (80054e4 <__libc_init_array+0x40>)
 80054bc:	4d0a      	ldr	r5, [pc, #40]	; (80054e8 <__libc_init_array+0x44>)
 80054be:	1b64      	subs	r4, r4, r5
 80054c0:	10a4      	asrs	r4, r4, #2
 80054c2:	42a6      	cmp	r6, r4
 80054c4:	d105      	bne.n	80054d2 <__libc_init_array+0x2e>
 80054c6:	bd70      	pop	{r4, r5, r6, pc}
 80054c8:	00b3      	lsls	r3, r6, #2
 80054ca:	58eb      	ldr	r3, [r5, r3]
 80054cc:	4798      	blx	r3
 80054ce:	3601      	adds	r6, #1
 80054d0:	e7ee      	b.n	80054b0 <__libc_init_array+0xc>
 80054d2:	00b3      	lsls	r3, r6, #2
 80054d4:	58eb      	ldr	r3, [r5, r3]
 80054d6:	4798      	blx	r3
 80054d8:	3601      	adds	r6, #1
 80054da:	e7f2      	b.n	80054c2 <__libc_init_array+0x1e>
 80054dc:	08005e80 	.word	0x08005e80
 80054e0:	08005e80 	.word	0x08005e80
 80054e4:	08005e84 	.word	0x08005e84
 80054e8:	08005e80 	.word	0x08005e80

080054ec <__retarget_lock_acquire_recursive>:
 80054ec:	4770      	bx	lr

080054ee <__retarget_lock_release_recursive>:
 80054ee:	4770      	bx	lr

080054f0 <memcpy>:
 80054f0:	2300      	movs	r3, #0
 80054f2:	b510      	push	{r4, lr}
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d100      	bne.n	80054fa <memcpy+0xa>
 80054f8:	bd10      	pop	{r4, pc}
 80054fa:	5ccc      	ldrb	r4, [r1, r3]
 80054fc:	54c4      	strb	r4, [r0, r3]
 80054fe:	3301      	adds	r3, #1
 8005500:	e7f8      	b.n	80054f4 <memcpy+0x4>
	...

08005504 <_free_r>:
 8005504:	b570      	push	{r4, r5, r6, lr}
 8005506:	0005      	movs	r5, r0
 8005508:	2900      	cmp	r1, #0
 800550a:	d010      	beq.n	800552e <_free_r+0x2a>
 800550c:	1f0c      	subs	r4, r1, #4
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	da00      	bge.n	8005516 <_free_r+0x12>
 8005514:	18e4      	adds	r4, r4, r3
 8005516:	0028      	movs	r0, r5
 8005518:	f000 f8e2 	bl	80056e0 <__malloc_lock>
 800551c:	4a1d      	ldr	r2, [pc, #116]	; (8005594 <_free_r+0x90>)
 800551e:	6813      	ldr	r3, [r2, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d105      	bne.n	8005530 <_free_r+0x2c>
 8005524:	6063      	str	r3, [r4, #4]
 8005526:	6014      	str	r4, [r2, #0]
 8005528:	0028      	movs	r0, r5
 800552a:	f000 f8e1 	bl	80056f0 <__malloc_unlock>
 800552e:	bd70      	pop	{r4, r5, r6, pc}
 8005530:	42a3      	cmp	r3, r4
 8005532:	d908      	bls.n	8005546 <_free_r+0x42>
 8005534:	6820      	ldr	r0, [r4, #0]
 8005536:	1821      	adds	r1, r4, r0
 8005538:	428b      	cmp	r3, r1
 800553a:	d1f3      	bne.n	8005524 <_free_r+0x20>
 800553c:	6819      	ldr	r1, [r3, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	1809      	adds	r1, r1, r0
 8005542:	6021      	str	r1, [r4, #0]
 8005544:	e7ee      	b.n	8005524 <_free_r+0x20>
 8005546:	001a      	movs	r2, r3
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <_free_r+0x4e>
 800554e:	42a3      	cmp	r3, r4
 8005550:	d9f9      	bls.n	8005546 <_free_r+0x42>
 8005552:	6811      	ldr	r1, [r2, #0]
 8005554:	1850      	adds	r0, r2, r1
 8005556:	42a0      	cmp	r0, r4
 8005558:	d10b      	bne.n	8005572 <_free_r+0x6e>
 800555a:	6820      	ldr	r0, [r4, #0]
 800555c:	1809      	adds	r1, r1, r0
 800555e:	1850      	adds	r0, r2, r1
 8005560:	6011      	str	r1, [r2, #0]
 8005562:	4283      	cmp	r3, r0
 8005564:	d1e0      	bne.n	8005528 <_free_r+0x24>
 8005566:	6818      	ldr	r0, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	1841      	adds	r1, r0, r1
 800556c:	6011      	str	r1, [r2, #0]
 800556e:	6053      	str	r3, [r2, #4]
 8005570:	e7da      	b.n	8005528 <_free_r+0x24>
 8005572:	42a0      	cmp	r0, r4
 8005574:	d902      	bls.n	800557c <_free_r+0x78>
 8005576:	230c      	movs	r3, #12
 8005578:	602b      	str	r3, [r5, #0]
 800557a:	e7d5      	b.n	8005528 <_free_r+0x24>
 800557c:	6820      	ldr	r0, [r4, #0]
 800557e:	1821      	adds	r1, r4, r0
 8005580:	428b      	cmp	r3, r1
 8005582:	d103      	bne.n	800558c <_free_r+0x88>
 8005584:	6819      	ldr	r1, [r3, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	1809      	adds	r1, r1, r0
 800558a:	6021      	str	r1, [r4, #0]
 800558c:	6063      	str	r3, [r4, #4]
 800558e:	6054      	str	r4, [r2, #4]
 8005590:	e7ca      	b.n	8005528 <_free_r+0x24>
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	2000063c 	.word	0x2000063c

08005598 <sbrk_aligned>:
 8005598:	b570      	push	{r4, r5, r6, lr}
 800559a:	4e0f      	ldr	r6, [pc, #60]	; (80055d8 <sbrk_aligned+0x40>)
 800559c:	000d      	movs	r5, r1
 800559e:	6831      	ldr	r1, [r6, #0]
 80055a0:	0004      	movs	r4, r0
 80055a2:	2900      	cmp	r1, #0
 80055a4:	d102      	bne.n	80055ac <sbrk_aligned+0x14>
 80055a6:	f000 fba1 	bl	8005cec <_sbrk_r>
 80055aa:	6030      	str	r0, [r6, #0]
 80055ac:	0029      	movs	r1, r5
 80055ae:	0020      	movs	r0, r4
 80055b0:	f000 fb9c 	bl	8005cec <_sbrk_r>
 80055b4:	1c43      	adds	r3, r0, #1
 80055b6:	d00a      	beq.n	80055ce <sbrk_aligned+0x36>
 80055b8:	2303      	movs	r3, #3
 80055ba:	1cc5      	adds	r5, r0, #3
 80055bc:	439d      	bics	r5, r3
 80055be:	42a8      	cmp	r0, r5
 80055c0:	d007      	beq.n	80055d2 <sbrk_aligned+0x3a>
 80055c2:	1a29      	subs	r1, r5, r0
 80055c4:	0020      	movs	r0, r4
 80055c6:	f000 fb91 	bl	8005cec <_sbrk_r>
 80055ca:	3001      	adds	r0, #1
 80055cc:	d101      	bne.n	80055d2 <sbrk_aligned+0x3a>
 80055ce:	2501      	movs	r5, #1
 80055d0:	426d      	negs	r5, r5
 80055d2:	0028      	movs	r0, r5
 80055d4:	bd70      	pop	{r4, r5, r6, pc}
 80055d6:	46c0      	nop			; (mov r8, r8)
 80055d8:	20000640 	.word	0x20000640

080055dc <_malloc_r>:
 80055dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055de:	2203      	movs	r2, #3
 80055e0:	1ccb      	adds	r3, r1, #3
 80055e2:	4393      	bics	r3, r2
 80055e4:	3308      	adds	r3, #8
 80055e6:	0006      	movs	r6, r0
 80055e8:	001f      	movs	r7, r3
 80055ea:	2b0c      	cmp	r3, #12
 80055ec:	d238      	bcs.n	8005660 <_malloc_r+0x84>
 80055ee:	270c      	movs	r7, #12
 80055f0:	42b9      	cmp	r1, r7
 80055f2:	d837      	bhi.n	8005664 <_malloc_r+0x88>
 80055f4:	0030      	movs	r0, r6
 80055f6:	f000 f873 	bl	80056e0 <__malloc_lock>
 80055fa:	4b38      	ldr	r3, [pc, #224]	; (80056dc <_malloc_r+0x100>)
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	001c      	movs	r4, r3
 8005602:	2c00      	cmp	r4, #0
 8005604:	d133      	bne.n	800566e <_malloc_r+0x92>
 8005606:	0039      	movs	r1, r7
 8005608:	0030      	movs	r0, r6
 800560a:	f7ff ffc5 	bl	8005598 <sbrk_aligned>
 800560e:	0004      	movs	r4, r0
 8005610:	1c43      	adds	r3, r0, #1
 8005612:	d15e      	bne.n	80056d2 <_malloc_r+0xf6>
 8005614:	9b00      	ldr	r3, [sp, #0]
 8005616:	681c      	ldr	r4, [r3, #0]
 8005618:	0025      	movs	r5, r4
 800561a:	2d00      	cmp	r5, #0
 800561c:	d14e      	bne.n	80056bc <_malloc_r+0xe0>
 800561e:	2c00      	cmp	r4, #0
 8005620:	d051      	beq.n	80056c6 <_malloc_r+0xea>
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	0029      	movs	r1, r5
 8005626:	18e3      	adds	r3, r4, r3
 8005628:	0030      	movs	r0, r6
 800562a:	9301      	str	r3, [sp, #4]
 800562c:	f000 fb5e 	bl	8005cec <_sbrk_r>
 8005630:	9b01      	ldr	r3, [sp, #4]
 8005632:	4283      	cmp	r3, r0
 8005634:	d147      	bne.n	80056c6 <_malloc_r+0xea>
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	0030      	movs	r0, r6
 800563a:	1aff      	subs	r7, r7, r3
 800563c:	0039      	movs	r1, r7
 800563e:	f7ff ffab 	bl	8005598 <sbrk_aligned>
 8005642:	3001      	adds	r0, #1
 8005644:	d03f      	beq.n	80056c6 <_malloc_r+0xea>
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	19db      	adds	r3, r3, r7
 800564a:	6023      	str	r3, [r4, #0]
 800564c:	9b00      	ldr	r3, [sp, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d040      	beq.n	80056d6 <_malloc_r+0xfa>
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	42a2      	cmp	r2, r4
 8005658:	d133      	bne.n	80056c2 <_malloc_r+0xe6>
 800565a:	2200      	movs	r2, #0
 800565c:	605a      	str	r2, [r3, #4]
 800565e:	e014      	b.n	800568a <_malloc_r+0xae>
 8005660:	2b00      	cmp	r3, #0
 8005662:	dac5      	bge.n	80055f0 <_malloc_r+0x14>
 8005664:	230c      	movs	r3, #12
 8005666:	2500      	movs	r5, #0
 8005668:	6033      	str	r3, [r6, #0]
 800566a:	0028      	movs	r0, r5
 800566c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800566e:	6821      	ldr	r1, [r4, #0]
 8005670:	1bc9      	subs	r1, r1, r7
 8005672:	d420      	bmi.n	80056b6 <_malloc_r+0xda>
 8005674:	290b      	cmp	r1, #11
 8005676:	d918      	bls.n	80056aa <_malloc_r+0xce>
 8005678:	19e2      	adds	r2, r4, r7
 800567a:	6027      	str	r7, [r4, #0]
 800567c:	42a3      	cmp	r3, r4
 800567e:	d112      	bne.n	80056a6 <_malloc_r+0xca>
 8005680:	9b00      	ldr	r3, [sp, #0]
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	6863      	ldr	r3, [r4, #4]
 8005686:	6011      	str	r1, [r2, #0]
 8005688:	6053      	str	r3, [r2, #4]
 800568a:	0030      	movs	r0, r6
 800568c:	0025      	movs	r5, r4
 800568e:	f000 f82f 	bl	80056f0 <__malloc_unlock>
 8005692:	2207      	movs	r2, #7
 8005694:	350b      	adds	r5, #11
 8005696:	1d23      	adds	r3, r4, #4
 8005698:	4395      	bics	r5, r2
 800569a:	1aea      	subs	r2, r5, r3
 800569c:	429d      	cmp	r5, r3
 800569e:	d0e4      	beq.n	800566a <_malloc_r+0x8e>
 80056a0:	1b5b      	subs	r3, r3, r5
 80056a2:	50a3      	str	r3, [r4, r2]
 80056a4:	e7e1      	b.n	800566a <_malloc_r+0x8e>
 80056a6:	605a      	str	r2, [r3, #4]
 80056a8:	e7ec      	b.n	8005684 <_malloc_r+0xa8>
 80056aa:	6862      	ldr	r2, [r4, #4]
 80056ac:	42a3      	cmp	r3, r4
 80056ae:	d1d5      	bne.n	800565c <_malloc_r+0x80>
 80056b0:	9b00      	ldr	r3, [sp, #0]
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	e7e9      	b.n	800568a <_malloc_r+0xae>
 80056b6:	0023      	movs	r3, r4
 80056b8:	6864      	ldr	r4, [r4, #4]
 80056ba:	e7a2      	b.n	8005602 <_malloc_r+0x26>
 80056bc:	002c      	movs	r4, r5
 80056be:	686d      	ldr	r5, [r5, #4]
 80056c0:	e7ab      	b.n	800561a <_malloc_r+0x3e>
 80056c2:	0013      	movs	r3, r2
 80056c4:	e7c4      	b.n	8005650 <_malloc_r+0x74>
 80056c6:	230c      	movs	r3, #12
 80056c8:	0030      	movs	r0, r6
 80056ca:	6033      	str	r3, [r6, #0]
 80056cc:	f000 f810 	bl	80056f0 <__malloc_unlock>
 80056d0:	e7cb      	b.n	800566a <_malloc_r+0x8e>
 80056d2:	6027      	str	r7, [r4, #0]
 80056d4:	e7d9      	b.n	800568a <_malloc_r+0xae>
 80056d6:	605b      	str	r3, [r3, #4]
 80056d8:	deff      	udf	#255	; 0xff
 80056da:	46c0      	nop			; (mov r8, r8)
 80056dc:	2000063c 	.word	0x2000063c

080056e0 <__malloc_lock>:
 80056e0:	b510      	push	{r4, lr}
 80056e2:	4802      	ldr	r0, [pc, #8]	; (80056ec <__malloc_lock+0xc>)
 80056e4:	f7ff ff02 	bl	80054ec <__retarget_lock_acquire_recursive>
 80056e8:	bd10      	pop	{r4, pc}
 80056ea:	46c0      	nop			; (mov r8, r8)
 80056ec:	20000638 	.word	0x20000638

080056f0 <__malloc_unlock>:
 80056f0:	b510      	push	{r4, lr}
 80056f2:	4802      	ldr	r0, [pc, #8]	; (80056fc <__malloc_unlock+0xc>)
 80056f4:	f7ff fefb 	bl	80054ee <__retarget_lock_release_recursive>
 80056f8:	bd10      	pop	{r4, pc}
 80056fa:	46c0      	nop			; (mov r8, r8)
 80056fc:	20000638 	.word	0x20000638

08005700 <__ssputs_r>:
 8005700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005702:	b085      	sub	sp, #20
 8005704:	9301      	str	r3, [sp, #4]
 8005706:	9203      	str	r2, [sp, #12]
 8005708:	688e      	ldr	r6, [r1, #8]
 800570a:	9a01      	ldr	r2, [sp, #4]
 800570c:	0007      	movs	r7, r0
 800570e:	000c      	movs	r4, r1
 8005710:	680b      	ldr	r3, [r1, #0]
 8005712:	4296      	cmp	r6, r2
 8005714:	d831      	bhi.n	800577a <__ssputs_r+0x7a>
 8005716:	898a      	ldrh	r2, [r1, #12]
 8005718:	2190      	movs	r1, #144	; 0x90
 800571a:	00c9      	lsls	r1, r1, #3
 800571c:	420a      	tst	r2, r1
 800571e:	d029      	beq.n	8005774 <__ssputs_r+0x74>
 8005720:	2003      	movs	r0, #3
 8005722:	6921      	ldr	r1, [r4, #16]
 8005724:	1a5b      	subs	r3, r3, r1
 8005726:	9302      	str	r3, [sp, #8]
 8005728:	6963      	ldr	r3, [r4, #20]
 800572a:	4343      	muls	r3, r0
 800572c:	0fdd      	lsrs	r5, r3, #31
 800572e:	18ed      	adds	r5, r5, r3
 8005730:	9b01      	ldr	r3, [sp, #4]
 8005732:	9802      	ldr	r0, [sp, #8]
 8005734:	3301      	adds	r3, #1
 8005736:	181b      	adds	r3, r3, r0
 8005738:	106d      	asrs	r5, r5, #1
 800573a:	42ab      	cmp	r3, r5
 800573c:	d900      	bls.n	8005740 <__ssputs_r+0x40>
 800573e:	001d      	movs	r5, r3
 8005740:	0552      	lsls	r2, r2, #21
 8005742:	d529      	bpl.n	8005798 <__ssputs_r+0x98>
 8005744:	0029      	movs	r1, r5
 8005746:	0038      	movs	r0, r7
 8005748:	f7ff ff48 	bl	80055dc <_malloc_r>
 800574c:	1e06      	subs	r6, r0, #0
 800574e:	d02d      	beq.n	80057ac <__ssputs_r+0xac>
 8005750:	9a02      	ldr	r2, [sp, #8]
 8005752:	6921      	ldr	r1, [r4, #16]
 8005754:	f7ff fecc 	bl	80054f0 <memcpy>
 8005758:	89a2      	ldrh	r2, [r4, #12]
 800575a:	4b19      	ldr	r3, [pc, #100]	; (80057c0 <__ssputs_r+0xc0>)
 800575c:	401a      	ands	r2, r3
 800575e:	2380      	movs	r3, #128	; 0x80
 8005760:	4313      	orrs	r3, r2
 8005762:	81a3      	strh	r3, [r4, #12]
 8005764:	9b02      	ldr	r3, [sp, #8]
 8005766:	6126      	str	r6, [r4, #16]
 8005768:	18f6      	adds	r6, r6, r3
 800576a:	6026      	str	r6, [r4, #0]
 800576c:	6165      	str	r5, [r4, #20]
 800576e:	9e01      	ldr	r6, [sp, #4]
 8005770:	1aed      	subs	r5, r5, r3
 8005772:	60a5      	str	r5, [r4, #8]
 8005774:	9b01      	ldr	r3, [sp, #4]
 8005776:	429e      	cmp	r6, r3
 8005778:	d900      	bls.n	800577c <__ssputs_r+0x7c>
 800577a:	9e01      	ldr	r6, [sp, #4]
 800577c:	0032      	movs	r2, r6
 800577e:	9903      	ldr	r1, [sp, #12]
 8005780:	6820      	ldr	r0, [r4, #0]
 8005782:	f000 fa9f 	bl	8005cc4 <memmove>
 8005786:	2000      	movs	r0, #0
 8005788:	68a3      	ldr	r3, [r4, #8]
 800578a:	1b9b      	subs	r3, r3, r6
 800578c:	60a3      	str	r3, [r4, #8]
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	199b      	adds	r3, r3, r6
 8005792:	6023      	str	r3, [r4, #0]
 8005794:	b005      	add	sp, #20
 8005796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005798:	002a      	movs	r2, r5
 800579a:	0038      	movs	r0, r7
 800579c:	f000 fac3 	bl	8005d26 <_realloc_r>
 80057a0:	1e06      	subs	r6, r0, #0
 80057a2:	d1df      	bne.n	8005764 <__ssputs_r+0x64>
 80057a4:	0038      	movs	r0, r7
 80057a6:	6921      	ldr	r1, [r4, #16]
 80057a8:	f7ff feac 	bl	8005504 <_free_r>
 80057ac:	230c      	movs	r3, #12
 80057ae:	2001      	movs	r0, #1
 80057b0:	603b      	str	r3, [r7, #0]
 80057b2:	89a2      	ldrh	r2, [r4, #12]
 80057b4:	3334      	adds	r3, #52	; 0x34
 80057b6:	4313      	orrs	r3, r2
 80057b8:	81a3      	strh	r3, [r4, #12]
 80057ba:	4240      	negs	r0, r0
 80057bc:	e7ea      	b.n	8005794 <__ssputs_r+0x94>
 80057be:	46c0      	nop			; (mov r8, r8)
 80057c0:	fffffb7f 	.word	0xfffffb7f

080057c4 <_svfiprintf_r>:
 80057c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057c6:	b0a1      	sub	sp, #132	; 0x84
 80057c8:	9003      	str	r0, [sp, #12]
 80057ca:	001d      	movs	r5, r3
 80057cc:	898b      	ldrh	r3, [r1, #12]
 80057ce:	000f      	movs	r7, r1
 80057d0:	0016      	movs	r6, r2
 80057d2:	061b      	lsls	r3, r3, #24
 80057d4:	d511      	bpl.n	80057fa <_svfiprintf_r+0x36>
 80057d6:	690b      	ldr	r3, [r1, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10e      	bne.n	80057fa <_svfiprintf_r+0x36>
 80057dc:	2140      	movs	r1, #64	; 0x40
 80057de:	f7ff fefd 	bl	80055dc <_malloc_r>
 80057e2:	6038      	str	r0, [r7, #0]
 80057e4:	6138      	str	r0, [r7, #16]
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d105      	bne.n	80057f6 <_svfiprintf_r+0x32>
 80057ea:	230c      	movs	r3, #12
 80057ec:	9a03      	ldr	r2, [sp, #12]
 80057ee:	3801      	subs	r0, #1
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	b021      	add	sp, #132	; 0x84
 80057f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057f6:	2340      	movs	r3, #64	; 0x40
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	2300      	movs	r3, #0
 80057fc:	ac08      	add	r4, sp, #32
 80057fe:	6163      	str	r3, [r4, #20]
 8005800:	3320      	adds	r3, #32
 8005802:	7663      	strb	r3, [r4, #25]
 8005804:	3310      	adds	r3, #16
 8005806:	76a3      	strb	r3, [r4, #26]
 8005808:	9507      	str	r5, [sp, #28]
 800580a:	0035      	movs	r5, r6
 800580c:	782b      	ldrb	r3, [r5, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <_svfiprintf_r+0x52>
 8005812:	2b25      	cmp	r3, #37	; 0x25
 8005814:	d148      	bne.n	80058a8 <_svfiprintf_r+0xe4>
 8005816:	1bab      	subs	r3, r5, r6
 8005818:	9305      	str	r3, [sp, #20]
 800581a:	42b5      	cmp	r5, r6
 800581c:	d00b      	beq.n	8005836 <_svfiprintf_r+0x72>
 800581e:	0032      	movs	r2, r6
 8005820:	0039      	movs	r1, r7
 8005822:	9803      	ldr	r0, [sp, #12]
 8005824:	f7ff ff6c 	bl	8005700 <__ssputs_r>
 8005828:	3001      	adds	r0, #1
 800582a:	d100      	bne.n	800582e <_svfiprintf_r+0x6a>
 800582c:	e0af      	b.n	800598e <_svfiprintf_r+0x1ca>
 800582e:	6963      	ldr	r3, [r4, #20]
 8005830:	9a05      	ldr	r2, [sp, #20]
 8005832:	189b      	adds	r3, r3, r2
 8005834:	6163      	str	r3, [r4, #20]
 8005836:	782b      	ldrb	r3, [r5, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d100      	bne.n	800583e <_svfiprintf_r+0x7a>
 800583c:	e0a7      	b.n	800598e <_svfiprintf_r+0x1ca>
 800583e:	2201      	movs	r2, #1
 8005840:	2300      	movs	r3, #0
 8005842:	4252      	negs	r2, r2
 8005844:	6062      	str	r2, [r4, #4]
 8005846:	a904      	add	r1, sp, #16
 8005848:	3254      	adds	r2, #84	; 0x54
 800584a:	1852      	adds	r2, r2, r1
 800584c:	1c6e      	adds	r6, r5, #1
 800584e:	6023      	str	r3, [r4, #0]
 8005850:	60e3      	str	r3, [r4, #12]
 8005852:	60a3      	str	r3, [r4, #8]
 8005854:	7013      	strb	r3, [r2, #0]
 8005856:	65a3      	str	r3, [r4, #88]	; 0x58
 8005858:	4b55      	ldr	r3, [pc, #340]	; (80059b0 <_svfiprintf_r+0x1ec>)
 800585a:	2205      	movs	r2, #5
 800585c:	0018      	movs	r0, r3
 800585e:	7831      	ldrb	r1, [r6, #0]
 8005860:	9305      	str	r3, [sp, #20]
 8005862:	f000 fa55 	bl	8005d10 <memchr>
 8005866:	1c75      	adds	r5, r6, #1
 8005868:	2800      	cmp	r0, #0
 800586a:	d11f      	bne.n	80058ac <_svfiprintf_r+0xe8>
 800586c:	6822      	ldr	r2, [r4, #0]
 800586e:	06d3      	lsls	r3, r2, #27
 8005870:	d504      	bpl.n	800587c <_svfiprintf_r+0xb8>
 8005872:	2353      	movs	r3, #83	; 0x53
 8005874:	a904      	add	r1, sp, #16
 8005876:	185b      	adds	r3, r3, r1
 8005878:	2120      	movs	r1, #32
 800587a:	7019      	strb	r1, [r3, #0]
 800587c:	0713      	lsls	r3, r2, #28
 800587e:	d504      	bpl.n	800588a <_svfiprintf_r+0xc6>
 8005880:	2353      	movs	r3, #83	; 0x53
 8005882:	a904      	add	r1, sp, #16
 8005884:	185b      	adds	r3, r3, r1
 8005886:	212b      	movs	r1, #43	; 0x2b
 8005888:	7019      	strb	r1, [r3, #0]
 800588a:	7833      	ldrb	r3, [r6, #0]
 800588c:	2b2a      	cmp	r3, #42	; 0x2a
 800588e:	d016      	beq.n	80058be <_svfiprintf_r+0xfa>
 8005890:	0035      	movs	r5, r6
 8005892:	2100      	movs	r1, #0
 8005894:	200a      	movs	r0, #10
 8005896:	68e3      	ldr	r3, [r4, #12]
 8005898:	782a      	ldrb	r2, [r5, #0]
 800589a:	1c6e      	adds	r6, r5, #1
 800589c:	3a30      	subs	r2, #48	; 0x30
 800589e:	2a09      	cmp	r2, #9
 80058a0:	d94e      	bls.n	8005940 <_svfiprintf_r+0x17c>
 80058a2:	2900      	cmp	r1, #0
 80058a4:	d111      	bne.n	80058ca <_svfiprintf_r+0x106>
 80058a6:	e017      	b.n	80058d8 <_svfiprintf_r+0x114>
 80058a8:	3501      	adds	r5, #1
 80058aa:	e7af      	b.n	800580c <_svfiprintf_r+0x48>
 80058ac:	9b05      	ldr	r3, [sp, #20]
 80058ae:	6822      	ldr	r2, [r4, #0]
 80058b0:	1ac0      	subs	r0, r0, r3
 80058b2:	2301      	movs	r3, #1
 80058b4:	4083      	lsls	r3, r0
 80058b6:	4313      	orrs	r3, r2
 80058b8:	002e      	movs	r6, r5
 80058ba:	6023      	str	r3, [r4, #0]
 80058bc:	e7cc      	b.n	8005858 <_svfiprintf_r+0x94>
 80058be:	9b07      	ldr	r3, [sp, #28]
 80058c0:	1d19      	adds	r1, r3, #4
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	9107      	str	r1, [sp, #28]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	db01      	blt.n	80058ce <_svfiprintf_r+0x10a>
 80058ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80058cc:	e004      	b.n	80058d8 <_svfiprintf_r+0x114>
 80058ce:	425b      	negs	r3, r3
 80058d0:	60e3      	str	r3, [r4, #12]
 80058d2:	2302      	movs	r3, #2
 80058d4:	4313      	orrs	r3, r2
 80058d6:	6023      	str	r3, [r4, #0]
 80058d8:	782b      	ldrb	r3, [r5, #0]
 80058da:	2b2e      	cmp	r3, #46	; 0x2e
 80058dc:	d10a      	bne.n	80058f4 <_svfiprintf_r+0x130>
 80058de:	786b      	ldrb	r3, [r5, #1]
 80058e0:	2b2a      	cmp	r3, #42	; 0x2a
 80058e2:	d135      	bne.n	8005950 <_svfiprintf_r+0x18c>
 80058e4:	9b07      	ldr	r3, [sp, #28]
 80058e6:	3502      	adds	r5, #2
 80058e8:	1d1a      	adds	r2, r3, #4
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	9207      	str	r2, [sp, #28]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	db2b      	blt.n	800594a <_svfiprintf_r+0x186>
 80058f2:	9309      	str	r3, [sp, #36]	; 0x24
 80058f4:	4e2f      	ldr	r6, [pc, #188]	; (80059b4 <_svfiprintf_r+0x1f0>)
 80058f6:	2203      	movs	r2, #3
 80058f8:	0030      	movs	r0, r6
 80058fa:	7829      	ldrb	r1, [r5, #0]
 80058fc:	f000 fa08 	bl	8005d10 <memchr>
 8005900:	2800      	cmp	r0, #0
 8005902:	d006      	beq.n	8005912 <_svfiprintf_r+0x14e>
 8005904:	2340      	movs	r3, #64	; 0x40
 8005906:	1b80      	subs	r0, r0, r6
 8005908:	4083      	lsls	r3, r0
 800590a:	6822      	ldr	r2, [r4, #0]
 800590c:	3501      	adds	r5, #1
 800590e:	4313      	orrs	r3, r2
 8005910:	6023      	str	r3, [r4, #0]
 8005912:	7829      	ldrb	r1, [r5, #0]
 8005914:	2206      	movs	r2, #6
 8005916:	4828      	ldr	r0, [pc, #160]	; (80059b8 <_svfiprintf_r+0x1f4>)
 8005918:	1c6e      	adds	r6, r5, #1
 800591a:	7621      	strb	r1, [r4, #24]
 800591c:	f000 f9f8 	bl	8005d10 <memchr>
 8005920:	2800      	cmp	r0, #0
 8005922:	d03c      	beq.n	800599e <_svfiprintf_r+0x1da>
 8005924:	4b25      	ldr	r3, [pc, #148]	; (80059bc <_svfiprintf_r+0x1f8>)
 8005926:	2b00      	cmp	r3, #0
 8005928:	d125      	bne.n	8005976 <_svfiprintf_r+0x1b2>
 800592a:	2207      	movs	r2, #7
 800592c:	9b07      	ldr	r3, [sp, #28]
 800592e:	3307      	adds	r3, #7
 8005930:	4393      	bics	r3, r2
 8005932:	3308      	adds	r3, #8
 8005934:	9307      	str	r3, [sp, #28]
 8005936:	6963      	ldr	r3, [r4, #20]
 8005938:	9a04      	ldr	r2, [sp, #16]
 800593a:	189b      	adds	r3, r3, r2
 800593c:	6163      	str	r3, [r4, #20]
 800593e:	e764      	b.n	800580a <_svfiprintf_r+0x46>
 8005940:	4343      	muls	r3, r0
 8005942:	0035      	movs	r5, r6
 8005944:	2101      	movs	r1, #1
 8005946:	189b      	adds	r3, r3, r2
 8005948:	e7a6      	b.n	8005898 <_svfiprintf_r+0xd4>
 800594a:	2301      	movs	r3, #1
 800594c:	425b      	negs	r3, r3
 800594e:	e7d0      	b.n	80058f2 <_svfiprintf_r+0x12e>
 8005950:	2300      	movs	r3, #0
 8005952:	200a      	movs	r0, #10
 8005954:	001a      	movs	r2, r3
 8005956:	3501      	adds	r5, #1
 8005958:	6063      	str	r3, [r4, #4]
 800595a:	7829      	ldrb	r1, [r5, #0]
 800595c:	1c6e      	adds	r6, r5, #1
 800595e:	3930      	subs	r1, #48	; 0x30
 8005960:	2909      	cmp	r1, #9
 8005962:	d903      	bls.n	800596c <_svfiprintf_r+0x1a8>
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0c5      	beq.n	80058f4 <_svfiprintf_r+0x130>
 8005968:	9209      	str	r2, [sp, #36]	; 0x24
 800596a:	e7c3      	b.n	80058f4 <_svfiprintf_r+0x130>
 800596c:	4342      	muls	r2, r0
 800596e:	0035      	movs	r5, r6
 8005970:	2301      	movs	r3, #1
 8005972:	1852      	adds	r2, r2, r1
 8005974:	e7f1      	b.n	800595a <_svfiprintf_r+0x196>
 8005976:	aa07      	add	r2, sp, #28
 8005978:	9200      	str	r2, [sp, #0]
 800597a:	0021      	movs	r1, r4
 800597c:	003a      	movs	r2, r7
 800597e:	4b10      	ldr	r3, [pc, #64]	; (80059c0 <_svfiprintf_r+0x1fc>)
 8005980:	9803      	ldr	r0, [sp, #12]
 8005982:	e000      	b.n	8005986 <_svfiprintf_r+0x1c2>
 8005984:	bf00      	nop
 8005986:	9004      	str	r0, [sp, #16]
 8005988:	9b04      	ldr	r3, [sp, #16]
 800598a:	3301      	adds	r3, #1
 800598c:	d1d3      	bne.n	8005936 <_svfiprintf_r+0x172>
 800598e:	89bb      	ldrh	r3, [r7, #12]
 8005990:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005992:	065b      	lsls	r3, r3, #25
 8005994:	d400      	bmi.n	8005998 <_svfiprintf_r+0x1d4>
 8005996:	e72c      	b.n	80057f2 <_svfiprintf_r+0x2e>
 8005998:	2001      	movs	r0, #1
 800599a:	4240      	negs	r0, r0
 800599c:	e729      	b.n	80057f2 <_svfiprintf_r+0x2e>
 800599e:	aa07      	add	r2, sp, #28
 80059a0:	9200      	str	r2, [sp, #0]
 80059a2:	0021      	movs	r1, r4
 80059a4:	003a      	movs	r2, r7
 80059a6:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <_svfiprintf_r+0x1fc>)
 80059a8:	9803      	ldr	r0, [sp, #12]
 80059aa:	f000 f87b 	bl	8005aa4 <_printf_i>
 80059ae:	e7ea      	b.n	8005986 <_svfiprintf_r+0x1c2>
 80059b0:	08005e4c 	.word	0x08005e4c
 80059b4:	08005e52 	.word	0x08005e52
 80059b8:	08005e56 	.word	0x08005e56
 80059bc:	00000000 	.word	0x00000000
 80059c0:	08005701 	.word	0x08005701

080059c4 <_printf_common>:
 80059c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059c6:	0016      	movs	r6, r2
 80059c8:	9301      	str	r3, [sp, #4]
 80059ca:	688a      	ldr	r2, [r1, #8]
 80059cc:	690b      	ldr	r3, [r1, #16]
 80059ce:	000c      	movs	r4, r1
 80059d0:	9000      	str	r0, [sp, #0]
 80059d2:	4293      	cmp	r3, r2
 80059d4:	da00      	bge.n	80059d8 <_printf_common+0x14>
 80059d6:	0013      	movs	r3, r2
 80059d8:	0022      	movs	r2, r4
 80059da:	6033      	str	r3, [r6, #0]
 80059dc:	3243      	adds	r2, #67	; 0x43
 80059de:	7812      	ldrb	r2, [r2, #0]
 80059e0:	2a00      	cmp	r2, #0
 80059e2:	d001      	beq.n	80059e8 <_printf_common+0x24>
 80059e4:	3301      	adds	r3, #1
 80059e6:	6033      	str	r3, [r6, #0]
 80059e8:	6823      	ldr	r3, [r4, #0]
 80059ea:	069b      	lsls	r3, r3, #26
 80059ec:	d502      	bpl.n	80059f4 <_printf_common+0x30>
 80059ee:	6833      	ldr	r3, [r6, #0]
 80059f0:	3302      	adds	r3, #2
 80059f2:	6033      	str	r3, [r6, #0]
 80059f4:	6822      	ldr	r2, [r4, #0]
 80059f6:	2306      	movs	r3, #6
 80059f8:	0015      	movs	r5, r2
 80059fa:	401d      	ands	r5, r3
 80059fc:	421a      	tst	r2, r3
 80059fe:	d027      	beq.n	8005a50 <_printf_common+0x8c>
 8005a00:	0023      	movs	r3, r4
 8005a02:	3343      	adds	r3, #67	; 0x43
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	1e5a      	subs	r2, r3, #1
 8005a08:	4193      	sbcs	r3, r2
 8005a0a:	6822      	ldr	r2, [r4, #0]
 8005a0c:	0692      	lsls	r2, r2, #26
 8005a0e:	d430      	bmi.n	8005a72 <_printf_common+0xae>
 8005a10:	0022      	movs	r2, r4
 8005a12:	9901      	ldr	r1, [sp, #4]
 8005a14:	9800      	ldr	r0, [sp, #0]
 8005a16:	9d08      	ldr	r5, [sp, #32]
 8005a18:	3243      	adds	r2, #67	; 0x43
 8005a1a:	47a8      	blx	r5
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d025      	beq.n	8005a6c <_printf_common+0xa8>
 8005a20:	2206      	movs	r2, #6
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	2500      	movs	r5, #0
 8005a26:	4013      	ands	r3, r2
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d105      	bne.n	8005a38 <_printf_common+0x74>
 8005a2c:	6833      	ldr	r3, [r6, #0]
 8005a2e:	68e5      	ldr	r5, [r4, #12]
 8005a30:	1aed      	subs	r5, r5, r3
 8005a32:	43eb      	mvns	r3, r5
 8005a34:	17db      	asrs	r3, r3, #31
 8005a36:	401d      	ands	r5, r3
 8005a38:	68a3      	ldr	r3, [r4, #8]
 8005a3a:	6922      	ldr	r2, [r4, #16]
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	dd01      	ble.n	8005a44 <_printf_common+0x80>
 8005a40:	1a9b      	subs	r3, r3, r2
 8005a42:	18ed      	adds	r5, r5, r3
 8005a44:	2600      	movs	r6, #0
 8005a46:	42b5      	cmp	r5, r6
 8005a48:	d120      	bne.n	8005a8c <_printf_common+0xc8>
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	e010      	b.n	8005a70 <_printf_common+0xac>
 8005a4e:	3501      	adds	r5, #1
 8005a50:	68e3      	ldr	r3, [r4, #12]
 8005a52:	6832      	ldr	r2, [r6, #0]
 8005a54:	1a9b      	subs	r3, r3, r2
 8005a56:	42ab      	cmp	r3, r5
 8005a58:	ddd2      	ble.n	8005a00 <_printf_common+0x3c>
 8005a5a:	0022      	movs	r2, r4
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	9901      	ldr	r1, [sp, #4]
 8005a60:	9800      	ldr	r0, [sp, #0]
 8005a62:	9f08      	ldr	r7, [sp, #32]
 8005a64:	3219      	adds	r2, #25
 8005a66:	47b8      	blx	r7
 8005a68:	3001      	adds	r0, #1
 8005a6a:	d1f0      	bne.n	8005a4e <_printf_common+0x8a>
 8005a6c:	2001      	movs	r0, #1
 8005a6e:	4240      	negs	r0, r0
 8005a70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a72:	2030      	movs	r0, #48	; 0x30
 8005a74:	18e1      	adds	r1, r4, r3
 8005a76:	3143      	adds	r1, #67	; 0x43
 8005a78:	7008      	strb	r0, [r1, #0]
 8005a7a:	0021      	movs	r1, r4
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	3145      	adds	r1, #69	; 0x45
 8005a80:	7809      	ldrb	r1, [r1, #0]
 8005a82:	18a2      	adds	r2, r4, r2
 8005a84:	3243      	adds	r2, #67	; 0x43
 8005a86:	3302      	adds	r3, #2
 8005a88:	7011      	strb	r1, [r2, #0]
 8005a8a:	e7c1      	b.n	8005a10 <_printf_common+0x4c>
 8005a8c:	0022      	movs	r2, r4
 8005a8e:	2301      	movs	r3, #1
 8005a90:	9901      	ldr	r1, [sp, #4]
 8005a92:	9800      	ldr	r0, [sp, #0]
 8005a94:	9f08      	ldr	r7, [sp, #32]
 8005a96:	321a      	adds	r2, #26
 8005a98:	47b8      	blx	r7
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	d0e6      	beq.n	8005a6c <_printf_common+0xa8>
 8005a9e:	3601      	adds	r6, #1
 8005aa0:	e7d1      	b.n	8005a46 <_printf_common+0x82>
	...

08005aa4 <_printf_i>:
 8005aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aa6:	b08b      	sub	sp, #44	; 0x2c
 8005aa8:	9206      	str	r2, [sp, #24]
 8005aaa:	000a      	movs	r2, r1
 8005aac:	3243      	adds	r2, #67	; 0x43
 8005aae:	9307      	str	r3, [sp, #28]
 8005ab0:	9005      	str	r0, [sp, #20]
 8005ab2:	9204      	str	r2, [sp, #16]
 8005ab4:	7e0a      	ldrb	r2, [r1, #24]
 8005ab6:	000c      	movs	r4, r1
 8005ab8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005aba:	2a78      	cmp	r2, #120	; 0x78
 8005abc:	d809      	bhi.n	8005ad2 <_printf_i+0x2e>
 8005abe:	2a62      	cmp	r2, #98	; 0x62
 8005ac0:	d80b      	bhi.n	8005ada <_printf_i+0x36>
 8005ac2:	2a00      	cmp	r2, #0
 8005ac4:	d100      	bne.n	8005ac8 <_printf_i+0x24>
 8005ac6:	e0be      	b.n	8005c46 <_printf_i+0x1a2>
 8005ac8:	497c      	ldr	r1, [pc, #496]	; (8005cbc <_printf_i+0x218>)
 8005aca:	9103      	str	r1, [sp, #12]
 8005acc:	2a58      	cmp	r2, #88	; 0x58
 8005ace:	d100      	bne.n	8005ad2 <_printf_i+0x2e>
 8005ad0:	e093      	b.n	8005bfa <_printf_i+0x156>
 8005ad2:	0026      	movs	r6, r4
 8005ad4:	3642      	adds	r6, #66	; 0x42
 8005ad6:	7032      	strb	r2, [r6, #0]
 8005ad8:	e022      	b.n	8005b20 <_printf_i+0x7c>
 8005ada:	0010      	movs	r0, r2
 8005adc:	3863      	subs	r0, #99	; 0x63
 8005ade:	2815      	cmp	r0, #21
 8005ae0:	d8f7      	bhi.n	8005ad2 <_printf_i+0x2e>
 8005ae2:	f7fa fb19 	bl	8000118 <__gnu_thumb1_case_shi>
 8005ae6:	0016      	.short	0x0016
 8005ae8:	fff6001f 	.word	0xfff6001f
 8005aec:	fff6fff6 	.word	0xfff6fff6
 8005af0:	001ffff6 	.word	0x001ffff6
 8005af4:	fff6fff6 	.word	0xfff6fff6
 8005af8:	fff6fff6 	.word	0xfff6fff6
 8005afc:	003600a3 	.word	0x003600a3
 8005b00:	fff60083 	.word	0xfff60083
 8005b04:	00b4fff6 	.word	0x00b4fff6
 8005b08:	0036fff6 	.word	0x0036fff6
 8005b0c:	fff6fff6 	.word	0xfff6fff6
 8005b10:	0087      	.short	0x0087
 8005b12:	0026      	movs	r6, r4
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	3642      	adds	r6, #66	; 0x42
 8005b18:	1d11      	adds	r1, r2, #4
 8005b1a:	6019      	str	r1, [r3, #0]
 8005b1c:	6813      	ldr	r3, [r2, #0]
 8005b1e:	7033      	strb	r3, [r6, #0]
 8005b20:	2301      	movs	r3, #1
 8005b22:	e0a2      	b.n	8005c6a <_printf_i+0x1c6>
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	6809      	ldr	r1, [r1, #0]
 8005b28:	1d02      	adds	r2, r0, #4
 8005b2a:	060d      	lsls	r5, r1, #24
 8005b2c:	d50b      	bpl.n	8005b46 <_printf_i+0xa2>
 8005b2e:	6805      	ldr	r5, [r0, #0]
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	2d00      	cmp	r5, #0
 8005b34:	da03      	bge.n	8005b3e <_printf_i+0x9a>
 8005b36:	232d      	movs	r3, #45	; 0x2d
 8005b38:	9a04      	ldr	r2, [sp, #16]
 8005b3a:	426d      	negs	r5, r5
 8005b3c:	7013      	strb	r3, [r2, #0]
 8005b3e:	4b5f      	ldr	r3, [pc, #380]	; (8005cbc <_printf_i+0x218>)
 8005b40:	270a      	movs	r7, #10
 8005b42:	9303      	str	r3, [sp, #12]
 8005b44:	e01b      	b.n	8005b7e <_printf_i+0xda>
 8005b46:	6805      	ldr	r5, [r0, #0]
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	0649      	lsls	r1, r1, #25
 8005b4c:	d5f1      	bpl.n	8005b32 <_printf_i+0x8e>
 8005b4e:	b22d      	sxth	r5, r5
 8005b50:	e7ef      	b.n	8005b32 <_printf_i+0x8e>
 8005b52:	680d      	ldr	r5, [r1, #0]
 8005b54:	6819      	ldr	r1, [r3, #0]
 8005b56:	1d08      	adds	r0, r1, #4
 8005b58:	6018      	str	r0, [r3, #0]
 8005b5a:	062e      	lsls	r6, r5, #24
 8005b5c:	d501      	bpl.n	8005b62 <_printf_i+0xbe>
 8005b5e:	680d      	ldr	r5, [r1, #0]
 8005b60:	e003      	b.n	8005b6a <_printf_i+0xc6>
 8005b62:	066d      	lsls	r5, r5, #25
 8005b64:	d5fb      	bpl.n	8005b5e <_printf_i+0xba>
 8005b66:	680d      	ldr	r5, [r1, #0]
 8005b68:	b2ad      	uxth	r5, r5
 8005b6a:	4b54      	ldr	r3, [pc, #336]	; (8005cbc <_printf_i+0x218>)
 8005b6c:	2708      	movs	r7, #8
 8005b6e:	9303      	str	r3, [sp, #12]
 8005b70:	2a6f      	cmp	r2, #111	; 0x6f
 8005b72:	d000      	beq.n	8005b76 <_printf_i+0xd2>
 8005b74:	3702      	adds	r7, #2
 8005b76:	0023      	movs	r3, r4
 8005b78:	2200      	movs	r2, #0
 8005b7a:	3343      	adds	r3, #67	; 0x43
 8005b7c:	701a      	strb	r2, [r3, #0]
 8005b7e:	6863      	ldr	r3, [r4, #4]
 8005b80:	60a3      	str	r3, [r4, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	db03      	blt.n	8005b8e <_printf_i+0xea>
 8005b86:	2104      	movs	r1, #4
 8005b88:	6822      	ldr	r2, [r4, #0]
 8005b8a:	438a      	bics	r2, r1
 8005b8c:	6022      	str	r2, [r4, #0]
 8005b8e:	2d00      	cmp	r5, #0
 8005b90:	d102      	bne.n	8005b98 <_printf_i+0xf4>
 8005b92:	9e04      	ldr	r6, [sp, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00c      	beq.n	8005bb2 <_printf_i+0x10e>
 8005b98:	9e04      	ldr	r6, [sp, #16]
 8005b9a:	0028      	movs	r0, r5
 8005b9c:	0039      	movs	r1, r7
 8005b9e:	f7fa fb4b 	bl	8000238 <__aeabi_uidivmod>
 8005ba2:	9b03      	ldr	r3, [sp, #12]
 8005ba4:	3e01      	subs	r6, #1
 8005ba6:	5c5b      	ldrb	r3, [r3, r1]
 8005ba8:	7033      	strb	r3, [r6, #0]
 8005baa:	002b      	movs	r3, r5
 8005bac:	0005      	movs	r5, r0
 8005bae:	429f      	cmp	r7, r3
 8005bb0:	d9f3      	bls.n	8005b9a <_printf_i+0xf6>
 8005bb2:	2f08      	cmp	r7, #8
 8005bb4:	d109      	bne.n	8005bca <_printf_i+0x126>
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	07db      	lsls	r3, r3, #31
 8005bba:	d506      	bpl.n	8005bca <_printf_i+0x126>
 8005bbc:	6862      	ldr	r2, [r4, #4]
 8005bbe:	6923      	ldr	r3, [r4, #16]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	dc02      	bgt.n	8005bca <_printf_i+0x126>
 8005bc4:	2330      	movs	r3, #48	; 0x30
 8005bc6:	3e01      	subs	r6, #1
 8005bc8:	7033      	strb	r3, [r6, #0]
 8005bca:	9b04      	ldr	r3, [sp, #16]
 8005bcc:	1b9b      	subs	r3, r3, r6
 8005bce:	6123      	str	r3, [r4, #16]
 8005bd0:	9b07      	ldr	r3, [sp, #28]
 8005bd2:	0021      	movs	r1, r4
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	9805      	ldr	r0, [sp, #20]
 8005bd8:	9b06      	ldr	r3, [sp, #24]
 8005bda:	aa09      	add	r2, sp, #36	; 0x24
 8005bdc:	f7ff fef2 	bl	80059c4 <_printf_common>
 8005be0:	3001      	adds	r0, #1
 8005be2:	d147      	bne.n	8005c74 <_printf_i+0x1d0>
 8005be4:	2001      	movs	r0, #1
 8005be6:	4240      	negs	r0, r0
 8005be8:	b00b      	add	sp, #44	; 0x2c
 8005bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bec:	2220      	movs	r2, #32
 8005bee:	6809      	ldr	r1, [r1, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	6022      	str	r2, [r4, #0]
 8005bf4:	2278      	movs	r2, #120	; 0x78
 8005bf6:	4932      	ldr	r1, [pc, #200]	; (8005cc0 <_printf_i+0x21c>)
 8005bf8:	9103      	str	r1, [sp, #12]
 8005bfa:	0021      	movs	r1, r4
 8005bfc:	3145      	adds	r1, #69	; 0x45
 8005bfe:	700a      	strb	r2, [r1, #0]
 8005c00:	6819      	ldr	r1, [r3, #0]
 8005c02:	6822      	ldr	r2, [r4, #0]
 8005c04:	c920      	ldmia	r1!, {r5}
 8005c06:	0610      	lsls	r0, r2, #24
 8005c08:	d402      	bmi.n	8005c10 <_printf_i+0x16c>
 8005c0a:	0650      	lsls	r0, r2, #25
 8005c0c:	d500      	bpl.n	8005c10 <_printf_i+0x16c>
 8005c0e:	b2ad      	uxth	r5, r5
 8005c10:	6019      	str	r1, [r3, #0]
 8005c12:	07d3      	lsls	r3, r2, #31
 8005c14:	d502      	bpl.n	8005c1c <_printf_i+0x178>
 8005c16:	2320      	movs	r3, #32
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	6023      	str	r3, [r4, #0]
 8005c1c:	2710      	movs	r7, #16
 8005c1e:	2d00      	cmp	r5, #0
 8005c20:	d1a9      	bne.n	8005b76 <_printf_i+0xd2>
 8005c22:	2220      	movs	r2, #32
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	4393      	bics	r3, r2
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	e7a4      	b.n	8005b76 <_printf_i+0xd2>
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	680d      	ldr	r5, [r1, #0]
 8005c30:	1d10      	adds	r0, r2, #4
 8005c32:	6949      	ldr	r1, [r1, #20]
 8005c34:	6018      	str	r0, [r3, #0]
 8005c36:	6813      	ldr	r3, [r2, #0]
 8005c38:	062e      	lsls	r6, r5, #24
 8005c3a:	d501      	bpl.n	8005c40 <_printf_i+0x19c>
 8005c3c:	6019      	str	r1, [r3, #0]
 8005c3e:	e002      	b.n	8005c46 <_printf_i+0x1a2>
 8005c40:	066d      	lsls	r5, r5, #25
 8005c42:	d5fb      	bpl.n	8005c3c <_printf_i+0x198>
 8005c44:	8019      	strh	r1, [r3, #0]
 8005c46:	2300      	movs	r3, #0
 8005c48:	9e04      	ldr	r6, [sp, #16]
 8005c4a:	6123      	str	r3, [r4, #16]
 8005c4c:	e7c0      	b.n	8005bd0 <_printf_i+0x12c>
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	1d11      	adds	r1, r2, #4
 8005c52:	6019      	str	r1, [r3, #0]
 8005c54:	6816      	ldr	r6, [r2, #0]
 8005c56:	2100      	movs	r1, #0
 8005c58:	0030      	movs	r0, r6
 8005c5a:	6862      	ldr	r2, [r4, #4]
 8005c5c:	f000 f858 	bl	8005d10 <memchr>
 8005c60:	2800      	cmp	r0, #0
 8005c62:	d001      	beq.n	8005c68 <_printf_i+0x1c4>
 8005c64:	1b80      	subs	r0, r0, r6
 8005c66:	6060      	str	r0, [r4, #4]
 8005c68:	6863      	ldr	r3, [r4, #4]
 8005c6a:	6123      	str	r3, [r4, #16]
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	9a04      	ldr	r2, [sp, #16]
 8005c70:	7013      	strb	r3, [r2, #0]
 8005c72:	e7ad      	b.n	8005bd0 <_printf_i+0x12c>
 8005c74:	0032      	movs	r2, r6
 8005c76:	6923      	ldr	r3, [r4, #16]
 8005c78:	9906      	ldr	r1, [sp, #24]
 8005c7a:	9805      	ldr	r0, [sp, #20]
 8005c7c:	9d07      	ldr	r5, [sp, #28]
 8005c7e:	47a8      	blx	r5
 8005c80:	3001      	adds	r0, #1
 8005c82:	d0af      	beq.n	8005be4 <_printf_i+0x140>
 8005c84:	6823      	ldr	r3, [r4, #0]
 8005c86:	079b      	lsls	r3, r3, #30
 8005c88:	d415      	bmi.n	8005cb6 <_printf_i+0x212>
 8005c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c8c:	68e0      	ldr	r0, [r4, #12]
 8005c8e:	4298      	cmp	r0, r3
 8005c90:	daaa      	bge.n	8005be8 <_printf_i+0x144>
 8005c92:	0018      	movs	r0, r3
 8005c94:	e7a8      	b.n	8005be8 <_printf_i+0x144>
 8005c96:	0022      	movs	r2, r4
 8005c98:	2301      	movs	r3, #1
 8005c9a:	9906      	ldr	r1, [sp, #24]
 8005c9c:	9805      	ldr	r0, [sp, #20]
 8005c9e:	9e07      	ldr	r6, [sp, #28]
 8005ca0:	3219      	adds	r2, #25
 8005ca2:	47b0      	blx	r6
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	d09d      	beq.n	8005be4 <_printf_i+0x140>
 8005ca8:	3501      	adds	r5, #1
 8005caa:	68e3      	ldr	r3, [r4, #12]
 8005cac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cae:	1a9b      	subs	r3, r3, r2
 8005cb0:	42ab      	cmp	r3, r5
 8005cb2:	dcf0      	bgt.n	8005c96 <_printf_i+0x1f2>
 8005cb4:	e7e9      	b.n	8005c8a <_printf_i+0x1e6>
 8005cb6:	2500      	movs	r5, #0
 8005cb8:	e7f7      	b.n	8005caa <_printf_i+0x206>
 8005cba:	46c0      	nop			; (mov r8, r8)
 8005cbc:	08005e5d 	.word	0x08005e5d
 8005cc0:	08005e6e 	.word	0x08005e6e

08005cc4 <memmove>:
 8005cc4:	b510      	push	{r4, lr}
 8005cc6:	4288      	cmp	r0, r1
 8005cc8:	d902      	bls.n	8005cd0 <memmove+0xc>
 8005cca:	188b      	adds	r3, r1, r2
 8005ccc:	4298      	cmp	r0, r3
 8005cce:	d303      	bcc.n	8005cd8 <memmove+0x14>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	e007      	b.n	8005ce4 <memmove+0x20>
 8005cd4:	5c8b      	ldrb	r3, [r1, r2]
 8005cd6:	5483      	strb	r3, [r0, r2]
 8005cd8:	3a01      	subs	r2, #1
 8005cda:	d2fb      	bcs.n	8005cd4 <memmove+0x10>
 8005cdc:	bd10      	pop	{r4, pc}
 8005cde:	5ccc      	ldrb	r4, [r1, r3]
 8005ce0:	54c4      	strb	r4, [r0, r3]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d1fa      	bne.n	8005cde <memmove+0x1a>
 8005ce8:	e7f8      	b.n	8005cdc <memmove+0x18>
	...

08005cec <_sbrk_r>:
 8005cec:	2300      	movs	r3, #0
 8005cee:	b570      	push	{r4, r5, r6, lr}
 8005cf0:	4d06      	ldr	r5, [pc, #24]	; (8005d0c <_sbrk_r+0x20>)
 8005cf2:	0004      	movs	r4, r0
 8005cf4:	0008      	movs	r0, r1
 8005cf6:	602b      	str	r3, [r5, #0]
 8005cf8:	f7fc fb6a 	bl	80023d0 <_sbrk>
 8005cfc:	1c43      	adds	r3, r0, #1
 8005cfe:	d103      	bne.n	8005d08 <_sbrk_r+0x1c>
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d000      	beq.n	8005d08 <_sbrk_r+0x1c>
 8005d06:	6023      	str	r3, [r4, #0]
 8005d08:	bd70      	pop	{r4, r5, r6, pc}
 8005d0a:	46c0      	nop			; (mov r8, r8)
 8005d0c:	20000634 	.word	0x20000634

08005d10 <memchr>:
 8005d10:	b2c9      	uxtb	r1, r1
 8005d12:	1882      	adds	r2, r0, r2
 8005d14:	4290      	cmp	r0, r2
 8005d16:	d101      	bne.n	8005d1c <memchr+0xc>
 8005d18:	2000      	movs	r0, #0
 8005d1a:	4770      	bx	lr
 8005d1c:	7803      	ldrb	r3, [r0, #0]
 8005d1e:	428b      	cmp	r3, r1
 8005d20:	d0fb      	beq.n	8005d1a <memchr+0xa>
 8005d22:	3001      	adds	r0, #1
 8005d24:	e7f6      	b.n	8005d14 <memchr+0x4>

08005d26 <_realloc_r>:
 8005d26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d28:	0007      	movs	r7, r0
 8005d2a:	000e      	movs	r6, r1
 8005d2c:	0014      	movs	r4, r2
 8005d2e:	2900      	cmp	r1, #0
 8005d30:	d105      	bne.n	8005d3e <_realloc_r+0x18>
 8005d32:	0011      	movs	r1, r2
 8005d34:	f7ff fc52 	bl	80055dc <_malloc_r>
 8005d38:	0005      	movs	r5, r0
 8005d3a:	0028      	movs	r0, r5
 8005d3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d3e:	2a00      	cmp	r2, #0
 8005d40:	d103      	bne.n	8005d4a <_realloc_r+0x24>
 8005d42:	f7ff fbdf 	bl	8005504 <_free_r>
 8005d46:	0025      	movs	r5, r4
 8005d48:	e7f7      	b.n	8005d3a <_realloc_r+0x14>
 8005d4a:	f000 f81b 	bl	8005d84 <_malloc_usable_size_r>
 8005d4e:	9001      	str	r0, [sp, #4]
 8005d50:	4284      	cmp	r4, r0
 8005d52:	d803      	bhi.n	8005d5c <_realloc_r+0x36>
 8005d54:	0035      	movs	r5, r6
 8005d56:	0843      	lsrs	r3, r0, #1
 8005d58:	42a3      	cmp	r3, r4
 8005d5a:	d3ee      	bcc.n	8005d3a <_realloc_r+0x14>
 8005d5c:	0021      	movs	r1, r4
 8005d5e:	0038      	movs	r0, r7
 8005d60:	f7ff fc3c 	bl	80055dc <_malloc_r>
 8005d64:	1e05      	subs	r5, r0, #0
 8005d66:	d0e8      	beq.n	8005d3a <_realloc_r+0x14>
 8005d68:	9b01      	ldr	r3, [sp, #4]
 8005d6a:	0022      	movs	r2, r4
 8005d6c:	429c      	cmp	r4, r3
 8005d6e:	d900      	bls.n	8005d72 <_realloc_r+0x4c>
 8005d70:	001a      	movs	r2, r3
 8005d72:	0031      	movs	r1, r6
 8005d74:	0028      	movs	r0, r5
 8005d76:	f7ff fbbb 	bl	80054f0 <memcpy>
 8005d7a:	0031      	movs	r1, r6
 8005d7c:	0038      	movs	r0, r7
 8005d7e:	f7ff fbc1 	bl	8005504 <_free_r>
 8005d82:	e7da      	b.n	8005d3a <_realloc_r+0x14>

08005d84 <_malloc_usable_size_r>:
 8005d84:	1f0b      	subs	r3, r1, #4
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	1f18      	subs	r0, r3, #4
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	da01      	bge.n	8005d92 <_malloc_usable_size_r+0xe>
 8005d8e:	580b      	ldr	r3, [r1, r0]
 8005d90:	18c0      	adds	r0, r0, r3
 8005d92:	4770      	bx	lr

08005d94 <_init>:
 8005d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d96:	46c0      	nop			; (mov r8, r8)
 8005d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d9a:	bc08      	pop	{r3}
 8005d9c:	469e      	mov	lr, r3
 8005d9e:	4770      	bx	lr

08005da0 <_fini>:
 8005da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da2:	46c0      	nop			; (mov r8, r8)
 8005da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005da6:	bc08      	pop	{r3}
 8005da8:	469e      	mov	lr, r3
 8005daa:	4770      	bx	lr
